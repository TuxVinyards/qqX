#!/bin/bash 

# NB Avoid use of "#!/usr/bin/env bash" in this script as it will mask process names & inhibit process controls.

# See notes in the Setup & Install script 


##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses 


# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,

# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 


##  A text menu interface for the 'quickemu' project  https://github.com/quickemu-project/quickemu  

#   Users should install 'quickemu' and may set up Virtual Machines as normal.

#  Originally part of quickemu-mod suite of scripts. 
#  @2023/10  qmod/qwrap probably to be phased out & focus only on qqX

#  @2023/08 this script forms the base for qqX - quickemu quickget X terminal project  
#  qqX may be installed alongside quickemu in /usr/bin  & run by typing either qqX or qqx. Or by mouse

#  @2023/08  Work on quickemu-wrap is now being frozen but this script attempts to maintain backward compatibility
#  during the initial qqX release.  In theory it may second install as qwrap. YMMV

#  Concurrent qwrap & qqX will have different settings files which may or may not be advantageous.  
#  See:  https://github.com/TuxVinyards/qqX  &  https://github.com/TuxVinyards/quickemu-mod

#  Also see https://gitlab.com/qemu-project/qemu


## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 

export "LC_NUMERIC=C"
export "LC_COLLATE=C"

if [[ ! "$(type -p bash)" ]] || ((BASH_VERSINFO[0] < 5)); then
  # @2023: we have been at ver 5 for quite a few years
  echo; echo "  Sorry, you probably need Bash 5.0 or newer to run this script."; echo
  echo "  qqX has only been tested on up-to-date versions of Bash ...."; echo
  echo "  Your version: "; echo
  bash --version
  echo
  read -rp "  Press [enter] to try anyway   [e]  to  exit and update  >  "    UpdateBash
  if [[ $UpdateBash ]]; then echo;  exit 1; 
  else  echo; echo "  I understand the risks and have made backups" ; echo ; read -rp "  [enter] to confirm  [e] to exit > " UpdateBash ; fi
  echo
  [[ $UpdateBash ]] &&  exit 1
fi

# # This script:   major.minor.point[.dev-point]  x.x.2dp[.2dp]  where x = any whole number and the last register always being 2dp.
# The 2nd register becomes printf'ed to 2dp for upgrade valuation while a single 0 in the third register indicates beta  [with fourth register at 2dp]
ModVersion="1.6.02"

ModName="$(basename "$0")"
if [[ $ModName == "qqx" || $ModName == "qqX" ]]; then ModName_qqX=1 ; else  ModName_qqX=  ; fi    # deprecated

#  Screen clears; set =1 to stop (and pause 1 sec), for easier fault tracing. Set =integer for add longer pauses. Use "0.2" etc for less.
NoClear=

#  CODING STYLE 

#  Although qqX wraps quickemu, the quickemu-project's 'style' should not be followed.

#  All code should be SHELLCHECK linted & disables avoided where possible.  
#  The VS Code shellcheck extension is recommended.  It works well if set to 'check-on-save'.


#  VARIABLES should normally tend towards 'CamelCase' & FUNCTIONS should tend towards 'snake_case'.  
#  Aim for clarity and contextual identity. Emphasis or separation underscoring & caps should be added where needed.

#  https://en.wikipedia.org/wiki/Camel_case   https://en.wikipedia.org/wiki/Snake_case

#  Variables {don't} need to be braced unless using string manipulations or needing to stop vars from merging with other text. 
#  Modern editors, such as VS Code or Sublime have auto-suggesting which enables longer & more helpful VariableNames.

#  In some places ** quickemu's given variable names ** have to be used. These are generally CAPS and very brief, eg '$QEMU'.
#  Except when working with the .conf file, where quickemu chooses to use lowercase.
#  Care should be taken not to confuse them with Bash's BUILT_IN vars, or to confuse their scope, 
#  eg. the ambiguous quickemu var '$VERSION'

#  Likewise care must be taken not to confuse lowercase vars with standard application commands, 
#  especially in non-highlighting editors. 

#  Note that Shellcheck will not continuity follow all-caps variables. https://www.shellcheck.net/wiki/SC2154


#  BRACKETS: The more powerful [[ double bracket ]] system that was introduced in Bash 3.2 
#  is now the standard method recommended in the Bash Manual.
#  See https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-_005b_005b  
#  See https://github.com/bminor/bash/blob/master/COMPAT item 32

#  Use: if [[ $Foo ]] && [[ ! $Bar ]] ...    Avoid:   if [ -n ${FOO} ] && [ -z ${bar} ] ....

#  Further notes:  https://ss64.com/bash/test.html  And (older article) http://mywiki.wooledge.org/BashFAQ/031 


#  COMMENTS: Add clarification or explanation to code, especially if the origin or meaning could be difficult to follow.
#  Also add links to any how-to's that you used.  If you needed to check, then others may do also. 
#  Let others follow what you are/were thinking at the time & give Bash beginners a chance too.
#  It makes it easier for everyone, especially later on.

#  SPACE:  Give your code some room to breathe.  Break it up into logic blocks.  
#  Make it easy to follow & easy to see what is happening.  

#  SED & AWK:  Commands can very easily finish up as lines of indecipherable hieroglyphics.
#  If you must use them, keep things very simple & explain the sections.  
#  Where possible use Bash's string manipulations instead.   See: http://mywiki.wooledge.org/BashFAQ/100

#  ECHO: Beyond basic one-liners, the use of printf should generally be preferred.  See https://ss64.com/bash/printf.html
#  However & specifically, echo within the main section of the actual qqX script *must* be avoided
#  as an echo trap is used to tee quickemu screen output to the qqX boot log.   


## INITIALIZE

# Respect standard FHS locations but allow local overide for Dev work or for Custom installs.  
qqX_MainFolder="/usr/share/qqX/qqX.main"
[[ -d "./qqX.main" ]] &&  qqX_MainFolder="$(realpath "./qqX.main")"
if [[ ! -d "$qqX_MainFolder" ]]; then echo; echo "  ERROR: qqX main files not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

# Declare global associative VM ARRAY & other initializing global vars. Make ready to read settings.
declare -gA VM_Array=()
declare -ga Extra_VM_Folder=()
declare -ga QemuError_VM_Filter=()

# Clear or set any default variables, if needed.
VM_ExecBoot=
Extra_QE_Params=
VM_Select_ItemsPerLine="4"

# Set .conf settings record from any previous session but not normally clear it until multi-instance issues have been approved
ConfClearanceLog="/tmp/qqX_ConfClearance_Log.txt"
[[ ! -e "$ConfClearanceLog" ]] && printf "" > "$ConfClearanceLog"


# LOAD qqX main  

source "$qqX_MainFolder/qqX_Initialize"

source "$qqX_MainFolder/qqX_read_main_settings"

source "$qqX_MainFolder/qqX_UI_chrome_up"

source "$qqX_MainFolder/qqX_MSR_functions"

source "$qqX_MainFolder/qqX_wrap_quickemu"

source "$qqX_MainFolder/qqX_quick_reroute_emu"

source "$qqX_MainFolder/qqX_quick_reroute_get"

source "$qqX_MainFolder/qqX_configuration_items"

source "$qqX_MainFolder/qqX_VM_array_and_Select"

source "$qqX_MainFolder/qqX_disk_maintenance"

source "$qqX_MainFolder/qqX_selfcheck_and_update"

source "$qqX_MainFolder/qqX_main_menu_routines"


##  START:  QUICKEMU-WRAP  menu interface  &  API DIVIDER  ###

#   NB   Also see initial $1 flag setting traps   &&  TODO   qwrap is now deprecated  

if [[ $1 ]]; then

  # simple API for command line or .conf starts  ie.  --vm  "path/folder/file.conf"   

  if [[ $XDG_QcowRightClick ]]; then

    # should haved changed to the parent directory at this point

    if grep -q -s "disk_img="'"'"$XDG_QcowRightClick_VM_Dir_Name/$XDG_QcowRightClick_DiskName" "$XDG_QcowRightClick_VM_Dir_Name.conf" ; then

      VM_Conf_Dir="$(pwd)"
      VM_Conf_File="$XDG_QcowRightClick_VM_Dir_Name.conf"
      VM_InstanceName="$XDG_QcowRightClick_VM_Dir_Name"
      shift

    else  XDG_QcowRightClick_NO_qqX=1 ; shift

    fi

  elif [[ $XDG_StartVariant ]]; then

    echo
    function_qqX_logo
    printColor "\n\n  %s  not understood \n\n  Or non valid file type %s \n\n"  "$1 "  "$XDG_MimeType"
    sleep 5 

  elif [[ "$1" == *'vm' ]] && [[ "$2" == *'.conf' ]]; then

    # conforms to  -vm | --vm  file.conf
    VM_Conf_Dir="$(dirname "$2")"
    VM_Conf_File="$(basename "$2")"
    shift $#

  else 
  
    show_wrap_CLI_usage 
    printf "\n\n"
    exit directly

  fi


  if [[ ! $VM_Conf_Dir ]]; then  VM_Conf_Dir="$CurrentFolder"

  else

    if [[ ! -e  "$VM_Conf_Dir"  ]]; then 

      printColor "\n\n  %s  not found "  "$VM_Conf_Dir "
    
      function_conf_error  "Q-wrap COMMAND LINE Path Instruction,"

    else  cd "$VM_Conf_Dir"  || function_conf_error  "Q-wrap COMMAND LINE Path Instruction,"

    fi

  fi

  if [[ ! -e "$VM_Conf_Dir/$VM_Conf_File" ]]; then 

    printColor "\n\n  %s  not found "  "$VM_Conf_File"
  
    function_conf_error  "Q-wrap COMMAND LINE .Conf Instruction,"

  fi

   # Selection now made, but array must still be loaded as may be needed for reselecting later ...
   ByPass_VM_Array_Selector=1

fi


##  Start main menu :   

tput civis
printf "\033c"
show_qmod_title
multi_instance_checks

# quietly check for qqX updates, in the background. Once only, at the start.

if [[ ! $Disable_qqX_upd_Checks ]]; then
  check_for_qqX_updates &   
  qqX_UpdaterPID="$!"
fi

## MAIN MENU LOOP  (select VM then choose actions to do)

while true ; do

  MainMenuChoice=
  SnapTitle=
  SnapNumber=
  SnapName=

  function_show_main_menu_header

  if [[ $XDG_QcowRightClick_NO_qqX ]] || [[ $XDG_QcowRightClick ]]; then

    check_disk_is_okay "$XDG_QcowRightClick_VM_Dir_Name"  "$XDG_QcowRightClick_DiskName"

    if [[ $DiskChkStatus ]] && [[ $DiskChkStatus != "Okay" ]]; then printColor "\n\n DISK.QCOW2 ERROR  %s "  "$DiskChkStatus" ; fi

    if [[ $XDG_QcowRightClick_NO_qqX ]]; then 
      
      [[ $DiskChkStatus == "Okay" ]] && printColor  "\n\n QEMU qcow2 disk found BUT not configured as qqX/quickemu bootable: \n\n"

    else
      
      printColor  "\n\n  qqX/quickemu bootable: \n\n"

      if [[ $DiskChkStatus != "Okay" ]]; then  

        printColor "  BUT has errors: Try qqX [disk] utils " 
        printf "\n\n Also see  https://qemu.readthedocs.io  "
        printf  "> QEMU disk image utility notes\n\n"

      fi

    fi

    "$QEMU_IMG" info "$XDG_QcowRightClick_VM_Dir_Name/$XDG_QcowRightClick_DiskName"
        
    if [[ $XDG_QcowRightClick_NO_qqX ]]; then  

      printColor "\n\n See  https://qemu.readthedocs.io  "
      printf  "> QEMU disk image utility may be useful"
      printf "\n\n  [enter] to quit  "
      
    else  printColor "\n\n  [enter] to continue  "
      
    fi

    read -rp  "  >  "
     
    if [[ ! $XDG_QcowRightClick_NO_qqX ]]; then

      XDG_QcowRightClick=
      function_show_main_menu_header

    else

      # XDG_QcowRightClick_NO_qqX=
      exit directly 

      # REVIEW  add disk conversion utility ??  Or something?

      #refresh_sources_and_reload_VM_arrays
      #MainMenuChoice="vm"
      #function_show_main_menu_header
      #continue
   
    fi

  elif [[ $SettingsFileAdjusted ]]; then 

    function_Select_VM
    MainMenuChoice="vm" 

  elif [[ $KillPID_Menu_Exited ]] || [[ $Select_VM ]] ; then

    if [[ $InstancePID ]] && [[ $( ps -p "$InstancePID" --no-headers ) ]] && [[ $(cat "${VMDIR}/${VMNAME}.pid" 2> /dev/null) ]]; then 

      #  REVIEW  add use of PID file
      printf "\n\n  %s is still running ..." "$VM_InstanceName"
      function_KillPID_Menu
      continue

    else 

      InstancePID=
    
      if [[ $Select_VM ]]; then  

        #declare -p VM_Array
        #echo    "  main menu loop - after Select_VM call:"
        #read -p "  VM_InstanceName is $VM_InstanceName  ByPass_VM_Array_Loader is $ByPass_VM_Array_Loader  ByPass_VM_Array_Selector is $ByPass_VM_Array_Selector"
        #echo

        function_Select_VM
        MainMenuChoice="refresh" 

        #declare -p VM_Array
        #echo    "  main menu loop - after Select_VM run:"
        #read -p "  VM_InstanceName is $VM_InstanceName  ByPass_VM_Array_Loader is $ByPass_VM_Array_Loader  ByPass_VM_Array_Selector is $ByPass_VM_Array_Selector"
        #echo

      else

        printf "\n    %s   >   is now shut down \n" "$VM_InstanceName" 

      fi
    
    fi

    [[ $KillPID_Menu_Exited ]] && KillPID_Menu_Exited=  
    [[ $UseCustomBootArgs ]] && UseCustomBootArgs=  

  fi


  ## Print menu:

  if [[ ! $MainMenuChoice ]]; then

    printf  "\n"

    if [[ ! $VM_InstanceName ]]; then printColor  "  [vm]  reselect " ; else   printf  "  [vm]  SELECT " ; fi

    [[ $KVM_MSR_Error || $KVM_MSR_Warn ]] && [[ ! $ShowUtilsMenu ]] && printf  "  [m]  msrs help "

    
    if [[ ! $ShowUtilsMenu ]]; then

      printf  "  [u]  show utils & technical"

    else

      printf "   [del] delete selected VM"

      printColor  "    [u]   hide utils & technical"

      printf "\n"

      printf "\n\n  [tune] config tune-up wizard    [disk]  resize or repair existing drives" 

      printf "\n\n  [2] create a second  [3] a shared  > virtual hard-drive   [rtv] reset Tiano VMF boot Vars \n"


      if [[ $VerboseArgs ]]; then printf  "\n\n  [v]   hide verbose qemu args"	

      else  printf  "\n\n  [v]   show verbose qemu args & check before booting"	; fi

      printf  "   [xa]  edit extra qemu args  "

    
      printf "\n\n  [hdw]  add current config to this VM's Virtual Hardware Record    [m] msrs help "
    
      [[ $ExtraArgs ]] && printf  "\n\n  Extra Args:  %s"  "$ExtraArgs"

      printf "\n"

    fi

    printf  "\n\n  [sc]  create   [sd]  delete   [sa]  apply   [sl]  list   >  SNAPSHOTS "

    printf "\n"

    if [[ $XDG_QcowRightClick_NO_qqX ]]; then

      printColor  "\n\n  ?? "

    elif [[ -e "$QemuArgsCustomFile" &&  $ShowCustomBootMenu ]]; then

      # NB  "$QemuArgsCustomFile" may exist BUT  $UseCustomBootArgs  remains menu selectable

      MenuCustomSystem="$(grep '/qemu-' "$QemuArgsCustomFile" | grep -v '#' )"

      MenuCustomMachine="$(grep -e '-machine' "$QemuArgsCustomFile" | grep -v '#' | cut -d ',' -f 1)"

      printColor "\n\n  [c]  start VM using custom args with %s %s" "$MenuCustomSystem" "$MenuCustomMachine"

      printf "\n\n  [C]  show full non-custom menu   or   [d] [df] std SDL   [s] [sf] std spice   [g] std gtk "

      printf "\n\n  [cd] edit custom args file    [qd] open Qemu docs in browser"

    else

      printColor  "\n\n  [d]   start with SDL display"
      
      if [[ "$VM_InstanceName" =~ 'windows' ]]; then  printColor " (sizes to Windows > display, useful for Windows updates)" 

      elif [[ "$VM_InstanceName" =~ 'macos' ]]; then  printColor " (size determined by MacOS)" 

      elif [[ $SDL_ScrnPcnt_Cmd ]]; then 
      
        printColor " (%s%%)    [df]  99%% "  "$SDL_ScreenPercent" 
        
        [[ $qqX_GL_Mode == "off" ]] && printColor "  (scaleable)"    

      elif [[ $SDL_ScrnPcnt_Error ]]; then printf " (%s%% %s > see settings)"  "$SDL_ScreenPercent"  "$SDL_ScrnPcnt_Error"

      fi

      if [[ $HeadlessDisplay ]]; then printColor 	"\n\n  [s]   start with Spice display (HEADLESS) " 

      else  printColor 	"\n\n  [s]   start with Spice display (scaleable)   [sf]  spice full screen (shift F12 to exit)"  ; fi

      printColor "\n\n  [g]   start with GTK display          "

      if [[ $qqX_GL_Mode == "off" ]] ; then printColor "[gl] OFF > toggle-on"  

      else printColor "[gl] ON > toggle-off" ; fi   

      [[ -e "$QemuArgsCustomFile" ]] && printColor "     [C] show CUSTOM args boot-menu"

    fi

    printf "\n"

    printf  "\n\n  [gt]  quickget a new distro   [i]  show VM drives info "

    filter_and_flag_qemu_errors

    if [[ $QemuErrorExists ]] ; then printColor "  [ql]  show qemu error log"

    elif [[ $FileManager ]]; then 

      if [[ $(type -p "$FileManager") ]]; then printf "   [f]  open VM folder in file manager"
    
      else  printColor "   [set]  ERROR file manager not found" ; fi

    fi

    if [[ "$VM_InstanceName" == 'ubuntu'* ]] && [[ "$VM_InstanceName" == *'daily'* || "$VM_InstanceName" == "ubuntustudio-dvd" ]]; then 
    
      if [[ ! $(du -b -t 500000 "$VM_InstanceName/disk.qcow2" 2>/dev/null) ]] && [[ $(ls "$VM_InstanceName/"*devel.iso 2>/dev/null) ]] ; then

        #  Live VMs only, as zsync only updates the iso file.   
        #  Live VM qcow2 disks are normally only 196k. Test ceiling is set at 500k.  REVIEW if problems. eg meta preallocation

        if [[ -e "$VM_InstanceName/zsync.date.txt" ]]; then

          SyncDateNow="$(date +%s)"

          SyncDateOld="$(cat "$VM_InstanceName/zsync.date.txt")"

          LastZsync="$((SyncDateNow - SyncDateOld))"

          #  older than 6hrs (in epoch seconds)

          printf "\n\n"

          if [[ $LastZsync -gt 21600 ]]; then  printColor "  [z]   daily-live zsync check - last run %d hrs ago"  "$((LastZsync/3600))"

          else  printf "  [z]   daily-live zsync check - last run %d hrs ago"  "$((LastZsync/3600))"
          
          fi

        else

          [[ -d "$VM_InstanceName" ]] && date +%s > "$VM_InstanceName/zsync.date.txt"
            
        fi

        ##  ZSYNC   See  functions 'get_ubuntu' & 'list_csv' in quickget  

          # qqX: NB only the iso gets dubbed with 'devel' suffix, otherwise VMs they keep their names 
          # eg  'ubuntu-mate-daily-live' 'ubuntustudio-dvd' 'ubuntu-daily-canary'

          # An actual 'ubuntu-devel' release or folder doesn't seem to ever get created or offered.
          # Presume release=devel (@2023/07) has now been superseded, or was merely intended as an indicative name only ...
          
          # Also note that quickget includes code to remove 'zs.old' files, which may or may not have been needed,
          # but Zsync can now give these files root protection so this removal may not work ...   REVIEW  Add a qqX copying mechanism? 


        # Sort out the quickget / function_quick_get_wrap  call & the var/flags   
        # Expect these to need updating from time to time ...

        Zsync_OS_Name="$VM_InstanceName"

        Zsync_OS_Name="${Zsync_OS_Name/'-daily'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-live'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-canary'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-legacy'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-jammy'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-dvd'/}"

        Zsync_Release_Name="$VM_InstanceName"
        Zsync_Release_Name="${Zsync_Release_Name/"${Zsync_OS_Name}-"/}"
        #echo; echo "$Zsync_OS_Name  $Zsync_Release_Name" 

        Zsync_Updatable_ISO=1

        # zero main menu flag that sets only if updater run from main 
        MainMenuZsync=

      fi

    else 

      Zsync_Updatable_ISO=
      Zsync_OS_Name=
      Zsync_Release_Name=

    fi
    
    printf  "\n\n  [h]   show help & info   [set] open settings file in text editor   [conf] open .conf file"

    [[ $DriveLocationError ]] &&  printColor "\n\n  %s"  "$DriveLocationError"

    if [[ $ConfSettingsAdjusted ]]; then 

      ConfSettingsAdjusted=
      printf "\n\n  done - general refresh not normally needed for .conf edits (use [vm] if req'd)"

    fi

    printf  "\n\n"

    if [[ $qqX_UpdaterPID ]]; then

      while true ; do

        if [[ $( ps -p "$qqX_UpdaterPID" --no-headers 2>/dev/null) ]]; then   sleep 1

        else 
        
          # shellcheck source=/dev/null
          source "$qqX_Upd_VarsTmpFile"
          qqX_UpdaterPID= 
          break
          
        fi

      done

    fi

    if [[ $DiskChkStatus ]] && [[ $DiskChkStatus != "Okay" ]]; then 

      printColor "  DISK.QCOW2 ERROR  %s  \n\n  [disk] repair utils "  "$DiskChkStatus"

    else  [[ $qqX_UpdateAvail ]] &&  printColor "  [dl]  download new qqX update: %s %s " "$qqX_LatestReleaseType" "$qqX_LatestRelease"

    fi

    printf  "  [q]   quit \n\n"

    [[ ! $MainMenuChoice ]] &&  read -rp "  >  "  MainMenuChoice

  fi

  # ACTIONS: 

  if [[ $MainMenuChoice == "h" ]] ; then

    show_quickemu_WRAP_help

   elif [[ $MainMenuChoice == "del" ]]; then 

    function_delete_Selected_VM  "$VM_InstanceName"  "$VM_Conf_File"

  elif [[ $MainMenuChoice == "hdw" ]] ; then

    AddHW_Record=

    if [[ -e "$QemuArgsFile" ]]; then 

      printf "\033c"

      if [[ -e "$QemuVirtHardwareRecord" ]]; then printf "\n\n  Existing Record: \n\n"; cat "$QemuVirtHardwareRecord"; fi

      printf "\n\n  Current Args / Qemu Virtual Hardware \n\n"
    
      cat "$QemuArgsFile"
      
      if [[ -e "$QemuVirtHardwareRecord" ]]; then printColor "  Copy Current Args onto the end of existing record list?\n\n"

      else printColor "  Create new Virtual Hardware Record using Current Args?\n\n"

      fi

      read -rp "  [enter] to continue  [b] to go back"  AddHW_Record

      if [[ $AddHW_Record != "b" ]]; then 
             
        cat "$QemuArgsFile" >> "$QemuVirtHardwareRecord"

      fi

    else

      printf "\n\n  No Args log found. The virtual machine launch process must be run first. \n\n"

      printf "\n\n  The 'VerboseArgs' option may be used, which will allow checking.  \n\n"

    fi 

  elif [[ $MainMenuChoice == "u" ]] ; then

    if [[ ! $ShowUtilsMenu ]]; then ShowUtilsMenu=1 ; else ShowUtilsMenu= ; fi

  elif [[ $MainMenuChoice == "set" ]] ; then

    qqX_edit_settings

  elif [[ $MainMenuChoice == "rtv" ]] ; then

    RtvBack=
    printColor "\n\n  In cases when distro boot sequences get stuck in unwanted loops or behaviours, this may help:"
    printf "\n\n  Backups will be made, in case you need to revert, as *.fd.old. \n\n  Your VMF_VARS.fd file(s) will be reinstalled."
    printf  "\n\n  [enter] to continue  [b] to go back "
    read -rp "  >  "  RtvBack

    if [[ $RtvBack ]]; then  printf "\n\n  Returning ... " ; sleep 1

    else

      if [[ -e "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS.fd" ]]  &&  [[ -e "/usr/share/OVMF/OVMF_VARS.fd" ]]; then
        cp -f "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS.fd" "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS.fd.old"
        cp -f "/usr/share/OVMF/OVMF_VARS.fd" "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS.fd"
        printf "\n\n  Reset/Installed 'OVMF_VARS.fd' "
      fi

      if [[ -e "$VM_Conf_Dir/$VM_InstanceName/AAVMF_VARS.fd" ]]  &&  [[ -e "/usr/share/AAVMF/AAVMF_VARS.fd" ]]; then
        cp -f "$VM_Conf_Dir/$VM_InstanceName/AAVMF_VARS.fd" "$VM_Conf_Dir/$VM_InstanceName/AAVMF_VARS.fd.old"
        cp -f "/usr/share/AAVMF/AAVMF_VARS.fd" "$VM_Conf_Dir/$VM_InstanceName/AAVMF_VARS.fd"
        printf "\n\n  Reset/Installed 'AAVMF_VARS.fd' "
      fi

      printf "\n\n  [enter] to return \n\n "
      read -rp "  >  "

    fi

  elif [[ $MainMenuChoice == "ql" ]] ; then

    QL_LogView=
    
    printf "\n\n"

    if [[ $(cat "$QemuErrorLog" 2>/dev/null) ]] ; then  
    
      cat "$QemuErrorLog"

      printf "\n\n  This log gets cleared when you run the VM, or it can be cleared now.  For permanent adjustments, see notes in the main settings."

    else  printf "  No qemu errors were present on the last VM load ...  ?? " ; fi

    printf "\n\n  Also try [rtv] from the utils menu which may help if the distro boot sequence is causing problems"

    printColor "\n\n  [enter] to return  [c] clear & return  [w] hide non-critical warnings, for this VM session \n\n"

    #  Avoid any "[W] permanent" type option because it could overwrite something manually placed in the .conf file

    read -rp "  >  "  QL_LogView

    [[ $QL_LogView  == "w" ]] && QemuError_VM_Filter+=("warning" "deprecated") 

    [[ $QL_LogView  == "c" ]] && printf "" > "$QemuErrorLog" 


  elif [[ $MainMenuChoice == "f" ]] ; then

    nohup > "/tmp/qqX_nohup.txt" 2> "/tmp/qqX_nohup.txt" "$FileManager"  "$VM_Conf_Dir/$VM_InstanceName"  &

    # > "/tmp/qqX_nohup.txt" handles the output that tells us about handling of mixed gtk2 and gtk3 etc ....  
    #  As from 'WebBrowser' section and handling of firefox etc

  elif [[ $MainMenuChoice == "dl" ]] ; then  download_new_release

  elif [[ $MainMenuChoice == "conf" ]] ; then qqX_edit_settings  conf

  elif [[ $MainMenuChoice == "cd" ]] ; then qqX_edit_settings  custom

  elif [[ $MainMenuChoice == "qd" ]] ; then nohup > "/tmp/qqX_nohup.txt" 2> "/tmp/qqX_nohup.txt" "$WebBrowser"  "https://qemu.readthedocs.io"  & 

  elif [[ $MainMenuChoice == "tune" ]] ; then function_config_tune_up "$VM_Conf_File" "$VM_InstanceName"

  elif [[ $MainMenuChoice == "gt" ]] ; then function_quick_get_wrap

  elif [[ $MainMenuChoice == "z" ]] ; then

    if [[ $Zsync_Updatable_ISO && $Zsync_OS_Name && $Zsync_Release_Name ]]; then

      MainMenuZsync=1
      function_quick_get_wrap

    else  printColor "\n\n  %s is not being recognised as Zsync updatable Release \n\n"   "$VM_InstanceName"

    fi

  elif [[ $MainMenuChoice == "m" ]] ; then

    KVM_MSR_selector_LoadHelp=1
    select_msr_config

  elif [[ $MainMenuChoice == "gl" ]] ; then

    if [[ $qqX_GL_Mode == "on" ]] ; then qqX_GL_Mode="off"

    elif [[ $qqX_GL_Mode == "off" ]] ; then qqX_GL_Mode="on" 
    
    fi

  elif [[ $MainMenuChoice == "C" ]] ; then 

    if [[ $ShowCustomBootMenu ]]; then  ShowCustomBootMenu= ; else  ShowCustomBootMenu=1 ; fi
    MainMenuChoice=
  
  elif [[ $MainMenuChoice == "c" ]] ; then 

    printf "\n\n"

    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then 

      printColor "  ERROR:  QEMU appears to be running this machine elsewhere  (qemu.pid file found)"

      printf "\n\n [enter] to return \n\n"
      read -rp "  >  "

    else

      UseCustomBootArgs=1
      eval quickemu "-vm $VM_Conf_File --vm_boot" 
      function_KillPID_Menu

    fi

  elif [[ $MainMenuChoice == "g" ]] ; then 

    printf "\n\n"

    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then 

      printColor "  ERROR:  QEMU appears to be running this machine elsewhere  (qemu.pid file found)"

      printf "\n\n [enter] to return \n\n"
      read -rp "  >  "

    else

      eval quickemu "-vm $VM_Conf_File --vm_boot --display gtk" 
      function_KillPID_Menu

    fi
        
  elif [[ $MainMenuChoice == "d" ]] || [[ $MainMenuChoice == "df" ]] ; then 

    printf "\n\n"

    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then 

      printColor "  ERROR:  QEMU appears to be running this machine elsewhere  (qemu.pid file found)"
      printf "\n\n [enter] to return \n\n"
      read -rp "  >  "

    else

      if [[ $MainMenuChoice == "df"  ]]; then  eval quickemu "-vm $VM_Conf_File --vm_boot --screenpct 99  $Extra_QE_Params" 

      else  eval quickemu "-vm $VM_Conf_File --vm_boot  $SDL_ScrnPcnt_Cmd $Extra_QE_Params" 

      fi

      [[ $InstancePID ]] && printf "\n  SDL: Use guest based display resize. Avoid resizing with the host mouse ...\n\n"

      function_KillPID_Menu

    fi
        
  elif  [[ $MainMenuChoice == "s" ]] || [[ $MainMenuChoice == "sf" ]] ; then

    printf "\n\n"

    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then 

      printColor "  ERROR:  QEMU appears to be running this machine elsewhere  (qemu.pid file found)"
      printf "\n\n [enter] to return \n\n"
      read -rp "  >  "

    else

      if [[ $HeadlessCmd ]]; then 

        # headless only runs in Spice
        eval quickemu "-vm $VM_Conf_File --vm_boot $HeadlessCmd  $Extra_QE_Params"

      elif [[ $MainMenuChoice == "sf" ]]; then  eval quickemu "-vm $VM_Conf_File --vm_boot --display spice --fullscreen  $Extra_QE_Params"

      else  eval quickemu "-vm $VM_Conf_File --vm_boot --display spice  $Extra_QE_Params"

      fi

      #  https://qemu.readthedocs.io/en/latest/system/invocation.html#hxtool-3 

      [[ $P_Kill_WaitSecs  -gt 1 ]] && P_Kill_WaitSecs="$(bc <<< "scale=0; ($P_Kill_WaitSecs+1.5)/2" 2>/dev/null)"

      function_KillPID_Menu

    fi
      
  elif  [[ $MainMenuChoice == "q" ]] ; then

    printf "\n\n"
    MainMenuChoice=
    exit directly	

  elif  [[ $MainMenuChoice == "i" ]] ; then

    drives_and_snapshots  info

    printf "\n\n  Resize using qqX [disk] utility if the disk size exceeds the (theoretical) virtual size"

    [[ $SharedDriveArgs || $SecondDriveArgs ]] && printColor "\n\n  Scroll to View "

    printf "\n\n  [enter] to return to menu \n\n "
    read -rp "  >  "  

  elif  [[ $MainMenuChoice == "disk" ]] ; then

    manage_and_repair_disks

    drives_and_snapshots  info

  elif  [[ $MainMenuChoice == "sl" ]] ; then

    drives_and_snapshots

    [[ $SharedDriveArgs && $SecondDriveArgs ]] && printColor "\n\n  Scroll to View "
    printf "\n\n  [enter] to return to menu \n\n "
    read -rp "  >  "  
  

  elif  [[ $MainMenuChoice == "sc" ]] ; then

    drives_and_snapshots  select

    printColor "\n\n  [enter] automatic date.time title  "
    printf "  [text input] descriptor   [b] back to menu " 
    SnapTitle=
    printf "\n\n"
    read -rp "  >  "  SnapTitle
    printf "\n\n"	

    [[ ! $SnapTitle ]] && SnapTitle="$(date +%b%d.%H.%M)"
    
    if [[ $SnapTitle != "b" ]]; then 
    
      # remove spaces, make title dot separated, as easier to IFS
      SnapTitle="${SnapTitle// /.}"

      "$QEMU_IMG" snapshot  -c "$SnapTitle" "$Selected_Drive" 

      "$QEMU_IMG" info "$Selected_Drive"

      printColor "\n\n  Drive Updated ..."
      printf "\n\n  [enter] to return to menu \n\n "
      read -rp "  >  "  

    fi

  elif  [[ $MainMenuChoice == "sd" ]] ; then

    drives_and_snapshots  select 
    snapshot_delete
          
  elif  [[ $MainMenuChoice == "sa" ]] ; then

    drives_and_snapshots select

    printColor "\n\n  Give number of snapshot to use  [enter] to return to menu "
    SnapNumber=
    
    printf "\n\n"
    read -rp "  >  "  SnapNumber
    printf "\n\n"	

    if [[ $SnapNumber ]]; then
    
      "$QEMU_IMG" snapshot -q -a "$SnapNumber" "$Selected_Drive" 

      printf "\n\n  May take a moment .... \n\n"
      printColor "\n\n  Snapshot %s has been applied. \n\n"  "$SnapNumber "

    fi
  
  elif [[ $MainMenuChoice == "2" || $MainMenuChoice == "3" ]] ; then

    create_new_drives
    
  elif [[ $MainMenuChoice == "v" ]] ; then

    if [[ $VerboseArgs ]]; then VerboseArgs= ; else VerboseArgs=1 ; fi
  
  elif [[ $MainMenuChoice == "vm" ]] ; then

    if [[ ! ${VM_Array[0,0]} ]]; then refresh_sources_and_reload_VM_arrays ; fi
    Select_VM=1
    ByPass_VM_Array_Selector=
    ByPass_VM_Array_Loader=

  elif [[ $MainMenuChoice == "xa" ]] ; then

    MenuXA=
    MenuXA_Correct=

    printColor "\n\n  Give extra qemu arguments to use "
    printf     "\n\n  Format = grouped & with space separated elements "
    printf     "\n\n  eg.  -device  tpm-tis,tpmdev=tpm0 "

    [[ $ExtraSetArgs ]] && printf  "\n\n  Extra Set Args:  %s"  "$ExtraSetArgs"

    if [[ $ExtraArgs ]] && [[ "$ExtraArgs" != "$ExtraSetArgs" ]]; then
    
      printf  "\n\n  Extra Args:  %s"  "$ExtraArgs"

      if [[ $ExtraSetArgs ]]; then printf "\n\n  [r] reset back to Set Args only " ; else printf "\n\n  [r] remove the Extra Args " ; fi

    fi

    printf "\n\n"
    read -rp "  > "  MenuXA

    if [[ $MenuXA != "r" ]]; then

      printf "\n\n  %s %s"  "$ExtraArgs" " $MenuXA"
      printf "\n\n  Is this correct y/n ? \n\n"
      read -rp "  >  "  MenuXA_Correct

    fi
    
    if [[ $MenuXA_Correct == "n" ]]; then printColor "\n\n  Ignoring the entered Qemu Args \n\n" ; sleep 1.5 

    elif [[ $MenuXA == "r" ]]; then printColor "\n\n  Resetting \n\n" ; ExtraArgs="$ExtraSetArgs" ; sleep 1 
    
    else  ExtraArgs="$ExtraArgs $MenuXA" ; fi

    printf "\033c\n\n"

  else

    # refresh
    MainMenuChoice=

  fi

done

# https://code.visualstudio.com/  (recommended)

# vim:tabstop=2:shiftwidth=2:expandtab

## 
