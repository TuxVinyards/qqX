#!/bin/bash

# NB Avoid use of "#!/usr/bin/env bash" in this script
# as it will mask process names & inhibit process controls.

# qqX - quickemu quickget X terminal project  https://github.com/qqxproject/qqX
# A text based Virtual Machine Manager for use with the 'quickemu' project
# https://github.com/quickemu-project/quickemu

# This SCRIPT MAY BE RUN DIRECTLY FROM A DOWNLOAD, STORAGE or DEVELOPMENT FOLDER but will need the settings file installing first.
# See notes in the Setup & Install script.

# Copyright (c)  Alex Genovese   https://github.com/qqxproject

# Licence  GPL3   https://www.gnu.org/licenses

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses

# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS.

# https://www.shellcheck.net/wiki  ShellCheck global disables:
# SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# Whilst SC1090,SC2024, SC154 become unfortunately necessary due to file sourcing of modules

# shellcheck disable=SC2242
# shellcheck disable=SC1090
# shellcheck disable=SC2034
# shellcheck disable=SC2154

# Beta version notation changes @ 24/11 with intro of 'floatversion' and improved sorting abilities
# Suffixes more closely follow 'semantic versioning' x.x.xx-suffix > major.minor.point and with optional as -beta.01 etc
# but minor numbers remain padded to 2dp
  qqX_Version="1.13.03"

# Allow Posix sub-shell checks (without -t 1) eg. qqX_Version="$(./qqX --version 2>/dev/null)"
if [ "$1" = '--version' ] || [ "$1" = '-V' ] ; then  echo "$qqX_Version" ; exit ; fi

# Posix compliant Terminal output check  - qqX should output to screen
if [ ! -t 1 ]; then exit 1 ; fi

#  # Use C.UTF-8  where possible as has more locale https://wiki.archlinux.org/title/Locale (Also see qqX_Initialize)
if  grep -sqi 'C.utf8' <<< "$(locale -a)"; then export "LC_NUMERIC=C.UTF-8" ; export "LC_COLLATE=C.UTF-8"
else export "LC_NUMERIC=C" ; export "LC_COLLATE=C"
fi

# Avoid 'kworker' grep errors, try to make sure that all processes have been statted properly before checking
sleep 0.4

# Check name is okay. qqX but also lc qqx symlink.
if [[ "$(basename "$0")" == "qqX" ]] || [[ "$(basename "$0")" == "qqx" ]]; then true; else echo; echo "Main File Name ERROR"; echo; exit 1 ; fi


###############################################  DEVELOPER SELECTABLES  ##############################################

# DEV Start is used as a flag to show which source is being used. Checks if it is starting qqX directly from a source folder
# i.e one containing all the setup files etc, and not from /usr/bin etc where they wouldn't be present (normally leave this alone ...)
if [[ -d "./qqX.system" ]]; then DevStart=1 ; else DevStart= ; fi

# DEV FAULT TRACING: set vars as =0, or set =int/float for pauses; eg =1 to pause 1 sec, "0.2" etc for less,
# where timed pauses are given. Some diagnostics require enter key to continue ...
NoClear=  ;  Loop_Diagnostics= ;  Trace_InputVars=   ; ShowProcesses=   ; PathDiagnostics=  ; ShowQGetLists=        ### DEV ###

function main_loop_diagnostics {
  if [[ $Loop_Diagnostics ]]; then
    echo; echo "VM_Conf_Dir=$VM_Conf_Dir   VM_Conf_File=$VM_Conf_File   VM_InstanceName=$VM_InstanceName"
    echo "pwd: $(pwd)   Current_VM_Folder=$Current_VM_Folder"
    echo "BootStyle=$BootStyle   BootStyleMsg=$BootStyleMsg    BootStyle_Default=$BootStyle_Default   BootStyleMsg_Default=$BootStyleMsg_Default"
    echo "ram=$ram   cpu_cores=$cpu_cores  mouse=$mouse  keyboard=$keyboard"
    echo "SelectArrayError=$SelectArrayError  DefaultFolderError=$DefaultFolderError  ExtraFolderError=$ExtraFolderError"
    echo "VM_Selection=$VM_Selection  VM_Selection_Overide=$VM_Selection_Overide"
    echo "ByPass_VM_Array_Loader=$ByPass_VM_Array_Loader  ByPass_VM_Array_Selector=$ByPass_VM_Array_Selector"
    echo "NewFileTuneUp_JustDone=$NewFileTuneUp_JustDone  QemuErrorLog=$QemuErrorLog"
    echo "MainDrive=$MainDrive disk_img=$disk_img IsoImg=$IsoImg"
    echo "SharedDrive=$SharedDrive SharedDrive_Conf=$SharedDrive_Conf SharedDrive_Mount=$SharedDrive_Mount"
    echo "QE Source=$FreePath  QE_SystemFilePath=$QE_SystemFilePath  "
    echo "QE_495_Script=$QE_495_Script  QE_496_Script=$QE_496_Script    CodingHotSwap=$CodingHotSwap  CodingHotSwapShow=$CodingHotSwapShow"
    sleep "$Loop_Diagnostics"
  fi
}

function path_diagnostics {
  if [[ $PathDiagnostics ]]; then
    echo; echo; echo "DevStart=$DevStart  - pwd: $(pwd) - System_qqX_Path: $System_qqX_Path"
    echo; echo "OriginalPATH=$OriginalPATH"
    echo; echo "Export PATH=$PATH"
    echo; echo "qqX_MainFolder: $qqX_MainFolder"
    echo "qqX_BuiltinsFolder: $qqX_BuiltinsFolder"
    echo "qqX_LibraryFolder: $qqX_LibraryFolder"
    echo "qqX_CustomFolder: $qqX_CustomFolder"
    echo "XDG_GUI_desktop_Folder: $XDG_GUI_desktop_Folder"
    echo; echo "FreePath=$FreePath  QE_SystemFilePath=$QE_SystemFilePath"
    echo "QE_495_Script=$QE_495_Script  QE_496_Script=$QE_496_Script  CodingHotSwap=$CodingHotSwap  CodingHotSwapShow=$CodingHotSwapShow"
    echo "QE_SourceVersion: $QE_SourceVersion"
    echo "QE_SourcePath: $QE_SourcePath  QE_VerNumber: $QE_VerNumber"
    echo "QG_SourcePath: $QG_SourcePath  QG_VerNumber: $QG_VerNumber"
    echo
    [[ $1 == "pause" ]] && read -rp "[enter] to continue " && echo
  fi
}

[[ $Loop_Diagnostics ]] && printf "\n\n Pre-initialize :" &&  main_loop_diagnostics  && printf "\n\n"

##############################################################################################################################


## INITIALIZE

tput civis
System_qqX_Path="$(type -p qqX)"

# Use 'type -p' which is the 'newer' method and qqX tests have shown problems using 'command -v'
# Using caps (type -P) will show aliases and qqX re-routes
# BUT 'QE_SystemFilePath' should be probed at the start of qqX, and before any builtins or re-routes happen,
# otherwise finding the filepath gets a bit complex ...

# Respect standard FHS locations but allow local overide for qqX dev work. NB no spaces in qqX dev path, see notes at end of settings file.
if [[ -d "./qqX.main" ]]; then qqX_MainFolder="$(realpath "./qqX.main")" ; else qqX_MainFolder="/usr/share/qqX/qqX.main"; fi
if [[ ! -d "$qqX_MainFolder" ]]; then echo; echo "  ERROR: qqX main files not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

if [[ -d "./qqX.builtins" ]]; then qqX_BuiltinsFolder="$(realpath "./qqX.builtins")" ; else qqX_BuiltinsFolder="/usr/share/qqX/qqX.builtins"; fi
if [[ ! -d "$qqX_BuiltinsFolder" ]]; then echo; echo "  ERROR: qqX builtin files not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

if [[ -d "./qqX.lib" ]]; then qqX_LibraryFolder="$(realpath "./qqX.lib")" ; else qqX_LibraryFolder="/usr/share/qqX/qqX.lib"; fi
if [[ ! -d "$qqX_LibraryFolder" ]]; then echo; echo "  ERROR: qqX library not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

# Read secure folder for custom user scripts, which should be admin safe eg. "/usr/share/qqX/qqX.custom"
qqX_CustomFolder="$(dirname "$qqX_MainFolder")""/qqX.custom"

# qqF standalone  > CL launched running of qcow2 file management utility (using main qqX to refresh the nbd vars)
# early launch following the location of 'qqX_MainFolder' (and guessed filemanager)
if [[ $1 == "--qqf" ]]; then
  { printf "\n qqX_MainFolder=\"%s\"" "$qqX_MainFolder"
    printf "\n qqX_CustomFolder=\"%s\"" "$qqX_CustomFolder"
    printf "\n FileManager=\"%s\"" "xdg-open"
  } > "/tmp/qqX_nbd_vars"
  if [[ -e "$qqX_CustomFolder/custom_filemanage_qcow_drive" ]]; then
    "$qqX_CustomFolder/custom_filemanage_qcow_drive" --qqf ; exit
  else "$qqX_MainFolder/qqX_filemanage_qcow_drive" --qqf ; exit
  fi
fi

# NON-FHS installs should normally locate Main and Built-Ins in with this file, so ./ will locate things

# The default location for the .desktop file, from ver 1.9 onwards, is '/usr/share/applications'
XDG_GUI_desktop_Folder="/usr/share/applications"

# Declare global associative VM ARRAY & other initializing global vars. Make ready to read settings.
declare -gA VM_Array=()
declare -ga Extra_VM_Folder=()
declare -ga QemuError_VM_Filter=()

# Clear or set any default variables, if needed.
VM_ExecBoot=
Extra_QE_Params=

# Set location of .conf log. May be present from any previous session but don't normally clear it until multi-instance issues have been approved
ConfClearanceLog="/tmp/qqX_ConfClearance_Log.txt"
[[ ! -e "$ConfClearanceLog" ]] && printf "" > "$ConfClearanceLog"

# LOAD qqX main
source "$qqX_MainFolder/qqX_Initialize"
source "$qqX_MainFolder/qqX_read_main_settings"
source "$qqX_MainFolder/qqX_UI_chrome_up"

[[ $Loop_Diagnostics ]] && printf "\n\n QE_SourcePath = %s \n\n QG_SourcePath = %s \n"  "$QE_SourcePath" "$QG_SourcePath"

# Don't load up code until checked for other instances, as the defaults could overwrite hot-swapped source files on the other instance
multi_instance_checks

source "$qqX_MainFolder/qqX_MSR_functions"
source "$qqX_MainFolder/qqX_wrap_quickemu"
source "$qqX_MainFolder/qqX_quick_reroute_emu"
source "$qqX_MainFolder/qqX_quick_reroute_get"
source "$qqX_MainFolder/qqX_configuration_items"
source "$qqX_MainFolder/qqX_configuration_tune_up"
source "$qqX_MainFolder/qqX_VM_array_routines"
source "$qqX_MainFolder/qqX_VM_selector_styles"
source "$qqX_MainFolder/qqX_VM_array_and_Select"
source "$qqX_MainFolder/qqX_disk_maintenance"
source "$qqX_MainFolder/qqX_selfcheck_and_update"
source "$qqX_MainFolder/qqX_main_menu_routines"
source "$qqX_MainFolder/qqX_main_menu_interface"
source "$qqX_MainFolder/qqX_main_menu_actions"

[[ $Loop_Diagnostics ]] && printf "\n\n Source files done:" &&  main_loop_diagnostics

function main_menu {
  while true ; do
    MainMenuChoice= ; SnapTitle= ; SnapNumber= ; SnapName=
    show_main_menu_header
    if [[ $KillPID_Menu_Exited ]] ; then
      KillPID_Menu_Exited=  ;  UseCustomBootArgs=
      if [[ $InstancePID ]] && [[ $( ps -p "$InstancePID" --no-headers ) ]] && [[ $(cat "${VMDIR}/${VMNAME}.pid" 2> /dev/null) ]]; then
        printf "\n\n  %s is still running ..." "$VM_InstanceName" ; vm_pid_kill_menu ; continue
      else  InstancePID= ;  printf "\n    %s   >   is now shut down  >  select restart or manage \n" "$VM_InstanceName"
      fi
    fi
    main_menu_interface
    main_menu_actions
    [[ $VM_Renamed ]] || [[ ! $VM_InstanceName ]] && return
  done
}

#find_quick_version_numbers
tput civis
printf "\033c"
show_qqX_title_bar
printf "\n  Running initial checks .... \n"

# Once only, at the start.
if [[ ! $Disable_qqX_upd_Checks ]]; then
  check_for_qqX_updates &
  qqX_UpdaterPID="$!"
  find_latest_qemu_version &
fi

#  The '$1' check for any MOUSE CLICK or COMMAND LINE parameters will read and set flags during 'qqX_initialize'
#  General format is  --vm  "path/folder/file.conf", including .desktop starts which will have originally had 'XDG' as $1

[[ $Initial_Input ]] && source "$qqX_MainFolder/qqX_input_and_mouse_tidyup"

[[ $QF_exit_to_Main ]] && printf "\033c"  &&  multi_instance_checks

# If selection has now been made via api or mouse:
[[ $VM_InstanceName ]] && ByPass_VM_Array_Selector=1

path_diagnostics pause

## MAIN LOOP ###########################

tput civis
while true ; do
  [[ $Loop_Diagnostics ]] && printf "\n\n Main Loop, start:" &&  main_loop_diagnostics

  # Where 'ByPass_VM_Array_Selector' implies run the loader section only
  # eg. for XDG and .conf clicked starts where we already have made the name decision and selection ...
  # as the VM array must still be loaded for reselecting later if needed

  if [[ ! $VM_InstanceName ]] || [[ $ByPass_VM_Array_Selector ]]; then
    VM_loader_selector_and_menu
    [[ $Loop_Diagnostics ]] && printf "\n\n Main Loop, VM selector:" &&  main_loop_diagnostics
  else
    # PWD should now be the conf directory but make sure we are actually there.
    # Could happen if tune up follows a download that was started in a different folder to the target new one.
    # Otherwise, go to the VM Selector.
    if [[ -d "$VM_Conf_Dir" ]] && [[ -d "$VM_Conf_Dir/$VM_InstanceName" ]]; then
      cd "$VM_Conf_Dir" || printColor "\n\n  ERROR changing to Conf Group Folder "
      Current_VM_Folder="$VM_Conf_Dir"
      reload_boot_style_defaults
      [[ $Loop_Diagnostics ]] && printf "\n\n Main Loop, pre conf refresh:" &&  main_loop_diagnostics
      refresh_conf_vars_and_values
      [[ $Loop_Diagnostics ]] && printf "\n\n Main Loop, post conf, pre main menu:" &&  main_loop_diagnostics
      main_menu
      [[ $Loop_Diagnostics ]] && printf "\n\n Main Loop, post main menu:" &&  main_loop_diagnostics
    else
      VM_InstanceName=
    fi
  fi
done
tput  cnorm

# Either 'VM_loader_selector' or 'main_menu' may exit to the QuickGET (GT) interface,
# and on 'return' the variable '$VM_InstanceName' controls which one of the two to return to.

##########################################

## CODING STYLE

#  A more MODERN BASH style of coding is used for qqX than that used for QuickEmu.

#  NOT TO WORRY if you are only familiar the older more POSIX styles, there are still plenty of options
#  for contributions to the quickemu built-ins, particularly with QuickGet which needs frequent updating.

#  VARIABLES should normally tend towards 'CamelCase' & FUNCTIONS should tend towards 'snake_case'.
#  Aim for clarity and contextual identity. Emphasis or separation underscoring & caps should be added where needed.

#  Modern editors, such as VS Code or Sublime have auto-suggesting which enables LongerMoreHelpfulVariableNames.

#  Also SHELLCHECK will NOT continuity follow all-caps variables either, even if SC2154 is enabled ...
#  https://en.wikipedia.org/wiki/Camel_case   https://en.wikipedia.org/wiki/Snake_case

#  Variables {don't} need to be braced unless using string manipulations or needing to stop vars from merging with other text.
#  Some of QuickEmu's variables can be very ambiguous eg. '$VERSION' but in some places have to be used.
#  Except for the .conf file, where they are lowercase, they are generally CAPS and very brief ...

#  BRACKETS:  if [[ $Foo ]] && [[ ! $Bar ]] ...   Posix Style is not needed:  if [ -n ${FOO} ] && [ -z ${bar} ] ....

#  The [[ double bracket ]] system is NOW the STANDARD METHOD in the Bash Manual.
#  See  https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-_005b_005b
#  Plus https://ss64.com/bash/test.html  And (older article) http://mywiki.wooledge.org/BashFAQ/031

#  Double bracket one-liners may be new to some people.
#  These statements are all the same:

FooVar=

if [ -n "${FooVar}" ]; then
  echo
  echo "  Hello "
  echo
fi

if [[ $FooVar ]]; then
  printf "\n\n  Hello \n\n"
fi

[[ $FooVar ]] && printf "\n\n  Hello \n\n"

#  COMMENTS: Add clarification or explanation to code, especially if the origin or meaning could be difficult to follow.

#  Add links to any how-to's that you used.  If you needed to check, then others may do also.
#  Let others follow what you are/were thinking at the time & give Bash beginners a chance too.
#  It makes it easier for everyone, especially later on.

#  SPACE:  Give your code some room to breathe. But also keep your code tight enough to view on smaller screens.
#  Place it into clear logic blocks. Make it easy to follow & easy to see what is happening.

#  SED, AWK and REGEX:  Commands can very easily finish up as lines of indecipherable hieroglyphics.
#  If you must use them, keep things very simple & explain the sections.
#  Where possible use Bash's string manipulations instead.   See: http://mywiki.wooledge.org/BashFAQ/100

#  ECHO: Beyond basic one-liners, the use of printf should generally be preferred.  See https://ss64.com/bash/printf.html
#  However & specifically, echo within the vm boot control section of the qqX script *must* be avoided
#  as an echo trap is used to tee quickemu screen output to the qqX boot log.

#  All code should be SHELLCHECK linted & disables avoided where possible.
#  The VS Code shellcheck extension works well if set to 'check-on-save'.


# https://code.visualstudio.com/  (recommended)

# https://github.com/bminor/bash/blob/master/COMPAT item 32  double brackets introduced in Bash 3.2 ....

# vim:tabstop=2:shiftwidth=2:expandtab

##
