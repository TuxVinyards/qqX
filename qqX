#!/bin/bash 

# NB Avoid use of "#!/usr/bin/env bash" in this script as it will mask process names & inhibit process controls.

##  qqX - quickemu quickget X terminal project  https://github.com/TuxVinyards/qqX

# A text based Virtual Machine Manager for use with the 'quickemu' project  
# https://github.com/quickemu-project/quickemu  

# Users should install 'quickemu' and may set up Virtual Machines as normal.

# See notes in the Setup & Install script 

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses 

# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 


## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 

export "LC_NUMERIC=C"
export "LC_COLLATE=C"

if [[ ! "$(type -p bash)" ]] || ((BASH_VERSINFO[0] < 5)); then
  # @2023: we have been at ver 5 for quite a few years
  echo; echo "  Sorry, you probably need Bash 5.0 or newer to run this script."; echo
  echo "  qqX has only been tested on up-to-date versions of Bash ...."; echo
  echo "  Your version: "; echo
  bash --version
  echo
  read -rp "  Press [enter] to try anyway   [e]  to  exit and update  >  "    UpdateBash
  if [[ $UpdateBash ]]; then echo;  exit 1; 
  else  echo; echo "  I understand the risks and have made backups" ; echo ; read -rp "  [enter] to confirm  [e] to exit > " UpdateBash ; fi
  echo
  [[ $UpdateBash ]] &&  exit 1
fi

# # This script:   major.minor.point[.dev-point]  x.x.2dp[.2dp]  where x = any whole number and the last register always being 2dp.
# The 2nd register becomes printf'ed to 2dp for upgrade valuation while a single 0 in the third register indicates beta  [with fourth register at 2dp]
qqX_Version="1.7.01"

# Check name is okay. qqX but also lc qqx symlink.
if [[ "$(basename "$0")" == "qqX" ]] || [[ "$(basename "$0")" == "qqx" ]]; then true; else echo; echo "Main File Name ERROR"; echo; exit 1 ; fi   
  
## DEV: Set =1 to stop (and pause 1 sec), for easier fault tracing. Set =integer for add longer pauses. Use "0.2" etc for less.
NoClear=
GeneralLoopCheck=  

## INITIALIZE

# Respect standard FHS locations but allow local overide for Dev work or for Custom installs.  
if [[ -d "./qqX.main" ]]; then qqX_MainFolder="$(realpath "./qqX.main")" ; else qqX_MainFolder="/usr/share/qqX/qqX.main"; fi
if [[ ! -d "$qqX_MainFolder" ]]; then echo; echo "  ERROR: qqX main files not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

# Declare global associative VM ARRAY & other initializing global vars. Make ready to read settings.
declare -gA VM_Array=()
declare -ga Extra_VM_Folder=()
declare -ga QemuError_VM_Filter=()

# Clear or set any default variables, if needed.
VM_ExecBoot=
Extra_QE_Params=

# Set .conf settings record from any previous session but not normally clear it until multi-instance issues have been approved
ConfClearanceLog="/tmp/qqX_ConfClearance_Log.txt"
[[ ! -e "$ConfClearanceLog" ]] && printf "" > "$ConfClearanceLog"

# LOAD qqX main  
source "$qqX_MainFolder/qqX_Initialize"
source "$qqX_MainFolder/qqX_read_main_settings"
source "$qqX_MainFolder/qqX_UI_chrome_up"
source "$qqX_MainFolder/qqX_MSR_functions"
source "$qqX_MainFolder/qqX_wrap_quickemu"
source "$qqX_MainFolder/qqX_quick_reroute_emu"
source "$qqX_MainFolder/qqX_quick_reroute_get"
source "$qqX_MainFolder/qqX_configuration_items"
source "$qqX_MainFolder/qqX_configuration_tune_up"
source "$qqX_MainFolder/qqX_VM_selector_styles"
source "$qqX_MainFolder/qqX_VM_array_and_Select"
source "$qqX_MainFolder/qqX_disk_maintenance"
source "$qqX_MainFolder/qqX_selfcheck_and_update"
source "$qqX_MainFolder/qqX_main_menu_routines"
source "$qqX_MainFolder/qqX_main_menu_interface"
source "$qqX_MainFolder/qqX_main_menu_actions"


# The quick EMU/GET version numbers, now that rerouting functions quickemu & quickget are in place & code has been sourced
# QuickEMU uses its internal variable '$VERSION'
QE_VerNumber="$VERSION"

# Vanilla QuickGET as @ ver 4.9.2  actually makes a call on to EMU to find the number. 
# But use a full call, as the 'quickget' call goes to the qqX function of the same name, 
# allowing re-routes to custom versions that may work differently.
QG_VerNumber="$(quickget "--version")"

quickget "filepath"  

#  4.9.2 (still numbered 4.9.1) changes fedora releases to 'echo 38 39' from
if grep -q -s -e 'echo 38 39' "$QG_FilePath" ; then 
  [[ $QG_VerNumber == "4.9.1" ]] && QG_VerNumber="4.9.2"
  [[ $QE_VerNumber == "4.9.1" ]] && QE_VerNumber="4.9.2"
fi

function main_menu {

  while true ; do

    MainMenuChoice=
    SnapTitle=
    SnapNumber=
    SnapName=

    show_main_menu_header

    if [[ $KillPID_Menu_Exited ]] ; then

      if [[ $InstancePID ]] && [[ $( ps -p "$InstancePID" --no-headers ) ]] && [[ $(cat "${VMDIR}/${VMNAME}.pid" 2> /dev/null) ]]; then 
        printf "\n\n  %s is still running ..." "$VM_InstanceName" ; vm_pid_kill_menu ; continue
      else  InstancePID= ;  printf "\n    %s   >   is now shut down  >  select restart or manage \n" "$VM_InstanceName" 
      fi

      [[ $KillPID_Menu_Exited ]] && KillPID_Menu_Exited=  
      [[ $UseCustomBootArgs ]] && UseCustomBootArgs=  

    fi

    [[ ! $MainMenuChoice ]] && main_menu_interface
    main_menu_actions
    [[ ! $VM_InstanceName ]] && break

  done

} 

function dev_loop_check {

    if [[ $GeneralLoopCheck ]]; then
    echo
    echo "SelectArrayError = $SelectArrayError"
    echo "VM_Conf_Dir = $VM_Conf_Dir"
    echo "VM_Conf_File = $VM_Conf_File"
    echo "VM_InstanceName = $VM_InstanceName"
    PwD="$(pwd)"
    echo "pwd: $PwD"
    echo "MainDrive = $MainDrive  IsoImg = $IsoImg"
    sleep "$GeneralLoopCheck"
  fi

}

##  General pre-menu-loop checks  

tput civis
printf "\033c"
show_qqX_title_bar

printf "\n  Running initial checks .... \n"

multi_instance_checks

# Quietly check for qqX updates, in the background. Once only, at the start.

if [[ ! $Disable_qqX_upd_Checks ]]; then
  check_for_qqX_updates &   
  qqX_UpdaterPID="$!"
fi


#  '$1' Check any MOUSE CLICK or COMMAND LINE parameters and read any flags set during 'qqX_initialize' 
#  General format is  --vm  "path/folder/file.conf", including .desktop starts which will have originally had 'XDG' as $1

if [[ $1 ]]; then source "$qqX_MainFolder/qqX_api_and_mouse_tidyup" ; fi

# Selection now possibly have been made via api or mouse, but array must still be loaded as may be needed for reselecting later ...
[[ $VM_InstanceName ]] && ByPass_VM_Array_Selector=1


## MAIN LOOP

# Where 'ByPass_VM_Array_Selector' implies run the loader section only (eg. XDG and .conf clicked starts)

tput civis

while true ; do

  dev_loop_check

  if [[ ! $VM_InstanceName || $ByPass_VM_Array_Selector ]]; then  
  
    VM_loader_selector_and_menu 
  
  else  

    # Should be in the conf directory but make sure we are. Otherwise, go to the VM Selector. 
    # Could happen if tune up follows a download that was started in a different folder to the target new one.

    if [[ -d "$VM_Conf_Dir" ]] && [[ -d "$VM_Conf_Dir/$VM_InstanceName" ]]; then 
      cd "$VM_Conf_Dir" || printColor "\n\n  ERROR changing to Conf Group Folder " 
      main_menu
    else
      VM_InstanceName=
    fi
    
  fi   

done

tput  cnorm


## CODING STYLE 

#  Although qqX wraps quickemu, the quickemu-project's 'style' should not be followed.

#  All code should be SHELLCHECK linted & disables avoided where possible.  
#  The VS Code shellcheck extension is recommended.  It works well if set to 'check-on-save'.

#  VARIABLES should normally tend towards 'CamelCase' & FUNCTIONS should tend towards 'snake_case'.  
#  Aim for clarity and contextual identity. Emphasis or separation underscoring & caps should be added where needed.

#  https://en.wikipedia.org/wiki/Camel_case   https://en.wikipedia.org/wiki/Snake_case

#  Variables {don't} need to be braced unless using string manipulations or needing to stop vars from merging with other text. 
#  Modern editors, such as VS Code or Sublime have auto-suggesting which enables longer & more helpful VariableNames.

#  In some places ** quickemu's given variable names ** have to be used. These are generally CAPS and very brief, eg '$QEMU'.
#  Except when working with the .conf file, where quickemu chooses to use lowercase.
#  Care should be taken not to confuse them with Bash's BUILT_IN vars, or to confuse their scope, 
#  eg. the ambiguous quickemu var '$VERSION'

#  Likewise care must be taken not to confuse lowercase vars with standard application commands, 
#  especially in non-highlighting editors. 

#  Note that Shellcheck will not continuity follow all-caps variables. https://www.shellcheck.net/wiki/SC2154

#  BRACKETS: The more powerful [[ double bracket ]] system that was introduced in Bash 3.2 
#  is now the standard method recommended in the Bash Manual.
#  See https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-_005b_005b  
#  See https://github.com/bminor/bash/blob/master/COMPAT item 32

#  Use: if [[ $Foo ]] && [[ ! $Bar ]] ...    Avoid:   if [ -n ${FOO} ] && [ -z ${bar} ] ....

#  Further notes:  https://ss64.com/bash/test.html  And (older article) http://mywiki.wooledge.org/BashFAQ/031 

#  COMMENTS: Add clarification or explanation to code, especially if the origin or meaning could be difficult to follow.
#  Also add links to any how-to's that you used.  If you needed to check, then others may do also. 
#  Let others follow what you are/were thinking at the time & give Bash beginners a chance too.
#  It makes it easier for everyone, especially later on.

#  SPACE:  Give your code some room to breathe. But also keep your code tight enough to view on smaller screens.    
#  Place it into clear logic blocks. Make it easy to follow & easy to see what is happening.  

#  SED & AWK:  Commands can very easily finish up as lines of indecipherable hieroglyphics.
#  If you must use them, keep things very simple & explain the sections.  
#  Where possible use Bash's string manipulations instead.   See: http://mywiki.wooledge.org/BashFAQ/100

#  ECHO: Beyond basic one-liners, the use of printf should generally be preferred.  See https://ss64.com/bash/printf.html
#  However & specifically, echo within the main section of the actual qqX script *must* be avoided
#  as an echo trap is used to tee quickemu screen output to the qqX boot log.   


# https://code.visualstudio.com/  (recommended)

# vim:tabstop=2:shiftwidth=2:expandtab

## 
