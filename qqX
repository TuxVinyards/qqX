#!/bin/bash 

# NB Avoid use of "#!/usr/bin/env bash" in this script 
# as it will mask process names & inhibit process controls.

# qqX - quickemu quickget X terminal project  https://github.com/TuxVinyards/qqX
# A text based Virtual Machine Manager for use with the 'quickemu' project  
# https://github.com/quickemu-project/quickemu  

# Users should install 'quickemu' and may set up Virtual Machines as normal.
# See notes in the Setup & Install script 

# Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses 

# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 

# https://www.shellcheck.net/wiki  ShellCheck global disables:
# SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# Whilst SC1090,SC2024, SC154 become unfortunately necessary due to file sourcing of modules

# shellcheck disable=SC2242
# shellcheck disable=SC1090 
# shellcheck disable=SC2034
# shellcheck disable=SC2154 

export "LC_NUMERIC=C"
export "LC_COLLATE=C"

# Versioning, normally as x.x.2dp > major.minor.point  Or beta as x.x.0.2dp > major.minor.0.dev-point.
# Where a single 0 in the third register indicates beta and 'x' = any whole number. The last register always as 2dp.
qqX_Version="1.9.04"

# Check name is okay. qqX but also lc qqx symlink.
if [[ "$(basename "$0")" == "qqX" ]] || [[ "$(basename "$0")" == "qqx" ]]; then true; else echo; echo "Main File Name ERROR"; echo; exit 1 ; fi   
  
## DEV: Set =1 to stop (and pause 1 sec), for easier fault tracing. Set =integer for add longer pauses. Use "0.2" etc for less. Or "0" for none.
NoClear=
GeneralLoopCheck=

## INITIALIZE

System_qqX_Path="$(type -p qqX)"

# Respect standard FHS locations but allow local overide for qqX dev work. NB no spaces in qqX dev path, see notes at end of settings file.
if [[ -d "./qqX.main" ]]; then qqX_MainFolder="$(realpath "./qqX.main")" ; else qqX_MainFolder="/usr/share/qqX/qqX.main"; fi
if [[ ! -d "$qqX_MainFolder" ]]; then echo; echo "  ERROR: qqX main files not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

if [[ -d "./qqX.builtins" ]]; then qqX_BuiltinsFolder="$(realpath "./qqX.builtins")" ; else qqX_BuiltinsFolder="/usr/share/qqX/qqX.builtins"; fi
if [[ ! -d "$qqX_BuiltinsFolder" ]]; then echo; echo "  ERROR: qqX builtin files not found.  Please re-check your installation."; echo; sleep 10; exit 1 ; fi

# Declare global associative VM ARRAY & other initializing global vars. Make ready to read settings.
declare -gA VM_Array=()
declare -ga Extra_VM_Folder=()
declare -ga QemuError_VM_Filter=()

# Clear or set any default variables, if needed.
VM_ExecBoot=
Extra_QE_Params=

# Set location of .conf log. May be present from any previous session but don't normally clear it until multi-instance issues have been approved
ConfClearanceLog="/tmp/qqX_ConfClearance_Log.txt"
[[ ! -e "$ConfClearanceLog" ]] && printf "" > "$ConfClearanceLog"

# LOAD qqX main  
source "$qqX_MainFolder/qqX_Initialize"
source "$qqX_MainFolder/qqX_read_main_settings"
source "$qqX_MainFolder/qqX_UI_chrome_up"

[[ $GeneralLoopCheck ]] && printf "\n\n QE_SourcePath = %s \n\n QG_SourcePath = %s \n"  "$QE_SourcePath" "$QG_SourcePath"

# Don't load up code until checked for other instances, as the defaults could overwrite hot-swapped source files on the other instance
multi_instance_checks

source "$qqX_MainFolder/qqX_MSR_functions"
source "$qqX_MainFolder/qqX_wrap_quickemu"
source "$qqX_MainFolder/qqX_quick_reroute_emu"
source "$qqX_MainFolder/qqX_quick_reroute_get"
source "$qqX_MainFolder/qqX_configuration_items"
source "$qqX_MainFolder/qqX_configuration_tune_up"
source "$qqX_MainFolder/qqX_VM_selector_styles"
source "$qqX_MainFolder/qqX_VM_array_and_Select"
source "$qqX_MainFolder/qqX_disk_maintenance"
source "$qqX_MainFolder/qqX_selfcheck_and_update"
source "$qqX_MainFolder/qqX_main_menu_routines"
source "$qqX_MainFolder/qqX_main_menu_interface"
source "$qqX_MainFolder/qqX_main_menu_actions"


function dev_loop_check {

    if [[ $GeneralLoopCheck ]]; then
    echo
    echo "VM_Conf_Dir = $VM_Conf_Dir   VM_Conf_File = $VM_Conf_File   VM_InstanceName = $VM_InstanceName"
    echo "BootMenu = $BootMenu   BootMenuMsg = $BootMenuMsg    BootMenu_Default = $BootMenu_Default   BootMenuMsg_Default = $BootMenuMsg_Default"
    echo "ram = $ram   cpu_cores = $cpu_cores  mouse = $mouse  keyboard = $keyboard"
    echo "SelectArrayError = $SelectArrayError  NewFileTuneUp_JustDone = $NewFileTuneUp_JustDone  QemuErrorLog = $QemuErrorLog"
    echo "MainDrive = $MainDrive disk_img = $disk_img IsoImg = $IsoImg"
    echo "QE Source = $FreePath  QE_SystemFilePath = $QE_SystemFilePath"
    echo "pwd: $(pwd)   QE_495_Script = $QE_495_Script  QE_496_Script = $QE_496_Script"
    sleep "$GeneralLoopCheck"
  fi
}

function main_menu {

  while true ; do

    MainMenuChoice=
    SnapTitle=
    SnapNumber=
    SnapName=
    show_main_menu_header

    if [[ $KillPID_Menu_Exited ]] ; then
      KillPID_Menu_Exited=  
      UseCustomBootArgs=  
      if [[ $InstancePID ]] && [[ $( ps -p "$InstancePID" --no-headers ) ]] && [[ $(cat "${VMDIR}/${VMNAME}.pid" 2> /dev/null) ]]; then 
        printf "\n\n  %s is still running ..." "$VM_InstanceName" ; vm_pid_kill_menu ; continue
      else  InstancePID= ;  printf "\n    %s   >   is now shut down  >  select restart or manage \n" "$VM_InstanceName" 
      fi
    fi

    [[ ! $MainMenuChoice ]] && main_menu_interface
    main_menu_actions
    [[ $VM_Renamed || ! $VM_InstanceName ]] && break

  done
} 

#find_quick_version_numbers
tput civis
printf "\033c"
show_qqX_title_bar
printf "\n  Running initial checks .... \n"

# Once only, at the start.
if [[ ! $Disable_qqX_upd_Checks ]]; then
  check_for_qqX_updates &   
  qqX_UpdaterPID="$!"
fi

#  '$1' Check any MOUSE CLICK or COMMAND LINE parameters and read any flags set during 'qqX_initialize' 
#  General format is  --vm  "path/folder/file.conf", including .desktop starts which will have originally had 'XDG' as $1

[[ $RunMouseApiTidy ]] && source "$qqX_MainFolder/qqX_api_and_mouse_tidyup"

# If selection has now been made via api or mouse:
[[ $VM_InstanceName ]] && ByPass_VM_Array_Selector=1


## MAIN LOOP

tput civis

while true ; do

  [[ $GeneralLoopCheck ]] && printf "\n\n Main Loop:" &&  dev_loop_check

  # Where 'ByPass_VM_Array_Selector' implies run the loader section only (eg. XDG and .conf clicked starts)
  # The array must still be loaded as may be needed for reselecting later ...

  if [[ ! $VM_InstanceName || $ByPass_VM_Array_Selector ]]; then   VM_loader_selector_and_menu 
  
  else  

    # PWD should now be the conf directory but make sure we are actually there.  
    # Could happen if tune up follows a download that was started in a different folder to the target new one.
    # Otherwise, go to the VM Selector.

    if [[ -d "$VM_Conf_Dir" ]] && [[ -d "$VM_Conf_Dir/$VM_InstanceName" ]]; then 
      cd "$VM_Conf_Dir" || printColor "\n\n  ERROR changing to Conf Group Folder " 
      main_menu
    else
      VM_InstanceName=
    fi
    
  fi   

done

tput  cnorm


## CODING STYLE 

#  A more modern style of coding is used for qqX than that used for quickemu:

#  VARIABLES should normally tend towards 'CamelCase' & FUNCTIONS should tend towards 'snake_case'.  
#  Aim for clarity and contextual identity. Emphasis or separation underscoring & caps should be added where needed.

#  Modern editors, such as VS Code or Sublime have auto-suggesting which enables longer & more helpful VariableNames.
#  Also Shellcheck will not continuity follow all-caps variables either, even if SC2154 is enabled ...
#  https://en.wikipedia.org/wiki/Camel_case   https://en.wikipedia.org/wiki/Snake_case

#  Variables {don't} need to be braced unless using string manipulations or needing to stop vars from merging with other text. 
#  Some of quickemu's variables can be very ambiguous eg. '$VERSION' but in some places have to be used. 
#  Except for the .conf file, where they are lowercase, they are generally CAPS and very brief ...

#  BRACKETS:  if [[ $Foo ]] && [[ ! $Bar ]] ...   Avoid:  if [ -n ${FOO} ] && [ -z ${bar} ] ....

#  The [[ double bracket ]] system is now the standard method in the Bash Manual.
#  See  https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-_005b_005b  
#  Plus https://ss64.com/bash/test.html  And (older article) http://mywiki.wooledge.org/BashFAQ/031 

#  COMMENTS: Add clarification or explanation to code, especially if the origin or meaning could be difficult to follow.

#  Add links to any how-to's that you used.  If you needed to check, then others may do also. 
#  Let others follow what you are/were thinking at the time & give Bash beginners a chance too.
#  It makes it easier for everyone, especially later on.

#  SPACE:  Give your code some room to breathe. But also keep your code tight enough to view on smaller screens.    
#  Place it into clear logic blocks. Make it easy to follow & easy to see what is happening.  

#  SED & AWK:  Commands can very easily finish up as lines of indecipherable hieroglyphics.
#  If you must use them, keep things very simple & explain the sections.  
#  Where possible use Bash's string manipulations instead.   See: http://mywiki.wooledge.org/BashFAQ/100

#  ECHO: Beyond basic one-liners, the use of printf should generally be preferred.  See https://ss64.com/bash/printf.html
#  However & specifically, echo within the vm boot control section of the qqX script *must* be avoided
#  as an echo trap is used to tee quickemu screen output to the qqX boot log.  

#  All code should be SHELLCHECK linted & disables avoided where possible.  
#  The VS Code shellcheck extension works well if set to 'check-on-save'.


# https://code.visualstudio.com/  (recommended)

# https://github.com/bminor/bash/blob/master/COMPAT item 32  double brackets introduced in Bash 3.2 ....

# vim:tabstop=2:shiftwidth=2:expandtab

## 
