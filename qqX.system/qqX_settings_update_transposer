#!/usr/bin/env bash

##  qqX - quickemu quickget X terminal project   

#   Helper file for qqX settings file updates

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses 

# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 


function  update_old_settings_file_with_new_options {

  Old_SettingsFile="$1" 
  Template_SettingsFile="$2"
  Old_SettingsFileFolder="$3"
  
  ## USAGE: presumes this file to be run from a qqX release folder ... 
  [[ ! $Template_SettingsFile ]] &&  Template_SettingsFile="qqX_settings"

  # presumes standard installation placement
  [[ ! $Old_SettingsFileFolder ]] &&  Old_SettingsFileFolder="$HOME/.qqX"
  [[ ! $Old_SettingsFile ]] &&  Old_SettingsFile="qqX_settings"

  # *and* presumes that a valid settings file has been found before this routine is called

  ## DEV Array output - Set =1  file or screen or both 
  DevSetUpdArrOutputScrn= ; DevSetUpdArrOutputFile=

  ##

  ## 1: OLD FILE  

  #  The VM & Extra Folder lists are of unknown length & number so store as separate to add later.

  Grep_OLD_VM_Arrays_File="/tmp/grep.old.vm.arrays.txt"
  Grep_OLD_XF_Arrays_File="/tmp/grep.old.xf.arrays.txt"

  printf "" > "$Grep_OLD_VM_Arrays_File"
  printf "" > "$Grep_OLD_XF_Arrays_File"

  # A. Extract ALL non-commented lines
  mapfile -t GrepArr_OLD_OneLine_Settings  <<< "$(grep '=' "$Old_SettingsFileFolder/$Old_SettingsFile" | grep -v '#')"

  if [[ $DevSetUpdArrOutputScrn ]]; then  echo "Pre-Parse"; declare -p GrepArr_OLD_OneLine_Settings ; echo ; fi
  if [[ $DevSetUpdArrOutputFile ]]; then  declare -p GrepArr_OLD_OneLine_Settings > "/tmp/qDevSet_OldOneLineArr_PreParse.txt" ; fi


  # B. Remove any existing, personalized folder array lists &  keep them to one side for later. (from the non-commented above)

  for i in "${!GrepArr_OLD_OneLine_Settings[@]}"; do

    case "${GrepArr_OLD_OneLine_Settings[i]}" in
     
      *'VM_Array['*)  
        printf "%s\n\n" "${GrepArr_OLD_OneLine_Settings[i]}" >> "$Grep_OLD_VM_Arrays_File" 
        unset "GrepArr_OLD_OneLine_Settings[i]"  
        ;;
      
      *'Extra_VM_Folder+='*)  
        printf "%s\n\n" "${GrepArr_OLD_OneLine_Settings[i]}" >> "$Grep_OLD_XF_Arrays_File"  
        unset "GrepArr_OLD_OneLine_Settings[i]"  
        ;;

      *) true ;;
      
    esac

  done	

  #  Re-index as sections have been removed
  GrepArr_OLD_OneLine_Settings=("${GrepArr_OLD_OneLine_Settings[@]}")

  if [[ $DevSetUpdArrOutputScrn ]]; then  echo "Post-Parse"; declare -p GrepArr_OLD_OneLine_Settings ; echo ; fi
  if [[ $DevSetUpdArrOutputFile ]]; then  declare -p GrepArr_OLD_OneLine_Settings > "/tmp/qDevSet_OldOneLineArr_PostParse.txt" ; fi


  # C. Find & store the Base Name of each setting ie the Var= instead of the whole var & value
  GrepArr_OLD_BaseNameSettings=()
  for i in "${!GrepArr_OLD_OneLine_Settings[@]}" ; do
    GrepArr_OLD_BaseNameString="$(cut -d '=' -f1 <<< "${GrepArr_OLD_OneLine_Settings[i]}")"
    GrepArr_OLD_BaseNameString="${GrepArr_OLD_BaseNameString// /}""="
    GrepArr_OLD_BaseNameSettings+=( "$GrepArr_OLD_BaseNameString" )
  done

  if [[ $DevSetUpdArrOutputScrn ]]; then  echo "Old BaseName"; declare -p GrepArr_OLD_BaseNameSettings ; echo ; fi
  if [[ $DevSetUpdArrOutputFile ]]; then  declare -p GrepArr_OLD_BaseNameSettings > "/tmp/qDevSet_OldBaseNameArr.txt" ; fi


  ## 2: NEW FILE OUTPUT 

  ## A. Make a backup to the installer folder (& check that it is a faithful copy)
  # Dev: move to trash to stop clutter.
  
  D_Stamp=".""$(date +%a.%d.%b.%G.%H.%M)"

  if [[ -d ".git" ]] && [[ $(type -p gio 2>/dev/null) ]]; then 

    gio trash "$Old_SettingsFileFolder/$Old_SettingsFile"
    printf "\n\n  OLD SETTINGS file has been moved TO THE TRASH BIN (for recovery, if needed)\n\n"

  else

    cp "$Old_SettingsFileFolder/$Old_SettingsFile" "$(pwd)/qqX_settings.$D_Stamp.old.txt" 

    ChkSumOld="$(md5sum "$Old_SettingsFileFolder/$Old_SettingsFile" 2>/dev/null | head -c 32)"
    ChkSumBackup="$(md5sum "$(pwd)/qqX_settings.$D_Stamp.old.txt" 2>/dev/null | head -c 32)"

    if [[ $ChkSumOld != "$ChkSumBackup" ]]; then 
      printColor "\n\n  ERROR:  unable to make a backup of the settings file."
      printf "\n\n  Aborting update.  Please check at https://github.com/TuxVinyards/qqX/issues"
      printf "\n\n\n  [enter] to exit ... \n\n"
      read -rp "  >  "
      printf "\n\n"
      exit
    else  printf "\n\n  A backup of the original settings file has been made & verified \n\n"
    fi

  fi

  ## B. create new composite file, in place of the old
  TargetNew="$Old_SettingsFileFolder/$Old_SettingsFile" 
  printf "" > "$TargetNew"


  ## C. map ALL of template file lines to an array for outputting to the new file
  mapfile -t GrepArr_NEW  < "$Template_SettingsFile"

  if [[ $DevSetUpdArrOutputScrn ]]; then  echo "GrepArr_NEW Pre_MainLoop"; declare -p GrepArr_NEW ; echo ; fi
  if [[ $DevSetUpdArrOutputFile ]]; then  declare -p GrepArr_NEW > "/tmp/qDevSet_GrepArr_NEW_Pre_MainLoop.txt" ; fi

  VM_Old_TxDone=
  XF_Old_TxDone=

  if [[ $DevSetUpdArrOutputFile ]]; then 
    echo > "/tmp/qDevSet_Match_NewOld.txt"
    echo > "/tmp/qDevSet_No_Match.txt"
    echo > "/tmp/qDevSet_CopyOver.txt"
    echo > "/tmp/qDevSet_iVals.txt"
    echo > "/tmp/qDevSet_ProposedMatch.txt"
  fi

  if [[ $DevSetUpdArrOutputScrn || $DevSetUpdArrOutputFile ]]; then
    printf "\n\n  Pre Main Loop point: \n\n"
    # read -rp "  >  "
  fi

  ## MAIN LOOP: 

  for i in "${!GrepArr_NEW[@]}"; do 

    MatchNewOld=
    SkipCopy=

    if [[ $DevSetUpdArrOutputScrn ]]; then  echo; echo "i = $i"; fi
    if [[ $DevSetUpdArrOutputFile ]]; then  echo "i = $i" >> "/tmp/qDevSet_iVals.txt" ; fi 

    case "${GrepArr_NEW[i]}" in

      #  Detect array zones and copy the *stored* customised block to the new file instead
      #  one set only avoid accumulating more new ones (also the line spaces between the extra statements)

      *'Extra_VM_Folder+='*)  
        if [[ $XF_Old_TxDone ]]; then
          SkipCopy=1 ; SkipLineSpace=1
        else
          if grep -q 'Extra_VM_Folder+=' "$Grep_OLD_XF_Arrays_File" ; then
            cat "$Grep_OLD_XF_Arrays_File" >> "$TargetNew" 
            XF_Old_TxDone=1
          fi
        fi
        ;;
      
      *'# ADD here'*) 

        if [[ ! $VM_Old_TxDone ]]; then
          printf "%s\n\n" "${GrepArr_NEW[i]}" >> "$TargetNew"
          SkipCopy=1 
          if grep -q 'VM_Array' "$Grep_OLD_VM_Arrays_File" ; then
            cat "$Grep_OLD_VM_Arrays_File" >> "$TargetNew" 
            VM_Old_TxDone=1
          fi
        fi
        ;;
      
    esac
    
    [[ $SkipLineSpace ]] && SkipCopy=1  && SkipLineSpace=

    # One Array set only, avoid accumulating 'new' ones each time
    [[ $XF_Old_TxDone ]] && [[ "${GrepArr_NEW[i]}" == *'xtra_VM_Folder+='* ]]  && SkipCopy=1 && SkipLineSpace=1 
    [[ $VM_Old_TxDone ]] && [[ "${GrepArr_NEW[i]}" == *'M_Array['* ]]  && SkipCopy=1 && SkipLineSpace=1
    

    if [[ ! $SkipCopy ]] && [[ ! $SkipLineSpace ]] ; then

      if ! grep -q '#' <<< "${GrepArr_NEW[i]}" &&  grep -q '=' <<< "${GrepArr_NEW[i]}" ; then

        ProposedNew_BaseNameSetting=
        ProposedNew_BaseNameSetting="$(cut -d '=' -f1 <<< "${GrepArr_NEW[i]}")"
        ProposedNew_BaseNameSetting="${ProposedNew_BaseNameSetting// /}""="

        for n in "${!GrepArr_OLD_BaseNameSettings[@]}" ; do

          if [[ $DevSetUpdArrOutputScrn ]]; then  
            printf "Match Test- '%s' - '%s'\n" "$ProposedNew_BaseNameSetting" "${GrepArr_OLD_BaseNameSettings[n]}" 
          fi
          if [[ $DevSetUpdArrOutputFile ]]; then  
            printf "Match Test- '%s' - '%s'\n" "$ProposedNew_BaseNameSetting" "${GrepArr_OLD_BaseNameSettings[n]}" >> "/tmp/qDevSet_ProposedMatch.txt" 
          fi 

          if [[ $ProposedNew_BaseNameSetting == "${GrepArr_OLD_BaseNameSettings[n]}" ]] ; then
            MatchNewOld=1
            echo "${GrepArr_OLD_OneLine_Settings[n]}" >> "$TargetNew"
            if [[ $DevSetUpdArrOutputScrn ]]; then  echo "MatchNewOld > Copy Old - ${GrepArr_OLD_OneLine_Settings[n]}"; fi
            if [[ $DevSetUpdArrOutputFile ]]; then  echo "MatchNewOld > Copy Old - ${GrepArr_OLD_OneLine_Settings[n]}" >> "/tmp/qDevSet_Match_NewOld.txt" ; fi 
            break
          fi 
        done

      fi

      [[ ! $MatchNewOld ]] && echo "${GrepArr_NEW[i]}"  >> "$TargetNew"

      if [[ $DevSetUpdArrOutputScrn && ! $MatchNewOld ]]; then  echo "No Match > Copy New - ${GrepArr_NEW[i]}" ; fi
      if [[ $DevSetUpdArrOutputFile && ! $MatchNewOld ]]; then  echo "No Match > Copy New - ${GrepArr_NEW[i]}" >> "/tmp/qDevSet_No_Match.txt" ; fi

    elif [[ ! $SkipCopy ]]; then

      if [[ ! $SkipLineSpace ]]; then echo "${GrepArr_NEW[i]}"  >> "$TargetNew"; fi

      if [[ $DevSetUpdArrOutputScrn ]]; then  echo "Copy - ${GrepArr_NEW[i]}"; fi
      if [[ $DevSetUpdArrOutputFile ]]; then  echo "Copy - ${GrepArr_NEW[i]}" >> "/tmp/qDevSet_CopyOver.txt" ; fi

    fi

  done

  [[ $DevSetUpdArrOutputScrn ]] && printf "\n\n"
  printf "  The settings file has now been updated. \n  All recognised original settings have been transferred. \n\n"
  
}

# vim:tabstop=2:shiftwidth=2:expandtab

##
