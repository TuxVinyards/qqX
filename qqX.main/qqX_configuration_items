#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

#   Licence  GPL3   https://www.gnu.org/licenses 

##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:

# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154  


custom_conf_notes () {

  printColor "\n\n  qqX .conf reminders:"

  printf "
  
    #!/usr/bin/qqX --vm                (for qqX direct start)

    Custom_SDL_ScreenPercent=\"xx\"      (integer from 25 to 99)
    HeadlessDisplay=\"true\"

    SecondDrive=\"My_Folder/My_VM/disk2.qcow2\"
    SharedDrive_Conf=\"no-shared\"
    MacLegacyDrive=\"true\"

    Other:
    disk_size=\"xxG\"   (integer, used once, for first build)
    cpu_cores=\"x\"     (even integer)
    ram=\"xG\"          (integer)

    boot=\"legacy\"     (use bios, not UEFI)

    Windows:
    tpm=\"on\"          secureboot=\"off\"
    gl=\"off\"          (scaleable SDL, easier restarts) (?)

    Difficult booting: 
    boot=\"legacy\"  &  gl=\"off\"  may help ...

    highlight then shift-ctrl-c  to copy ...
  \n"

}

function check_screen_percentage_and_output {

  SDL_ScreenPercent=
  SDL_ScrnPcnt_Cmd=
  HeadlessCmd=
  
  #  Function 'refresh_conf_vars_and_values' should clear all existing .conf vars before sourcing a new conf file  
  #  Note that 'gl' is a quickemu internal variable which quickemu defaults to "on"  
  #  From quickemu 4.8 onwards, the value " --screenpct xx"  may be used on SDL, where xx is a value from 25 to 99  & Linux VM's only.
  #  But check the source to see if the case option exists, don't rely on the version number as formats change or could be a custom version.

  if [[ $gl == "off" || $gl == "on" ]]; then  qqX_GL_Mode="$gl" 
  else
    if [[ $SetGL_DefaultAsOff ]]; then qqX_GL_Mode="off" ; else qqX_GL_Mode="on" ; fi
  fi

  [[ $Custom_SDL_ScreenPercent ]] && SDL_ScreenPercent="$Custom_SDL_ScreenPercent"
  [[ $Default_SDL_ScreenPercent ]] && [[ ! $SDL_ScreenPercent ]] && SDL_ScreenPercent="$Default_SDL_ScreenPercent"

  if [[ $SDL_ScreenPercent ]]; then 
  
    SDL_ScrnPcnt_Error=
    SDL_ScreenPercent="$(tr -cd "[:digit:]" <<< "$SDL_ScreenPercent")"

    if (( 24 < SDL_ScreenPercent && SDL_ScreenPercent < 100 )); then

      if [[ $QE_495Test ]] && [[ $XDG_SESSION_TYPE == "x11" || $XDG_SESSION_TYPE == "wayland" ]]; then
        Mon_xRes= 
        Mon_yRes= 
        Mon_xRes=$(xrandr --listmonitors | grep -v Monitors | cut -d' ' -f4 | cut -d'/' -f1 | head -n1)
        Mon_yRes=$(xrandr --listmonitors | grep -v Monitors | cut -d' ' -f4 | cut -d'/' -f2 | cut -d'x' -f2 | head -n1)
      fi

      if grep -q -s -e 'screenpct' "/tmp/qmod-case-temp" ; then   SDL_ScrnPcnt_Cmd=" --screenpct  $SDL_ScreenPercent"

      elif [[ $QE_495Test ]] && [[ $Mon_xRes && $Mon_yRes ]]; then

        xRes="$(bc <<< "scale=0; $Mon_xRes*$SDL_ScreenPercent/100")"
        yRes="$(bc <<< "scale=0; $Mon_yRes*$SDL_ScreenPercent/100")"

        [[ ! $xRes || ! $yRes ]] && xRes=1152 && yRes=648

        SDL_ScrnPcnt_Cmd=" --width $xRes --height $yRes"

      else
        printColor "\n\n  WARNING:  SDL_ScreenPercent needs quickemu 4.8+ \n\n "
        SDL_ScrnPcnt_Error="> not possible with this qe-version"
      fi

    else

      printColor "\n\n  ERROR:  SDL_ScreenPercent = %s  Range is 25 to 99 \n\n "  "$SDL_ScreenPercent"
      SDL_ScrnPcnt_Error="Out of Range"
      
    fi

  fi

  [[ $HeadlessDisplay != "true" ]] && HeadlessDisplay= 
  [[ $HeadlessDisplay ]] && HeadlessCmd=" --display  none"

}  

function set_drive_paths {

  #  For a SECOND/SHARED DRIVE (idea from @gnudoc on the quickemu Discord channel)  do "qemu-img create -f qcow2 disk2.qcow2 40G"  or as required
  #  Set  ExtraArgs=" -device virtio-blk-pci,drive=SharedDrive -drive id=SharedDrive,if=none,format=qcow2,file=/vm_folder/disk2.qcow2"  
  #  Edit path & boot a VM.  Use 'Disks'  Gparted or similar to find, format and mount.  
  #  The function needs to be run everytime a different VM is selected to allow for individual VM settings or requirements.

  #  Older versions of MacOS require a non pci set up. See quickemu script "Qemu optimisations based on the macOS release" 
  #  Any OS older than and including 10.13 Mojave 2018 should have a flag in the .conf file > MacLegacyDrive="true"
  #  See https://en.wikipedia.org/wiki/MacOS_version_history


  #  SECOND DRIVE and .conf file
  #  Drive path to be individually set in the .conf file on a per VM basis.   

  #  NOTE: From qqX ver 1.5 onwards, this function now gets called by 'refresh_conf_vars_and_values' 
  #  which will have already sourced the .conf file and its variables

  if [[ $MacLegacyDrive == "true" ]]; then  BusType="ide-hd,bus=ahci.2" 
        
  else BusType="virtio-blk-pci"; fi

  #  SECOND DRIVE 
  #  Drive path to be individually set in the .conf file on a per VM basis.  

  if [[ -e "$SecondDrive" ]]; then

    SecondDriveArgs=" -device ${BusType},drive=SecondDrive -drive id=SecondDrive,if=none,format=qcow2,file=$SecondDrive"  

  elif [[ $SecondDrive ]]; then 

    # whilst the conf entry exists the above test didn't find it
    DriveLocationError="ERROR SecondDrive NOT found (.conf file)"

  fi

  #  SHARED DRIVE
  #  This drive should be availble to all VMs and act as a shared resource.  See main settings.

  if [[ $(grep -s 'SharedDrive=' "$qqX_SettingsFile" | grep -v '#' | grep -c 'SharedDrive') == 1 ]]; then
      eval "$(grep -s 'SharedDrive=' "$qqX_SettingsFile" | grep -v '#' )"
  fi

  if [[ $SharedDrive ]]; then 

    eval "$(grep -s SharedDrive_Conf "$VM_Conf_File")"

    if [[ $MacLegacyDrive ]] || [[ $SharedDrive_Conf ==  "no-shared" ]]; then 

      SharedDrive=
      SharedDriveArgs=

    elif [[ -e "$SharedDrive" ]]; then

      [[ ! $BusType ]] && BusType="virtio-blk-pci"
      SharedDriveArgs=" -device ${BusType},drive=SharedDrive -drive id=SharedDrive,if=none,format=qcow2,file=$SharedDrive"  

    elif [[ $SharedDrive ]]; then 

      DriveLocationError="ERROR SharedDrive NOT found (main settings)"

    fi

  fi

}  


#  MAIN DRIVE & BOOT
# 'refresh_conf_vars_and_values' from qqX ver 1.5 will source the quickemu .conf file 
#  everytime a different VM is selected or the .conf file is reconfigured
#  Quickemu uses vars:  'disk_img' for  main .qcow2  &  either a bootable 'iso=' or 'img=' for first time or Live boots
#  Error handling for this function is also actioned by 'show_main_menu_header' 

function read_main_drive_and_img_iso_conf_vars {

  MainDrive=
  IsoImg=

  [[ $disk_img ]] && [[ ! -d  "$(dirname "$disk_img")" ]] && function_conf_error  folder  "disk_img:  $(dirname "$disk_img")"
  [[ $img ]] && [[ ! -d  "$(dirname "$img")" ]] && function_conf_error  folder  "img:  $(dirname "$img")"
  [[ $iso ]] && [[ ! -d  "$(dirname "$iso")" ]] && function_conf_error  folder  "iso:  $(dirname "$iso")" 

  [[ -e "$disk_img" ]] && MainDrive="$disk_img"
  [[ -e "$img" ]] && IsoImg="$img"
  [[ -e "$iso" ]] && IsoImg="$iso"

}  


function_conf_error () {

  ErrorMenuSelect=
  NewSetupFlag=

  # clear any accidental initial double pressing of the enter key occuring while experiencing the error
  read -r -t 0.1  
  read -r -t 0.1  
  read -r -t 0.1  
  read -r -t 0.1	
  read -r -t 0.1  
  read -r -t 0.1 	

  if [[ $NewFileTuneUp_JustDone ]]; then NewFileTuneUp_JustDone= ; return ; fi

  printf "\n\n  qqX Settings, VM folder & conf file(s)"  

  if [[ $1 ]] ; then 
    printf "\n\n  Check %s settings, location & content ... "  "$1"
  else 
    printf "\n\n  Check the settings and re-run this script ... " 
  fi

 [[ $GeneralLoopCheck ]] && echo
  dev_loop_check

  printf "\n\n  Settings file:  %s \n\n" "$qqX_SettingsFile"
  
  if [[ "$1" == *'COMMAND'* ]]; then 
  
    printColor "\n\n  [q] to quit "
    printf "  [enter] to view/edit settings file \n\n"

  elif [[ $1 == "new" ]]; then 

    printColor "\n  Starting NEW VIRTUAL MACHINE: \n\n"    #  REVIEW   
    cat "$VM_Conf_File"
    NewSetupFlag=1
    IgnoreFolderCheck=1
    SelectArrayError=  

    printf "\n\n\n  [enter]  edit the .conf file   [tune] run the config tune-up wizard "
    printColor "\n\n  [c] continue  (with current settings) looks okay "
    printf "\\n\n  [e] to edit qqX general settings   [q] to quit \n\n"  
    
  elif [[ $1 == "folder" ]] ; then 

    FolderConfigFlag=1
    printf "\n  Folder config ERROR:"
    [[ $2 ]] && printf "  '%s'"  "$2"
    printf "\n\n  Check the folder path with the file manager. Check for spellings. Check upper/lower case."
    printf "\n\n  Esp. check for spaces that may have been true-typed into semi-invisibility ... "
    printColor "\n\n\n  [enter] to edit the .conf file   [e]  edit qqX general settings " 
    printf "\n\n  [q] to quit \n\n"   

  elif [[ $1 == "qqX_SettingsFile" ]] ; then 

    printf "\n  INTERNAL ERROR: "
    printColor "\n\n\n  Settings file not found: %s"  "$qqX_SettingsFile"
    printf "\n\n  [q] to quit \n\n"   
    
  else   

    # includes "$1" = "config"
    printColor "\n\n  [Enter] to edit qqX general settings"  
    [[ "$1" == *'No VMs'* ]] && printColor "  [gt] quickget a new distro "
    printColor "  [q] to quit \n\n"  

  fi   

  read -rp "  >  "   ErrorMenuSelect
  

  if [[ $ErrorMenuSelect == "q" ]]; then  printf "\n\n"; command exit 

  elif [[ $ErrorMenuSelect == "tune" ]]; then  function_config_tune_up  "$VM_Conf_File" 

  elif [[ $ErrorMenuSelect == "c" ]] || [[ $ErrorMenuSelect == "e" ]] || [[ $ErrorMenuSelect == "gt" ]]; then  
  
    IgnoreFolderCheck=1

    if [[ $ErrorMenuSelect == "c" ]]; then  SelectArrayError= ; IgnoreSecondCheckNew=1 ; return

    elif [[ $ErrorMenuSelect == "e" ]]; then 

      if [[ $NewSetupFlag || $FolderConfigFlag ]]; then VM_InstanceName= ; qqX_edit_settings ; else qqX_edit_settings  "conf" ; fi

    elif [[ $ErrorMenuSelect == "gt" ]]; then 

      VM_Selection=
      function_quick_get_wrap 
      return

    fi
 
  else  
  
    if [[ $NewSetupFlag || $FolderConfigFlag ]]; then 

      NewSetupFlag=
      FolderConfigFlag=
      qqX_edit_settings  "conf" 
      
    else  qqX_edit_settings
    
    fi
    
  fi

}

texteditor_not_found_message () {
  
  printColor "\n\n  Unable to open settings with editor: '%s' "  "$TextEditor"
  printf "\n\n  Default or basic text editors will be tried or have been tried ..."
  printf "\n\n  Give settings file the command name of a preferred editor."
  printf "\n\n  Settings location:  %s  \n\n  [enter] to continue \n\n"  "$qqX_SettingsFile"
  read -rp "  >  "
}

qqX_edit_settings() {

  [[ $TextEditor ]] && [[ ! $(type -p "$TextEditor") ]] && texteditor_not_found_message && TextEditor=

  if [[ ! $TextEditor ]]; then
  
    DefaultTextEditor="$(xdg-mime query default text/plain)"
    EditorTest="${DefaultTextEditor/.desktop/}"
    EditorTest="$(tr -cd "[:alnum:]" <<< "$EditorTest")"

    # orggnomeTextEditor etc will fail
    [[ $EditorTest == "orggnomeTextEditor" ]] && EditorTest="gnome-text-editor"

    if [[ $DefaultTextEditor ]] && [[ $(type -p "$EditorTest") ]] ; then  TextEditor="$EditorTest"
    elif [[ $(type -p gedit) ]] ; then  TextEditor="gedit"
    elif [[ $(type -p gnome-text-editor) ]] ; then  TextEditor="gnome-text-editor"
    elif [[ $(type -p pluma) ]] ; then  TextEditor="pluma"
    elif [[ $(type -p kate) ]] ; then   TextEditor="kate"
    elif [[ $(type -p nano) ]] ; then   TextEditor="nano"
    fi

  fi

  if [[ ! $(type -p "$TextEditor") ]]; then texteditor_not_found_message
  
  else

    # Run the editor: 

    if [[ $1 == "conf" ]]; then

      printf "\n\n"
      cat "$VM_Conf_Dir/$VM_Conf_File"

      while true ; do

        printColor "\n\n  [enter] to edit   [r] config reminder notes   [b] go back"
        printf "\n\n"
        read -rp "  >  "   ConfEdit_Select

        if [[ $ConfEdit_Select == "r" ]] ; then    custom_conf_notes

        elif [[ $ConfEdit_Select == "b" ]] ; then  break

        else

          cp "$VM_Conf_File" "$VM_InstanceName/${VM_Conf_File}.edit.old.txt"
          (nohup &> /dev/null  "$TextEditor" "$VM_Conf_Dir/$VM_Conf_File") || texteditor_not_found_message
          ConfSettingsAdjusted=1
          refresh_conf_vars_and_values
          break

        fi

      done
      
    elif [[ $1 == "custom" ]]; then

      (nohup &> /dev/null   "$TextEditor" "$QemuArgsCustomFile"  & )  || texteditor_not_found_message

    elif [[ $1 == "tune-up" ]]; then

      (nohup &> /dev/null   "$TextEditor" "$TuneUpTargetDraft" )  || texteditor_not_found_message
      ConfSettingsAdjusted=1
      refresh_conf_vars_and_values

    else 

      (nohup &> /dev/null   "$TextEditor" "$qqX_SettingsFile" )  || texteditor_not_found_message

      if [[ $DefaultFolderError ]]; then 
        printColor "\n\n  A qqX restart is required ...."
        printf "\n\n  [enter] to close \n\n"
        read -rp "  >  "
        exit directly
      else
        SettingsFileAdjusted=1
        refresh_sources_and_load_VM_arrays
      fi

    fi

    # Note, app opening commands can throw a complaint if 'xapps' has not not been installed.
    # https://askubuntu.com/questions/1396739/failed-to-load-module-xapp-gtk3-module

    # NB  don't set to run the editor in the background, as the web browser does, as qqX needs to take the new settings 

  fi

}

function refresh_conf_vars_and_values {

  # All existing .CONF VARS MUST BE CLEARED before sourcing a new conf file 
  # otherwise any items specified in any previous config, but not in the new one, will remain.
  # Needed from qqX ver 1.5 onwards

  # A blank clearance will have been created at first session start.  

  source "$ConfClearanceLog"

  if [[ -e $VM_Conf_File ]]; then

    SecondDrive=
    SharedDrive=
    DriveLocationError=
    SharedDrive_Conf=
    SecondDriveArgs=
    SharedDriveArgs=
    MacLegacyDrive=
    QemuError_VM_Filter=()

    [[ $GeneralLoopCheck ]] && printf "\n\n Conf refresh 1:" &&  dev_loop_check

    source "$VM_Conf_File"

    # clear & re-populate the ConfClearanceLog with current fields, for the next occasion

    printf "#%s/%s" "$VM_Conf_Dir" "$VM_InstanceName"  > "$ConfClearanceLog"

    mapfile -t ConfClearance_Arr < "$VM_Conf_File"

    for Line in "${ConfClearance_Arr[@]}"; do

      if [[ $Line ]] && [[ "$Line" == *'='* ]]; then

        if [[ "$Line" == *'QemuError_VM_Filter'* ]]; then Line='QemuError_VM_Filter=()'

        else

          Line="$(cut -d'=' -f1 <<< "$Line")"
          Line="$Line""="
          [[ "$Line" == '#'* ]] && Line="${Line/'#'/}"

        fi
        
        printf "\n\n%s" "$Line" >> "$ConfClearanceLog"

        # Note that commented out lines need including, in case the comment marker gets removed

      fi

    done

    # check any menu values that are based on the file .conf 

    [[ $GeneralLoopCheck ]] && printf "\n\n Conf refresh 2:" &&  dev_loop_check

    check_screen_percentage_and_output
    read_main_drive_and_img_iso_conf_vars
    set_drive_paths
    check_disk_is_okay

    [[ $GeneralLoopCheck ]] && printf "\n\n Conf refresh 3:" &&  dev_loop_check


  fi

}

