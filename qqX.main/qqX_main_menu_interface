#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154,SC2009 


## Check for Custom Main Menu 

if [[ -e "$Default_VM_Folder/qqX.custom/custom_main_menu" ]]; then 

  #  CAUTION  creating a custom main menu may put you out-of-sync with any qqX updates
  #  Changes here are different to VM selector styles which don't change the underlying code

  #  First stage work only. Expect further modularization, possibly with language options (?).

  source "$Default_VM_Folder/qqX.custom/custom_main_menu" 

else

  function main_menu_interface {

    printf  "\n"
    if [[ ! $VM_InstanceName ]]; then printColor  "  [vm]  reselect " ; else   printf  "  [vm]  SELECT " ; fi
    [[ $KVM_MSR_Error || $KVM_MSR_Warn ]] && [[ ! $ShowUtilsMenu ]] && printf  "  [m]  msrs help "

    # Default to off as can cause confusion when running certain distro installers as to which drive is being used.
    if [[ $LiveBoot ]] && [[ ! $SharedDrive_Mount ]]; then 
      SharedDrive_Conf="no-shared"
      set_drive_paths
    fi

    if [[ ! $ShowUtilsMenu ]]; then

      printf  "  [u]  show utils & technical"

      if [[ ! $LiveBoot ]]; then  # REVIEW show all?
        printf "   [bm]"
        if [[ $BootStyle == "fast" ]]; then printf " (fastboot)"
        else  printColor " (boot menu options active)"
        fi
      fi

    else

      printf "   [del] delete selected VM   [mv] move, rename or link"
      printColor  "    [u]   hide utils & technical"
      printColor "\n\n  ---------------------------------------------------------------------------- \n"
      printf   "\n  [tune] config tune-up wizard    [disk]  resize or repair existing drives" 
      printf "\n\n  [2c]  create [2d] delete a second virtual hard-drive   [3c] create [3m] "
      if [[ $SharedDriveArgs ]]; then printf "unmount"; else printf "mount"
      fi
      printf " shared drive (guest boot)"
      if [[ $Mounted_ISO ]]; then
        printf "\n\n  [iso] unmount iso from guest, boot from main drive"
      else
        printf "\n\n  [iso] mount iso to guest, allow boot or read from iso"
      fi
      if [[ ! $LiveBoot ]]; then
        if [[ $BootStyle == "fast" ]]; then printf "   [bm] show guest efi/bios boot menu"
        else printf "   [fb] use fast boot menu "
        fi
      fi

      printf "\n\n\n  [rtv] reset Tiano VMF Vars   [FS] Switch to FreeSpirit  [FB] FreeBird  [HB]  [Ech]  [Sys]  [Cust]  [Dev] "
      printf "\n\n  [hdw] add current config to this VM's Virtual Hardware Record    [m] msrs help"

      [[ -e "$HOME/.qqX/qqX_term.conf" ]] && printf "    [tmc] terminal config"

      if [[ -e "$QemuArgsCustomFile" ]]; then printf "\n\n  [cd]  delete the custom boot file "
      else printf "\n\n  [cc]  create a custom boot file "
      fi
      if [[ $VerboseArgs ]]; then printf  "  [v] hide verbose boot"	
      else  printf  "  [v] show verbose boot"	
      fi
      printf  "   [xa]  view or edit extra qemu args  "

      [[ $ExtraArgs ]] && printf  "\n\n  Extra Args:  %s"  "$ExtraArgs"
      printColor "\n\n  ---------------------------------------------------------------------------- "

    fi
    printf  "\n\n  [sc]  create   [sd]  delete   [sa]  apply   [sl]  list   >  SNAPSHOTS "
    printf "\n"

    if [[ -e "$QemuArgsCustomFile" ]]; then 

      #QEMU_Default_SystemType= #QEMU_Default_MachineType=  in the general settings file BUT if not present then = 'qemu-system-x86_64'
      MenuCustomSystem="$(grep 'qemu-system' "$QemuArgsCustomFile" | grep -v '#' )"
      MenuCustomMachine="$(grep -m 1 -e '-machine' "$QemuArgsCustomFile" | grep -v '#' | cut -d ',' -f 1)"
      MenuCustomSystemBaseName="$(basename "$MenuCustomSystem")"
      MenuCustomSystemBaseName="$(tr -cd '[:graph:]' <<<"$MenuCustomSystemBaseName")"

      if [[ $QEMU_Default_SystemType == "$MenuCustomSystemBaseName" ]]; then ShowDefault_Hybrid=1 ; else ShowDefault_Hybrid= ; fi
     
      if [[ $ShowDefault_Hybrid ]] ; then ShowCustomBootStyle= ; else ShowCustomBootStyle=1 ; fi

      [[ $ForceCustomBootStyle == "hide" ]] && ShowCustomBootStyle=  && ShowDefault_Hybrid=1
      [[ $ForceCustomBootStyle == "show" ]] && ShowCustomBootStyle=1 && ShowDefault_Hybrid=

      [[ $PreferHybridCustomMenus ]] && [[ ! $ForceCustomBootStyle ]] && ShowDefault_Hybrid=1 && ShowCustomBootStyle=

    else

      #[[ $ShowCustomBootStyle || $ShowDefault_Hybrid ]] &&  printColor "\n\n  Warning:  Custom boot file removed or name has changed?  Re/Select [vm] to refresh \n"
      if [[ $ShowCustomBootStyle || $ShowDefault_Hybrid ]]; then   
        SettingsFileAdjusted=1
        refresh_sources_and_load_VM_arrays 
      fi

    fi

    print_kvm_status_warnings
    
    if [[ $ShowCustomBootStyle ]] ; then

      # NB  "$QemuArgsCustomFile" may exist BUT [c] $UseCustomBootArgs remains menu selectable
      printColor "\n\n  [c]  start VM using custom args with %s %s" "$MenuCustomSystem" "$MenuCustomMachine"
      printf "\n\n  [C]  toggle normal/custom menu  or  use normal:  [d] or [df] > sdl   [s] or [sf] > spice   [g] std gtk "
      printf "\n\n  [ce] edit custom args file    [qd] open Qemu docs in browser"

    else

      if [[ $ShowDefault_Hybrid ]]; then 
        printColor "\n\n  [c]   start VM using custom args" 
        printf "      [ce] edit custom args file    [qd] open Qemu docs in browser"
      fi

      printColor  "\n\n  [d]   start with SDL display"
      
      if [[ $guest_os == "windows" ]]; then  printColor "   (size as set in Windows)" 
      elif [[ $guest_os == "macos" ]] && [[ ! $QE_495_Script ]] && [[ ! $QE_496_Script ]]; then  printColor " (size determined by MacOS with this QE version)" 
      elif [[ "$SDL_ScreenSize_Cmd" == *screenpct* ]]; then printColor " (%s%%)    [df]  97%% "  "$SDL_ScreenPercent"  
      elif [[ "$SDL_ScreenSize_Cmd" == *width* ]] && [[ $guest_os == "macos" || $guest_os == "windows" ]]; then printColor " (%s) "  "$SDL_ScreenSize" 
      elif [[ "$SDL_ScreenSize_Cmd" == *width* ]]; then printColor " (%s)     [df]  97%% "  "$SDL_ScreenSize"  
      elif [[ $SDL_ScreenSize_Error ]]; then printf " (%s%% %s > see settings)"  "$SDL_ScreenPercent"  "$SDL_ScreenSize_Error"
      fi

      if [[ $HeadlessDisplay ]]; then printColor 	"\n\n  [s]   start with Spice display (HEADLESS) " 
      else  printColor 	"\n\n  [s]   start with Spice display (scaleable)   [sf]  spice full screen (shift F12 to exit)"  ; fi

      printColor "\n\n  [g]   start with GTK display          "

      if [[ $qqX_GL_Mode == "off" ]] ; then printColor "[gl] OFF > toggle-on"  
      else printColor "[gl] ON > toggle-off" ; fi   

      [[ -e "$QemuArgsCustomFile" ]] && printColor "     [C] toggle normal/custom menu "

    fi

    printf "\n"

    [[ $DriveLocationError ]] &&  printColor "\n\n  %s"  "$DriveLocationError"

    if [[ $ConfSettingsAdjusted || $SettingsFileAdjusted ]]; then 

      if [[ $SelectArrayError ]]; then printColor "\n\n  Settings Error = %s"  "$SelectArrayError" ; SelectArrayError=
      elif [[ $DefaultFolderError ]]; then printColor "\n\n  Settings Error = Default Folder NOT found" ; DefaultFolderError=
      elif [[ $ExtraFolderError ]]; then printColor "\n\n  Settings Error = %s  NOT found"  "$ExtraFolderError" ; ExtraFolderError=
      else printf "\n\n  Settings have been refreshed and reloaded ...." ; fi
      ConfSettingsAdjusted=
      SettingsFileAdjusted=

    fi

    if [[ -f "$VM_InstanceName/rtv.date.txt" ]]; then

      SyncDateNow="$(date +%s)"
      SyncDateOld="$(cat "$VM_InstanceName/rtv.date.txt" 2>/dev/null)"
      LastRtvUpd="$((SyncDateNow - SyncDateOld))"

      if [[ $RtvManualOnly ]]; then 

        if [[ "$VM_InstanceName" == *macos* ]]; then 
          [[ ! $RtvMacosRmdOff ]] && [[ $LastRtvUpd -gt 2592000 ]] && printColor "\n\n  [rtv]  run Tiano update - last run %d days ago"  "$((LastRtvUpd/86400))"
        elif [[ ! $RtvStdRmdOff ]] && [[ $LastRtvUpd -gt 10368000 ]]; then  
          printColor "\n\n  [rtv]  run Tiano update - last run %d days ago"  "$((LastRtvUpd/86400))"
        fi  
        
        #  Reminders @ older than 120 days std vars or 30 for mac as has binaries (in epoch seconds)  
        #  Auto-updates: do all at 30 days.  Status message for std vars probably OTT, not needed (?)   REVIEW 

      elif [[ $LastRtvUpd -gt 2592000 ]]; then

         if [[ "$VM_InstanceName" == *macos* ]]; then 

          printf "\n\n  Tiano Core Security Updates .....  "
          refresh_tiano_vars &
          wait "$!" 
          RtvMacGet="$(cat "$VM_Conf_Dir/$VM_InstanceName/rtv.status.log" 2>/dev/null)"
          [[ $RtvMacGet == "Okay" ]] && printf "All Good"
          [[ $RtvMacGet == "Fail" ]] && printColor "\n\n  Failed to update. See rtv logs in the VM folder ...."

        else  refresh_tiano_vars &

        fi 

      fi

    else  date +%s > "$VM_Conf_Dir/$VM_InstanceName/rtv.date.txt"
        
    fi

    dev_loop_check 

    if [[ "$VM_InstanceName" == *macos* && "$VM_InstanceName" == *sonoma* ]]; then
     if ! grep -q -s 'ventura|sonoma' "$QE_SourcePath" ; then printColor "\n\n  Warning: This version of QuickEmu will not run MacOS Sonoma ..." ; fi
    fi

    # use du with -L on instance menus as are individual totals only and some instances can be symbolically linked
    
    InstanceQcow2_Sizes="$(du -a -L -t 100M "$VM_InstanceName" | grep qcow2 | awk '{print $1}' 2>/dev/null)"

    if [[ $InstanceQcow2_Sizes ]]; then  
      InstanceQcow2_SizesCount="$(grep -Ec ^'[1-9]' <<< "$InstanceQcow2_Sizes" 2>/dev/null)"
      InstanceQcow2_Sizes="$(paste -sd+  <<< "$InstanceQcow2_Sizes" | bc -l  2>/dev/null)"
      InstanceQcow2_Sizes="$(bc <<< "scale=1; $InstanceQcow2_Sizes/1000000")"
    else
      InstanceQcow2_Sizes="0"
      InstanceQcow2_SizesCount="0"
    fi
    
    InstanceISO_Sizes="$(du -a -L -t 100M "$VM_InstanceName" | grep -e 'iso' -e 'img' | awk '{print $1}' 2>/dev/null)"

    if [[ $InstanceISO_Sizes ]]; then  
      InstanceISO_SizesCount="$(grep -Ec ^'[1-9]' <<< "$InstanceISO_Sizes" 2>/dev/null)"
      InstanceISO_Sizes="$(paste -sd+  <<< "$InstanceISO_Sizes" | bc -l  2>/dev/null)"
      InstanceISO_Sizes="$(bc <<< "scale=1; $InstanceISO_Sizes/1000000")"
    else
      InstanceISO_Sizes="0"
      InstanceISO_SizesCount="0"
    fi

    printf  "\n\n  [gt]  quickget a new distro   [i]  VM drives info details   "
    printf "Disks: %s (%s)  "  "${InstanceQcow2_Sizes}G" "$InstanceQcow2_SizesCount" 
    printf "ISO's: %s (%s)  "  "${InstanceISO_Sizes}G" "$InstanceISO_SizesCount"

    printf  "\n\n"
    filter_and_flag_qemu_errors

    if [[ $QemuErrorAlert ]]; then 
      printColor "  [ql]  show qemu error log"
    elif [[ $FileManager ]]; then 
      if [[ $(type -p "$FileManager") ]]; then 
        printf "  [f] open VM folder"
        printf "   [qf] | [qqf] open qcow2"
        printf " in file manager"
      else  printColor "  [set]  ERROR file manager not found" 
      fi
    fi

    if [[ "$VM_InstanceName" == 'ubuntu'* ]] && [[ "$VM_InstanceName" == *'daily'* || "$VM_InstanceName" == "ubuntustudio-dvd" ]]; then 
    
      if [[ ! $(du -b -t 500000 "$VM_InstanceName/disk.qcow2" 2>/dev/null) ]] && [[ $(ls "$VM_InstanceName/"*devel.iso 2>/dev/null) ]] ; then

        #  Live VMs only, as zsync only updates the iso file.   
        #  Live VM qcow2 disks are normally only 196k. Test ceiling is set at 500k.  REVIEW if problems. eg meta preallocation

        if [[ -f "$VM_InstanceName/zsync.date.txt" ]]; then

          SyncDateNow="$(date +%s)"
          SyncDateOld="$(cat "$VM_InstanceName/zsync.date.txt" 2>/dev/null)"
          LastZsync="$((SyncDateNow - SyncDateOld))"

          printf "\n\n"
          if [[ $LastZsync -gt 21600 ]]; then  printColor "  [z]   daily-live zsync check - last run %d hrs ago"  "$((LastZsync/3600))"
          else  printf "  [z]   daily-live zsync check - last run %d hrs ago"  "$((LastZsync/3600))"
          fi  #  older than 6hrs (in epoch seconds)

        else  date +%s > "$VM_InstanceName/zsync.date.txt"
            
        fi

        ##  ZSYNC   See  functions 'get_ubuntu' & 'list_csv' in quickget  

          # qqX: NB only the iso gets dubbed with 'devel' suffix, otherwise VMs they keep their names 
          # eg  'ubuntu-mate-daily-live' 'ubuntustudio-dvd' 'ubuntu-daily-canary'

          # An actual 'ubuntu-devel' release or folder doesn't seem to ever get created or offered.
          # Presume release=devel (@2023/07) has now been superseded, or was merely intended as an indicative name only ...
          
          # Also note that quickget includes code to remove 'zs.old' files, which may or may not have been needed,
          # but Zsync can now give these files root protection so this removal may not work ...   REVIEW  Add a qqX copying mechanism? 


        # Sort out the quickget / function_quick_get_wrap  call & the var/flags   
        # Expect these to need updating from time to time ...

        Zsync_OS_Name="$VM_InstanceName"

        Zsync_OS_Name="${Zsync_OS_Name/'-daily'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-live'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-canary'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-legacy'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-jammy'/}"
        Zsync_OS_Name="${Zsync_OS_Name/'-dvd'/}"

        Zsync_Release_Name="$VM_InstanceName"
        Zsync_Release_Name="${Zsync_Release_Name/"${Zsync_OS_Name}-"/}"
        #echo; echo "$Zsync_OS_Name  $Zsync_Release_Name" 

        Zsync_Updatable_ISO=1

        # zero main menu flag that sets only if updater run from main 
        MainMenuZsync=

      fi

    else 

      Zsync_Updatable_ISO=
      Zsync_OS_Name=
      Zsync_Release_Name=

    fi
    
    printf  "\n\n  [set] open settings file in text editor  [tx] translate settings in browser  [conf] view or edit .conf file"
    printf  "\n\n"

    if [[ $qqX_UpdaterPID ]] && [[ $( ps -p "$qqX_UpdaterPID" --no-headers 2>/dev/null) ]]; then
      source "$qqX_Upd_VarsTmpFile" ; qqX_UpdaterPID= 
    fi

    if [[ $DiskChkStatus ]] && [[ $DiskChkStatus != "Okay" ]]; then  printColor "  DISK.QCOW2 ERROR  %s  \n\n  [disk] repair utils "  "$DiskChkStatus"
    else  [[ $qqX_UpdateAvail ]] &&  printColor "  [dl]  view new qqX update details: %s %s \n\n" "$qqX_LatestReleaseType" "$qqX_LatestRelease"
    fi

    if ps -ef | grep nbd | grep -qi "$VM_InstanceName" ; then 
      printf "\n\n  A mount conflict may exist ...  NBD drives may be viewed but must be disconnected before starting the VM \n\n"
    fi

    if  grep -q -s 'os_homepage' "$QG_SourcePath" &&  ! grep -q -s -e 'echo 33 34 35 36' "$QG_SourcePath" ; then 
        # 4.9.2 onwards seems to be okay  Also see quickget reroute ...
      if [[ $VM_InstanceName == "ubuntu-"[0-9]* ]]; then  DistroHomePage="https://ubuntu.com/"
      else
        # first listing, some may have two
        QGW_OS_Info="$(grep "${VM_InstanceName%%-*})" "$QG_SourcePath" | grep -m 1 'INFO=' | cut -d '=' -f 2)"
        QGW_OS_Info="${QGW_OS_Info//';;'/}"
        QGW_OS_Info="${QGW_OS_Info//'"'/}"

        QGW_OS_Info="$(tr '|' '\n' <<< "$QGW_OS_Info")"
        mapfile -t QGW_OS_Info_ARR <<< "$QGW_OS_Info"
        DistroHomePage="${QGW_OS_Info_ARR[2]}"
      fi
    else DistroHomePage=
    fi

    printf  "  [enter] refresh   "
    [[ $DistroHomePage ]] &&  printf "[w] distro homepage  "
    printf " [h] show help & info  [q] quit \n\n"

    path_diagnostics
    [[ ! $MainMenuChoice ]] &&  read -rp "  >  "  MainMenuChoice

  }

fi
