#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

#   Licence  GPL3   https://www.gnu.org/licenses 

##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:

# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 


## VM selector style default

Default_VM_SelectorStyle="A"

[[ ! $VM_SelectorStyle ]]  &&  VM_SelectorStyle="$Default_VM_SelectorStyle"


function_create_VM_folderList() {

  DefaultFolderError=
  ExtraFolderError=

  # Make sure that 'Default_VM_Folder' has a value and it exists
  [[ ! $Default_VM_Folder ]] && Default_VM_Folder="$CurrentFolder"
  if [[ ! -d "$Default_VM_Folder" ]]; then printf "\n\n  Settings ERROR:  Default Folder NOT found \n\n" ; sleep 2 ; DefaultFolderError=1 ; fi
  
  # set and clear the folder array, current first but don't scan twice, and dont add if the folder is empty (from right click on non-conf files)

  if [[ "$CurrentFolder" != "$Default_VM_Folder" ]] && [[ "$(ls "$CurrentFolder/"*.conf 2> /dev/null)" ]] ; then   
    declare -ga VM_Folder_List=( "$CurrentFolder" "$Default_VM_Folder" )
  else  declare -ga VM_Folder_List=("$Default_VM_Folder")
  fi

  for xF in "${Extra_VM_Folder[@]}"; do

    [[ $xF ]] && VM_Folder_List+=("$xF")

    [[ $xF ]] &&  [[ ! -d "$xF" ]] && ExtraFolderError="$xF"

  done

}

# Run the function & populate the list: 
function_create_VM_folderList

# Record any set ExtraArgs in case of need to reset
ExtraSetArgs="$ExtraArgs"

#  Add default values, if none supplied
[[ ! $P_Kill_WaitSecs ]] && P_Kill_WaitSecs="6"
P_Kill_WaitSecs_PreSet="$P_Kill_WaitSecs"

# Set up any quickemu variables needed for .conf file analysis
disk_img=
img=
iso=


function find_file_manager_browser()  {

  ## Check if a default File Manager and a default Web Browser are set or are available, or if suppressed

  if [[ $FileManager == "no" ]]; then FileManager=

  else

    [[ $FileManager ]] && [[ ! $(type -p "$FileManager") ]] && FileManager=

    if [[ ! $FileManager ]] ; then

      if [[ $(type -p caja) ]]; then  FileManager="caja"
      elif [[ $(type -p nautilus) ]]; then  FileManager="nautilus"
      elif [[ $(type -p dolphin) ]]; then  FileManager="dolphin"
      elif [[ $(type -p pcmanfm) ]]; then  FileManager="pcmanfm"
      elif [[ $(xdg-mime query default inode/directory) ]]; then  FileManager="xdg-open"
      else FileManager=
      fi

    fi

  fi

  if [[ $WebBrowser == "no" ]]; then WebBrowser=

  else

    [[ $WebBrowser ]] && [[ ! $(type -p "$WebBrowser") ]] && WebBrowser=

    if [[ ! $WebBrowser ]]; then

      WebBrowser="$(xdg-settings get default-web-browser)"

      if [[ $WebBrowser ]]; then

        WebBrowser="${WebBrowser/'.desktop'/}"

        if [[ "$WebBrowser" == *'firefox'* ]]; then WebBrowser="firefox"
        elif [[ $(type -p 'google-chrome') ]]; then  WebBrowser="google-chrome"
        elif [[ $(type -p falkon) ]]; then  WebBrowser="falkon"
        elif [[ $(xdg-settings get default-web-browser) ]]; then WebBrowser="xdg-open"
        else WebBrowser=
        fi

      fi

    fi

  fi

}

# NB Also needs calling if re-loading the settings file  See refresh_sources_and_load_VM_arrays
find_file_manager_browser


# Check custom QE & QG, plus set the 'quickget' version  and set PATH for standard ancilliaries

QE_FilePathDefault="$(type -p quickemu)"
QG_FilePathDefault="$(type -p quickget)"

function sort_qqX_builtin_settings () {

  if [[ $QE_Version == "System" || $QE_Version == "system" ]]; then 
    QE_Version=
  elif [[ ! $QE_Version ]] || [[ $QE_Version == "FreeBird" || $QE_Version == "Freebird" || $QE_Version == "freebird" ]] || [[ "$QE_Version" == *'freebird'* ]]; then
    FreePath="$qqX_BuiltinsFolder/freebird"
    QE_Version="$FreePath/quickemu"
    [[ "$PATH" != *'qqX.builtins'* ]] && export PATH="${FreePath}:${PATH}"
  elif [[ $QE_Version == "FreeSpirit" || $QE_Version == "Freespirit" || $QE_Version == "freespirit" ]] || [[ "$QE_Version" == *'freespirit'* ]]; then
    FreePath="$qqX_BuiltinsFolder/freespirit"
    QE_Version="$FreePath/quickemu"
    [[ "$PATH" != *'qqX.builtins'* ]] && export PATH="${FreePath}:${PATH}"
  elif [[ $QE_Version == "HomeBird" || $QE_Version == "Homebird" || $QE_Version == "homebird" ]] || [[ "$QE_Version" == *'homebird'* ]]; then
    FreePath="$qqX_BuiltinsFolder/homebird"
    QE_Version="$FreePath/quickemu"
    [[ "$PATH" != *'qqX.builtins'* ]] && export PATH="${FreePath}:${PATH}"
  elif [[ $QE_Version == "Custom" || $QE_Version == "custom" ]] || [[ "$QE_Version" == *'QE.Custom'* ]]; then
    FreePath="$Default_VM_Folder/qqX.custom/QE.Custom"
    QE_Version="$FreePath/quickemu"
    [[ "$PATH" != *'QE.Custom'* ]] && export PATH="${FreePath}:${PATH}"
  fi

  if [[ $QG_Version == "System" || $QG_Version == "system" ]]; then
    QG_Version=
  elif [[ ! $QG_Version ]] || [[ $QG_Version == "FreeBird" || $QG_Version == "Freebird" || $QG_Version == "freebird" ]] || [[ "$QE_Version" == *'freebird'* ]]; then
    FreePath="$qqX_BuiltinsFolder/freebird"
    QG_Version="$FreePath/quickget"
    [[ "$PATH" != *'qqX.builtins'* ]] && export PATH="${FreePath}:${PATH}"
  elif [[ $QG_Version == "FreeSpirit" || $QG_Version == "Freespirit" || $QG_Version == "freespirit" ]] || [[ "$QE_Version" == *'freespirit'* ]]; then
    FreePath="$qqX_BuiltinsFolder/freespirit"
    QG_Version="$FreePath/quickget"
    [[ "$PATH" != *'qqX.builtins'* ]] && export PATH="${FreePath}:${PATH}"
  elif [[ $QG_Version == "HomeBird" || $QG_Version == "Homebird" || $QG_Version == "homebird" ]] || [[ "$QG_Version" == *'homebird'* ]]; then
    FreePath="$qqX_BuiltinsFolder/homebird"
    QG_Version="$FreePath/quickget"
    [[ "$PATH" != *'qqX.builtins'* ]] && export PATH="${FreePath}:${PATH}"
  elif [[ $QG_Version == "Custom" || $QG_Version == "custom" ]] || [[ "$QG_Version" == *'QE.Custom'* ]]; then
    FreePath="$Default_VM_Folder/qqX.custom/QE.Custom"
    QG_Version="$FreePath/quickget"
    [[ "$PATH" != *'QE.Custom'* ]] && export PATH="${FreePath}:${PATH}"
  fi
}

sort_qqX_builtin_settings

if [[ $QE_Version ]] && [[ ! -e "$QE_Version" ]]; then 
  printf "\n\n  ERROR - quickemu not found \n\n  Re-check Installation &/or Installation instructions" 
  printf "\n\n  Settings File: %s \n\n" "$qqX_SettingsFile"  ; sleep 10 
fi        
if [[ $QG_Version ]] && [[ ! -e "$QG_Version" ]]; then 
  printf "\n\n  ERROR - quickget not found \n\n  Re-check Installation &/or Installation instructions"
  printf "\n\n  Settings File: %s \n\n" "$qqX_SettingsFile"  ; sleep 10 
fi       


## Analyse qqX Current Version  (Latest version is carried out in the updater function)

IFS='.' read -ra qqX_CurrentVer_Arr <<< "$qqX_Version"

# qqX_CurrentVer_Arr[0] remains unpadded  (& to the left of the decimal point)

[[ ${#qqX_CurrentVer_Arr[1]} -lt 2 ]] && printf -v qqX_CurrentVer_Arr[1] "%.2d" "${qqX_CurrentVer_Arr[1]}"
[[ ${#qqX_CurrentVer_Arr[2]} -lt 2 ]] && printf -v qqX_CurrentVer_Arr[2] "%.2d" "${qqX_CurrentVer_Arr[2]}"

#legacy 3dp pre "0.09.00.017"
[[ ${#qqX_CurrentVer_Arr[3]} -gt 2 ]] && qqX_CurrentVer_Arr[3]="${qqX_CurrentVer_Arr[3]:(-2)}"
[[ ${#qqX_CurrentVer_Arr[3]} -lt 2 ]] && printf -v qqX_CurrentVer_Arr[3] "%.2d" "${qqX_CurrentVer_Arr[3]}"

qqX_CurrentVer_Float="${qqX_CurrentVer_Arr[0]}.${qqX_CurrentVer_Arr[1]}${qqX_CurrentVer_Arr[2]}${qqX_CurrentVer_Arr[3]}"

if [[ "${qqX_CurrentVer_Arr[3]}" ]] && [[ "${qqX_CurrentVer_Arr[2]}" == "00" ]]; then  qqX_CurrentReleaseType="beta"
else qqX_CurrentReleaseType="release"
fi

# Check for Qemu & set up some of quickemu's variables, the upper case ones. (Adaption of the quickemu scripting)
# Sets defaults, if not given in main settings. But also for later, so systems can be swapped out.

[[ ! $QEMU_Default_SystemType ]] &&  QEMU_Default_SystemType="qemu-system-x86_64"
[[ ! $QEMU_Default_MachineType ]] &&  QEMU_Default_MachineType="q35"

QEMU="$(type -p "$QEMU_Default_SystemType")"
QEMU_IMG="$(type -p qemu-img)"

function qemu_version_check {

  if [[ ! $QEMU ]] || [[ ! $QEMU_IMG ]]; then

    printColor "\n\n QEMU not found. Check installations of qemu and qemu-img"
    printf "\n\n If using the quickemu packaging this should normally have been installed.\n\n"
    sleep 1
    return

  fi

  QEMU_VER_LONG=$( "$QEMU" -version | head -n1 | cut -d' ' -f4 | cut -d'(' -f1 )
  QEMU_VER_SHORT="${QEMU_VER_LONG//./}"
  QEMU_VER_SHORT="${QEMU_VER_SHORT:0:2}"

  if [[ $QemuShortVerOveride ]]; then  QEMU_VER_SHORT="61"

  elif [[ $QEMU_VER_SHORT -lt 60 ]]; then

    printf "\n\n QEMU 6.0.0 or newer is required. Current version is: %s"  "$QEMU_VER_LONG"
    printf "\n\n Use overide in main settings to handle future errors from changes to Qemu numbering format\n\n"
    sleep 1

  fi

}

qemu_version_check


