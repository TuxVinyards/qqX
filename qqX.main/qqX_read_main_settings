#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

#   Licence  GPL3   https://www.gnu.org/licenses 

##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:

# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 


## VM selector style default

Default_VM_SelectorStyle="E"

[[ ! $VM_SelectorStyle ]]  &&  VM_SelectorStyle="$Default_VM_SelectorStyle"


function_create_VM_folderList() {

  DefaultFolderError=
  ExtraFolderError=

  # Make sure that 'Default_VM_Folder' has a value and it exists

  [[ ! $Default_VM_Folder ]] && Default_VM_Folder="$CurrentFolder"

  if [[ ! -d "$Default_VM_Folder" ]]; then printf "\n\n  Settings ERROR:  Default Folder NOT found \n\n" ; sleep 2 ; DefaultFolderError=1 ; fi

  
  # set and clear the folder array, current first but don't scan twice, and dont add if the folder is empty (from right click on non-conf files)

  if [[ "$CurrentFolder" != "$Default_VM_Folder" ]] && [[ "$(ls "$CurrentFolder/"*.conf 2> /dev/null)" ]] ; then   
  
    declare -ga VM_Folder_List=( "$CurrentFolder" "$Default_VM_Folder" )

  else  declare -ga VM_Folder_List=("$Default_VM_Folder")

  fi

  for xF in "${Extra_VM_Folder[@]}"; do

    [[ $xF ]] && VM_Folder_List+=("$xF")

    if [[ $xF ]] &&  [[ ! -d "$xF" ]] ; then 

      # if .conf targeted start, then no need to print this, 
      # unless re-selecting, in which case the error flag will create a later highlight.
    
      if [[ ! $Conf_TriggerFolder ]]; then  printf "\n\n  Settings ERROR:\n\n  Extra Folder %s NOT found \n\n"  "$xF" ; sleep 2 ; fi

      ExtraFolderError="$xF"

    fi

  done

  #  declare -p VM_Folder_List ; echo

}

# Run the function & populate the list: 
function_create_VM_folderList

# Record any set ExtraArgs in case of need to reset
ExtraSetArgs="$ExtraArgs"

#  Add default values, if none supplied
[[ ! $P_Kill_WaitSecs ]] && P_Kill_WaitSecs="6"
P_Kill_WaitSecs_PreSet="$P_Kill_WaitSecs"

# Set up any quickemu variables needed for .conf file analysis
disk_img=
img=
iso=


function find_xdgopen_settings()  {

  ## Check if a default File Manager and a default Web Browser are set or are available, or if suppressed

  if [[ $FileManager == "no" ]]; then FileManager=

  else

    [[ $FileManager ]] && [[ ! $(type -p "$FileManager") ]] && FileManager=

    if [[ ! $FileManager ]] ; then

      if [[ $(xdg-mime query default inode/directory) ]] ; then  FileManager="xdg-open"
      elif [[ $(type -p caja) ]] ; then  FileManager="caja"
      elif [[ $(type -p nautilus) ]] ; then  FileManager="nautilus"
      elif [[ $(type -p dolphin) ]] ; then  FileManager="dolphin"
      elif [[ $(type -p pcmanfm) ]] ; then  FileManager="pcmanfm"
      else FileManager=

      fi

    fi
  fi

  if [[ $WebBrowser == "no" ]]; then WebBrowser=

  else

    [[ $WebBrowser ]] && [[ ! $(type -p "$WebBrowser") ]] && WebBrowser=

    if [[ ! $WebBrowser ]]; then

      if [[ $(xdg-settings get default-web-browser) ]]; then WebBrowser="xdg-open"
      elif [[ $(type -p firefox) ]] ; then  WebBrowser="firefox"
      elif [[ $(type -p 'google-chrome') ]] ; then  WebBrowser="google-chrome"
      elif [[ $(type -p falkon) ]] ; then  WebBrowser="falkon"
      else WebBrowser=

      fi

    fi

  fi

  printf "\n Handles the output that tells us how firefox etc has handled mixing of gtk2 and gtk3 etc .... \n\n"  > "/tmp/qqX_nohup.txt"

}

# Also needs calling if re-loading the settings file  See refresh_sources_and_load_VM_arrays
find_xdgopen_settings


# Check custom QE & QG, plus set the 'quickget' version

[[ $QE_Version ]] && [[ ! -e "$QE_Version" ]] &&  printf "\n\n  ERROR  custom quickemu not found \n\n  Re-check Installation &/or Installation instructions \n\n"  && sleep 10         
[[ $QG_Version ]] && [[ ! -e "$QG_Version" ]] &&  printf "\n\n  ERROR  custom quickget not found \n\n  Re-check Installation &/or Installation instructions \n\n"   && sleep 10         

QE_FilePathDefault="$(type -p quickemu)"
QG_FilePathDefault="$(type -p quickget)"



## Analyse qqX Current Version  (Latest version is carried out in the updater function)

IFS='.' read -ra qqX_CurrentVer_Arr <<< "$ModVersion"

# qqX_CurrentVer_Arr[0] remains unpadded  (& to the left of the decimal point)

[[ ${#qqX_CurrentVer_Arr[1]} -lt 2 ]] && printf -v qqX_CurrentVer_Arr[1] "%.2d" "${qqX_CurrentVer_Arr[1]}"

[[ ${#qqX_CurrentVer_Arr[2]} -lt 2 ]] && printf -v qqX_CurrentVer_Arr[2] "%.2d" "${qqX_CurrentVer_Arr[2]}"

#legacy 3dp pre "0.09.00.017"

[[ ${#qqX_CurrentVer_Arr[3]} -gt 2 ]] && qqX_CurrentVer_Arr[3]="${qqX_CurrentVer_Arr[3]:(-2)}"

[[ ${#qqX_CurrentVer_Arr[3]} -lt 2 ]] && printf -v qqX_CurrentVer_Arr[3] "%.2d" "${qqX_CurrentVer_Arr[3]}"

qqX_CurrentVer_Float="${qqX_CurrentVer_Arr[0]}.${qqX_CurrentVer_Arr[1]}${qqX_CurrentVer_Arr[2]}${qqX_CurrentVer_Arr[3]}"

if [[ "${qqX_CurrentVer_Arr[3]}" ]] && [[ "${qqX_CurrentVer_Arr[2]}" == "00" ]]; then 

  qqX_CurrentReleaseType="beta"

else qqX_CurrentReleaseType="release"

fi


# Check for Qemu & set up some of quickemu's variables, the upper case ones. (Adaption of the quickemu scripting)

# Sets defaults, if not given in main settings. But also for later, so systems can be swapped out.

[[ ! $QEMU_Default_SystemType ]] &&  QEMU_Default_SystemType="qemu-system-x86_64"

[[ ! $QEMU_Default_MachineType ]] &&  QEMU_Default_MachineType="q35"

QEMU="$(type -p "$QEMU_Default_SystemType")"

QEMU_IMG="$(type -p qemu-img)"
   

function qemu_version_check {

  if [[ ! $QEMU ]] || [[ ! $QEMU_IMG ]]; then

    printColor "\n\n QEMU not found. Check installations of qemu and qemu-img"
    printf "\n\n If using the quickemu packaging this should normally have been installed.\n\n"
    sleep 1
    return

  fi

  QEMU_VER_LONG=$( "$QEMU" -version | head -n1 | cut -d' ' -f4 | cut -d'(' -f1 )

  QEMU_VER_SHORT="${QEMU_VER_LONG//./}"

  QEMU_VER_SHORT="${QEMU_VER_SHORT:0:2}"

  if [[ $QemuShortVerOveride ]]; then  QEMU_VER_SHORT="61"

  elif [[ $QEMU_VER_SHORT -lt 60 ]]; then

    printf "\n\n QEMU 6.0.0 or newer is required. Current version is: %s"  "$QEMU_VER_LONG"
    printf "\n\n Use overide in main settings to handle future errors from changes to Qemu numbering format\n\n"
    sleep 1

  fi

}

qemu_version_check


