#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/qqxproject
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:
#   Licence  GPL3   https://www.gnu.org/licenses
##  qqX - quickemu quickget X terminal project

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154

## VM selector style
Default_VM_SelectorStyle="A"
[[ ! $VM_SelectorStyle ]]  &&  VM_SelectorStyle="$Default_VM_SelectorStyle"

function_create_VM_folderList() {

  DefaultFolderError=
  ExtraFolderError=

  # Make sure that 'Default_VM_Folder' has a value and it exists
  [[ ! $Default_VM_Folder ]] && Default_VM_Folder="$Current_VM_Folder"
  if [[ ! -d "$Default_VM_Folder" ]]; then printf "\n\n  Settings:  Default Folder NOT found \n\n" ; sleep 1 ; DefaultFolderError=1 ; fi

  # set and clear the folder array, current first but don't scan twice, and dont add if the folder is empty (from right click on non-conf files)
  if [[ "$Current_VM_Folder" != "$Default_VM_Folder" ]] && [[ "$(ls "$Current_VM_Folder/"*.conf 2> /dev/null)" ]] ; then
    declare -ga VM_Folder_List=( "$Current_VM_Folder" "$Default_VM_Folder" )
  else  declare -ga VM_Folder_List=("$Default_VM_Folder")
  fi
  for xF in "${Extra_VM_Folder[@]}"; do
    ExtraExists="$(realpath -eq "/$xF")"
    if [[ $ExtraExists ]] ; then VM_Folder_List+=("$xF")
    else
      ExtraFolderError="$xF Path ERROR or Folder Not Yet Created"
      VM_Folder_List+=("PATH ERROR: $xF")
    fi
  done
}

# Run the function & populate the list:
function_create_VM_folderList

# Record any set ExtraArgs in case of need to reset
ExtraSetArgs="$ExtraArgs"

#  Add default values, if none supplied
[[ ! $P_Kill_WaitSecs ]] && P_Kill_WaitSecs="4"
P_Kill_WaitSecs_PreSet="$P_Kill_WaitSecs"

# Set up any quickemu variables needed for .conf file analysis
disk_img=
img=
iso=


function find_file_manager_browser()  {

  # Check if a default File Manager and a default Web Browser are set or are available, or if suppressed

  if [[ $FileManager == "no" ]]; then FileManager=
  else
    [[ $FileManager ]] && [[ ! $(type -p "$FileManager") ]] && FileManager=
    if [[ ! $FileManager ]] ; then
      if [[ $(type -p caja) ]]; then  FileManager="caja"
      elif [[ $(type -p nautilus) ]]; then  FileManager="nautilus"
      elif [[ $(type -p dolphin) ]]; then  FileManager="dolphin"
      elif [[ $(type -p thunar) ]]; then  FileManager="thunar"
      elif [[ $(type -p pcmanfm) ]]; then  FileManager="pcmanfm"
      elif [[ $(xdg-mime query default inode/directory 2>/dev/null) ]]; then  FileManager="xdg-open"
      else FileManager=
      fi
    fi
  fi
  if [[ $WebBrowser == "no" ]]; then WebBrowser=
  else
    [[ $WebBrowser ]] && [[ ! $(type -p "$WebBrowser") ]] && WebBrowser=
    if [[ ! $WebBrowser ]]; then
      WebBrowser="$(xdg-settings get default-web-browser 2>/dev/null)"
      if [[ $WebBrowser ]]; then XDG_Web=1 ; else XDG_Web=
      fi
      WebBrowser="${WebBrowser/'.desktop'/}"
      if [[ "$WebBrowser" == *'firefox'* ]]; then WebBrowser="firefox"
      elif [[ "$WebBrowser" == *'falkon'* ]]; then WebBrowser="falkon"
      elif [[ $(type -p 'google-chrome') ]]; then  WebBrowser="google-chrome"
      elif [[ $(type -p falkon) ]]; then  WebBrowser="falkon"
      elif [[ $(type -p midori) ]]; then  WebBrowser="midori"
      elif [[ $XDG_Web ]]; then WebBrowser="xdg-open"
      else WebBrowser=
      fi
    fi
  fi
}

find_texteditor () {

  [[ $TextEditor ]] && [[ ! $(type -p "$TextEditor") ]] && texteditor_not_found_message && TextEditor=
  if [[ ! $TextEditor ]]; then
    if [[ $(type -p gedit) ]] ; then  TextEditor="gedit"
    elif [[ $(type -p gnome-text-editor) ]] ; then  TextEditor="gnome-text-editor"
    elif [[ $(type -p pluma) ]] ; then  TextEditor="pluma"
    elif [[ $(type -p kate) ]] ; then   TextEditor="kate"
    elif [[ $(type -p mousepad) ]] ; then   TextEditor="mousepad"
    elif [[ $(type -p leafpad) ]] ; then   TextEditor="leafpad"
    elif [[ $(type -p okular) ]] ; then   TextEditor="okular"
    else
      # mime test is not always reliable > REVIEW
      DefaultTextEditor="$(xdg-mime query default text/plain 2>/dev/null)"
      EditorTest="${DefaultTextEditor/.desktop/}"
      EditorTest="$(tr -cd "[:alnum:]" <<< "$EditorTest")"
      # orggnomeTextEditor etc will fail
      [[ $EditorTest == "orggnomeTextEditor" ]] && EditorTest="gnome-text-editor"
      [[ $DefaultTextEditor ]] && [[ $(type -p "$EditorTest") ]] && TextEditor="$EditorTest"
    fi
  fi
}

# NB Also needs calling if re-loading the settings file  See refresh_sources_and_load_VM_arrays
find_file_manager_browser
find_texteditor

## PATHS

# Set the original initial value of paths as found on start up. Check Once.
OriginalPATH="$PATH"
QE_SystemFilePath="$(type -p quickemu)"
QG_SystemFilePath="$(type -p quickget)"

if [[ ! $QE_DevPath && $DevStart ]]; then QE_DevPath="$(realpath "./qqX.builtins/freespirit")" ; fi

function sort_qqX_builtin_settings {

  # Check custom QE & QG, plus set the 'quickget' version  and set PATH for standard ancilliaries
  # Also standardize 'QE_SourceVersion' spelling so the version can be referenced if needed later

  [[ $Loop_Diagnostics ]] && printf "\n\n Sort builtins 1 :" &&  main_loop_diagnostics

  QE_SourcePath= ; QG_SourcePath= ; FreePath=

  if [[ $CodingHotSwap ]]; then QE_SourceVersion="$CodingHotSwap" ; fi
  [[ ! $QE_SourceVersion ]] && QE_SourceVersion="freebird"

  # simplfy checks and standardization, make all lower case, for now
  QE_SourceVersion="${QE_SourceVersion,,}"

  if [[ $QE_SourceVersion == "custom" ]] && [[ ! -d "$Default_VM_Folder/qqX.custom/QE.Custom" ]]; then
    printf "\n\n  ERROR - Custom Folder not found \n\n  Re-check Installation &/or Installation instructions"
    printf "\n\n  Settings File: %s \n\n" "$qqX_SettingsFile"  ; sleep 4
  fi

  if [[ $QE_SourceVersion == "dev" ]] && [[ ! -d "$QE_DevPath" ]]; then
    printf "\n\n  ERROR - Dev Folder not found \n\n  Re-check Installation &/or Installation instructions"
    printf "\n\n  Settings File: %s \n\n" "$qqX_SettingsFile"  ; sleep 4
  fi

  if [[ $QE_SourceVersion == "system" ]]; then
    if [[ $QE_SystemFilePath && $QG_SystemFilePath ]]; then
      QE_SourceVersion="System"
      QE_SourcePath="$QE_SystemFilePath"
      QG_SourcePath="$QG_SystemFilePath"
    else
      QE_SourceVersion="Missing System Files"
      QE_SourcePath= ; QG_SourcePath= ; FreePath=
    fi
  fi

  if [[ $QE_SourceVersion != "System" ]]; then

    if [[ $QE_SourceVersion == "freebird" ]]; then
      QE_SourceVersion="FreeBird"
      FreePath="$qqX_BuiltinsFolder/freebird"
    elif [[ $QE_SourceVersion == "freespirit" ]]; then
      QE_SourceVersion="FreeSpirit"
      FreePath="$qqX_BuiltinsFolder/freespirit"
    elif [[ $QE_SourceVersion == "homebird" ]]; then
      QE_SourceVersion="HomeBird"
      FreePath="$qqX_BuiltinsFolder/homebird"
    elif [[ $QE_SourceVersion == "echo" ]]; then
      QE_SourceVersion="Echo"
      FreePath="$qqX_BuiltinsFolder/echo"
    elif [[ $QE_SourceVersion == "custom" ]]; then
      QE_SourceVersion="Custom"
      FreePath="$Default_VM_Folder/qqX.custom/QE.Custom"
      if [[ ! -e "$FreePath" ]]; then FreePath="$qqX_BuiltinsFolder/freebird" ; fi
    elif [[ $QE_SourceVersion == "dev" ]]; then
      QE_SourceVersion="Dev"
      FreePath="$QE_DevPath"
      if [[ ! -e "$FreePath" ]]; then
        QE_SourceVersion="FreeSpirit"
        FreePath="$qqX_BuiltinsFolder/freespirit"
        printf "\n\n  Dev path  '%s'  Not Found   >>  Using FreeSpirit \n\n"  "$QE_DevPath"
        sleep 2 ; read -r -t 0.1 ; read -r -t 0.1 ; read -r -t 0.1 ; read -r -t 0.1
      fi
    else
      printf "\n\n  Source Setting  '%s'  Not Recognised   >>  Using FreeBird \n\n"  "$QE_SourceVersion"
      sleep 3 ; read -r -t 0.1 ; read -r -t 0.1 ; read -r -t 0.1 ; read -r -t 0.1
      QE_SourceVersion="FreeBird"
      FreePath="$qqX_BuiltinsFolder/freebird"
    fi

    QE_SourcePath="$FreePath/quickemu"
    QG_SourcePath="$FreePath/quickget"
    if [[ -e "$FreePath/qqX_quickget_mods" ]]; then QG_Modpath="$FreePath/qqX_quickget_mods"
    else QG_Modpath= ; fi
  fi

  if [[ $FreePath ]]; then
    export PATH="${FreePath}:${qqX_LibraryFolder}:${OriginalPATH}"
  else
    export PATH="${qqX_LibraryFolder}:${OriginalPATH}"
  fi

  QE_VerNumber=
  QG_VerNumber=

  if [[ $QE_SourcePath ]] && [[ ! -e "$QE_SourcePath" ]]; then
    printf "\n\n  ERROR - quickemu not found \n\n  Re-check Installation &/or Installation instructions"
    printf "\n\n  Settings File: %s \n\n" "$qqX_SettingsFile"  ; sleep 10
  fi
  if [[ $QG_SourcePath ]] && [[ ! -e "$QG_SourcePath" ]]; then
    printf "\n\n  ERROR - quickget not found \n\n  Re-check Installation &/or Installation instructions"
    printf "\n\n  Settings File: %s \n\n" "$qqX_SettingsFile"  ; sleep 10
  fi

  [[ $Loop_Diagnostics ]] && printf "\n\n Sort builtins 2 :" &&  main_loop_diagnostics

}

sort_qqX_builtin_settings

function find_quick_version_numbers {

  # To be run only after rerouting functions for quickemu & quickget are in place & code has been sourced.
  # But place early as emu and get may load initially out of sequence ...

  # And if rerunning after a settings change, to be run after 'find_quickemu_source_functions_and_vars'
  # has been, so that the right QE & QG versions have been established and loaded.
  # See function 'refresh_and_load_quickemu_sources'

  # QuickEMU also uses an internal variable '$VERSION' but this only works after the correct script has been sourced.
  # But use grep to avoid bad original source $QEMU_VER_SHORT routines throwing errors
  QE_VerNumber="$(grep -s 'VERSION=' "$QE_SourcePath" | cut -d'"' -f2)"

  # QuickGET as @ ver 4.9.2 'official-vanilla' actually makes a call to EMU to find the number.
  # But the 'quickget' call goes to a qqX capture function of the same name,
  # and allows re-routes to custom versions that may work differently.
  if [[ $QE_SourceVersion == "System" || $QE_SourceVersion == "Echo" ]]; then QG_VerNumber="$QE_VerNumber"
  else QG_VerNumber="$("$QG_SourcePath" --version 2>/dev/null)"
  fi

  # Release Quickemu 4.9.2 was still numbered 4.9.1
  # Use the changes to fedora releases 'echo 38 39' as a fixing flag:
  if grep -q -s 'echo 38 39' "$QG_SourcePath" ; then
    [[ $QG_VerNumber == "4.9.1" ]] && QG_VerNumber="4.9.2"
    [[ $QE_VerNumber == "4.9.1" ]] && QE_VerNumber="4.9.2"
  fi

  if [[ ! $QE_VerNumber ]] || [[ ! $QG_VerNumber ]]; then
    printColor "\n\n  ERROR finding QuickEmu/Quickget Source Path or running Source Checks"
    printf "\n\n  If you have just re/installed and are running an initial start up, "
    printf "\n\n  this may be due to your Linux distro being cautious about new scripts."
    printf "\n\n\n  A close down and a standard restart of qqX should probably solve things ...."
    printf "\n\n  [enter]  to close \n\n"
    read -rp "  >  "
    exit directly
  fi
}

find_quick_version_numbers


## Analyse qqX Current Version  (Latest version is carried out in the updater function)

# Beta version notation changes @ 24/11 with intro of 'floatversion' and improved sorting abilities
# Suffixes more closely follow 'semantic versioning' x.x.xx-suffix > major.minor.point and with optional as -beta.01 etc
# but minor numbers remain padded to 2dp

if [[ $qqX_Version == *[[:alpha:]]* ]] ; then  qqX_Current_ReleaseType="beta"
else qqX_Current_ReleaseType="release"
fi

## Check for Qemu & set up some of quickemu's variables, the upper case ones. (Adaption of the quickemu scripting)
# Sets defaults, if not given in main settings. But also for later, so systems can be swapped out.

[[ ! $QEMU_Default_SystemType ]] &&  QEMU_Default_SystemType="qemu-system-x86_64"
[[ ! $QEMU_Default_MachineType ]] &&  QEMU_Default_MachineType="q35"

QEMU="$(type -p "$QEMU_Default_SystemType")"
QEMU_IMG="$(type -p qemu-img)"


function qemu_version_check {

  if [[ ! $QEMU ]] || [[ ! $QEMU_IMG ]]; then
    printColor "\n\n QEMU not found. Check installations of qemu and qemu-img ..."
    printf "\n\n If using the quickemu packaging this should normally have been installed."
    printf "\n\n  [enter] to continue and edit settings if current installation is okay. \n\n"
    read -rp "  >  "
  fi

  # Takes first two elements of version and combines into single integer
  # eg 8.1.0 becomes 81 and  10.2.1 becomes 102
  QEMU_VER_LONG="$("$QEMU" -version | head -n1 | cut -d' ' -f4 | cut -d'(' -f1 )"
  QEMU_VER_SHORT=$(cut -d '.' -f 1-2 <<< "$QEMU_VER_LONG")
  QEMU_VER_SHORT="${QEMU_VER_SHORT//./}"

  # Test as much as possible for error caused by change of version text or version format and/or resultant empty value.
  # Quickemu refuses to work in the case of values -lt 61 but moves to different routines in the cases of 70 and 81
  # No past versions of Qemu have ever exceeded a minor value of 2 so future cases of minor versions > 9 are only hypothetical
  # eg where 10.14.1 becomes 1014

  if [[ ! $QEMU_VER_LONG ]] || [[ "$QEMU_VER_LONG" == *[[:alpha:]]* ]]; then qvFail=1
  elif [[ ! $QEMU_VER_SHORT ]] || [[ "$QEMU_VER_SHORT" == *[[:alpha:]]* ]]; then qvFail=1
  elif [[ $QEMU_VER_SHORT -lt 61 ]]; then qvFail=1
  fi

  if [[ $QemuShortVerOveride ]]; then  QEMU_VER_SHORT="123456"
  elif [[ $qvFail ]]; then
    printf "\n\n  %s" "$("$QEMU" -version | head -n 1)"
    printf "\n\n  QEMU version 8.1.0 or newer is normally required for all functions to work."
    printf "\n\n  while QEMU version 6.1.0 is baseline for GL functions."
    printf "\n\n  Use 'QemuShortVerOveride' in MAIN SETTINGS to adjust errors and change warnings"
    printf "\n\n  [enter] to continue and edit settings if current version is okay. \n\n"
    read -rp "  >  "
  fi
}

qemu_version_check

path_diagnostics  pause

# How the Tiano BIOS/UEFI loads up:

function store_boot_style_defaults {
  [[ ! $BootStyle ]] && BootStyle="fast"
  [[ ! $BootStyleMsg ]] && BootStyleMsg="slow"
  BootStyle_Default="$BootStyle"
  BootStyleMsg_Default="$BootStyleMsg"
}

function reload_boot_style_defaults {
  BootStyle="$BootStyle_Default"
  BootStyleMsg="$BootStyleMsg_Default"
}

function clear_boot_style_vars {
  BootStyle= ; BootStyle_Default=
  BootStyleMsg= ; BootStyleMsg_Default=
}

store_boot_style_defaults

