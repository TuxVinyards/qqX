#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses  


# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 


##  qqX - quickemu quickget X terminal project   

#  This script is based on ffX - the ff(mpeg) X-terminal project - AV processing scripts for ffmpeg   
#  Also copyright (c)  Alex Genovese   https://github.com/TuxVinyards   https://github.com/theffxproject

#  Updated 2024/04 to work with changes to fedora 40 and github

#  Make sure shell is set during session to decimal separator of dot 
#  If LC_ALL=C changes too much, just set the numeric.  
#  This may upset some input/output filters ....    CAUTION   (see notes in the main settings) 

#  See locale setting discussion:  https://unix.stackexchange.com/a/149129 
#  Also  https://unix.stackexchange.com/questions/62316/why-is-there-no-euro-english-locale?rq=1
#  &   http://www.unicode.org/L2/L2001/01102-POSIX15897.htm   


## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154  



# As check_for_qqX_updates runs in the background, the variables need transfering to the foreground

qqX_LatestRelease=
qqX_Latest_Secure_TarBall=
qqX_Latest_Secure_TarSha=
qqX_UpdateAvail=
qqX_Upd_VarsTmpFile="/tmp/qqX.upd.chk.txt"

echo > "$qqX_Upd_VarsTmpFile"


check_for_qqX_updates() {

  # Quietly do a check for new releases 
  curl -sLf -m 10 -o "/tmp/latest-qqX"  "https://api.github.com/repos/TuxVinyards/qqX/releases/latest" 
  [[ -e "/tmp/latest-qqX" ]] && qqX_LatestRelease="$(floatversion -M "$(grep -si 'tag_name' "/tmp/latest-qqX")" 2>/dev/null)"

  if [[ $qqX_LatestRelease ]]; then

    # find tarball > eg. "https://github.com/TuxVinyards/qqX/releases/download/$qqX_LatestRelease/qqX-$qqX_LatestRelease.tar.gz"
    if [[ "$(tr '"' '\n' < "/tmp/latest-qqX" | grep -s http | grep -sc download)" == "2" ]] ; then
      qqX_Latest_Secure_TarBall="$(tr '"' '\n' < "/tmp/latest-qqX" | grep -s http | grep -s -m 1 download)"
      qqX_Latest_Secure_TarSha="${qqX_Latest_Secure_TarBall}.sha256"
    fi

    # Versioning, normally as x.xx.xx-suffix > major.minor.point and with optional suffix as -beta.01 etc
    # Loosely following 'semantic versioning' but non-major non-zero numbers padded to 2dp to make easier reading in file managers

    # Changes @ 24/11 with intro of 'floatversion' from system of:  beta as x.x.0.2dp > major.minor.0.dev-point.
    # Where a single 0 in the third register indicates beta and 'x' = any whole number. The last register always as 2dp.
    # The 4th register may also be used for dev-point or micro point branching for small tweaks and small fixes
    #
    # To clarify and expand eg for Version 1.10 - 1.10.0.01 would be beta 1 and 1.10.0.02 beta 2 etc,
    # then first release would be 1.10.01 with 1.10.01.02 as a second issue with a few tweaks,
    # or 1.10.02 as the next point release, with possibly a new small feature or two.

    # Flag up release type.
    # Current Version is carried out at the start, in similar way
    if [[ $qqX_LatestRelease == *[[:alpha:]]* ]] ; then  qqX_LatestReleaseType="beta"
    else qqX_LatestReleaseType="release"
    fi

    #  If current ver is beta OR if beta notifications are requested in the general settings:
    [[ $qqX_CurrentReleaseType == "beta" ]] && Hide_qqX_BetaUpdates=

    #  Also flag up about beta notifications if transitioning from beta to release:
    [[ $qqX_CurrentReleaseType == "beta" ]] && [[ $qqX_LatestReleaseType == "release" ]] && BetaTxReleasePoint=1

    # Set up TRANSFER FILE for all needed variables,  as check runs in background ...  NB 

    if [[ ! $Hide_qqX_BetaUpdates && $qqX_LatestReleaseType == "beta" ]] || [[ $qqX_LatestReleaseType == "release" ]]; then
      if  floatversion --gt "$qqX_LatestRelease  $qqX_Version" 2>/dev/null ; then
        { printf "\n\n qqX_UpdateAvail=\"1\""   
          printf "\n\n qqX_LatestRelease=\"%s\""  "$qqX_LatestRelease" 
          printf "\n\n qqX_Latest_Secure_TarBall=\"%s\""  "$qqX_Latest_Secure_TarBall" 
          printf "\n\n qqX_Latest_Secure_TarSha=\"%s\""  "$qqX_Latest_Secure_TarSha" 
          printf "\n\n qqX_LatestReleaseType=\"%s\""  "$qqX_LatestReleaseType" 
        } >> "$qqX_Upd_VarsTmpFile"
      else  printf "\n\n qqX_UpdateAvail="   > "$qqX_Upd_VarsTmpFile"
      fi
    fi

  fi 

}

# Runs in the background. qqX will run this once. 
function find_latest_qemu_version {
  printf "" > "/tmp/latest-qemu.txt"
  { floatversion -M "$(curl -sLf --max-time 5 "https://github.com/qemu/qemu/tags" | grep -s 'Link--primary')" 2>/dev/null; } > "/tmp/latest-qemu.txt"
}


function download_new_release {

    printf "\033c \n\n"
    qqX_logo_printf_title  "qqX updater"
    printf "\n\n\n  https://github.com/TuxVinyards/qqX/releases/latest" 

    if [[ ! $qqX_Latest_Secure_TarBall ]] ; then printColor "\n\n  ERROR  No latest release found.  Reload & retry ..."
    else 
      printf "\n\n  %s \n"  "$qqX_Latest_Secure_TarBall"
      AboutRelease="$(tr ',' '\n' < "/tmp/latest-qqX" | grep -sA 12 'body')"
      AboutRelease="$(tr -cd '[:print:]' <<< "$AboutRelease")"
      AboutRelease="$(cut -d ':' -f2 <<< "$AboutRelease")"
      AboutRelease="${AboutRelease//\"/}"
      AboutRelease="${AboutRelease//'### '/}"
      AboutRelease="${AboutRelease//'## '/}"
      AboutRelease="${AboutRelease//'\n'/}"
      AboutRelease="${AboutRelease//'\r'/}"
      AboutRelease="${AboutRelease//'}'/}"
      IFS='-' read -ra AboutReleaseArray <<< "$AboutRelease"
      for Line in "${AboutReleaseArray[@]}" ; do  if [[ "$Line" != *'+1'* ]] ; then printColor "\n\n * %s"  "$Line" ; fi ; done
      # as long as there are no trailing colons or spaces in release list, prints a tidied up bullet-point summary
    fi

    printf "\n\n\n"
    while true ; do
      printf "  Neatly download the release into its own sub-folder at: "
      [[ $Specified_Updates_Location ]] && printf "\n\n  [s] Specified folder  %s"  "$Specified_Updates_Location"
      [[ -d "$HOME/Downloads" ]] && printf "\n\n  [d] Downloads folder  %s"  "$HOME/Downloads"

      if [[ $(pwd) == "$Default_VM_Folder" ]]; then 
        printColor "\n\n  [enter] Current/Default folder  %s "  "$Default_VM_Folder" 
      else  
        printf "\n\n  [c] Current folder    %s "  "$(pwd)"  
        printColor "\n\n  [enter] Default VM folder  %s"  "$Default_VM_Folder"
      fi 

      printf "\n\n"
      [[ $WebBrowser ]] && printf "  [w] popup qqX web pages with browser" 
      printf "   or [b] to go back \n\n"
      read -rp "  >  "  qqX_LatestTarBall_Folder
      printf "\n\n"

      if [[ $qqX_LatestTarBall_Folder == "s" ]]; then  qqX_LatestTarBall_Folder="$Specified_Updates_Location" ; break
      elif [[ $qqX_LatestTarBall_Folder == "d" ]]; then  qqX_LatestTarBall_Folder="$HOME/Downloads" ; break
      elif [[ $qqX_LatestTarBall_Folder == "c" ]]; then  qqX_LatestTarBall_Folder="$(pwd)" ; break
      elif [[ $qqX_LatestTarBall_Folder == "w" ]]; then  
        nohup &> /dev/null  "$WebBrowser"  "https://github.com/TuxVinyards/qqX"  & 
      elif [[ $qqX_LatestTarBall_Folder == "b" ]]; then  qqX_LatestTarBall_Folder= ; qqX_NoReleaseDL=1 ; break
      else qqX_LatestTarBall_Folder="$Default_VM_Folder" ; break
      fi

    done

    if [[ $qqX_NoReleaseDL ]]; then  qqX_NoReleaseDL=

    else

      # each release to its own folder makes things tidier
      qqX_LatestTarBall_Folder="$qqX_LatestTarBall_Folder/qqX.releases/$qqX_LatestRelease"
      mkdir -p "$qqX_LatestTarBall_Folder"

      # record where to come back to, when done
      ReturnFolder="$(pwd)"

      cd "$qqX_LatestTarBall_Folder"  || printColor "\n\n  ERROR  making or changing to qqX.releases folder ??"

      if [[ $qqX_Latest_Secure_TarBall ]]; then
        eval curl -L -m 10 -o "$qqX_LatestTarBall_Folder/qqX-${qqX_LatestRelease}.tar.gz"  "$qqX_Latest_Secure_TarBall"
        echo
        eval curl -L -m 10 -o "$qqX_LatestTarBall_Folder/qqX-${qqX_LatestRelease}.tar.gz.sha256"  "$qqX_Latest_Secure_TarSha"
        SHA_Check="$(sha256sum -c "$qqX_LatestTarBall_Folder/qqX-${qqX_LatestRelease}.tar.gz.sha256")"
        printColor "\n  SHA256 Check: %s "  "$SHA_Check"
        [[ "$SHA_Check" != *'OK' ]] &&  printf "\n\n  ERROR  - RETRY  DOWNLOAD \n\n"
      else  eval curl -L -m 10 -o "$qqX_LatestTarBall_Folder/qqX-${qqX_LatestRelease}.tar.gz" "$qqX_Latest_Secure_TarBall"
      fi

      printColor "\n\n  Files downloaded to %s"  "$qqX_LatestTarBall_Folder"

      if [[ $BetaTxReleasePoint ]]; then 
        printf "\n\n\n  Transitioning from beta to release ...  If required,"
        printf "\n\n  Beta Notifications can be turned off in the general settings file \n"
      fi

      printf "\n\n  Use the installer script to quickly refresh and add new features to your settings file."
      printf "\n\n  All option settings, locations and preferences will be kept."
      printf "\n\n\n  [enter] to run the installer script   [r] to return to main menu \n\n"
      read -rp "  >  "  qqX_UpdateExit

      if [[ $qqX_UpdateExit != "r" ]]; then 
        # https://stackoverflow.com/questions/651018/opening-a-tar-gz-file-with-a-single-command
        tar xvfz "$qqX_LatestTarBall_Folder/qqX-${qqX_LatestRelease}.tar.gz" 
        sleep 0.5
        # start the SYSTEM installer (use the posix installer for initial or manual installs)
        exec  bash -c "$qqX_LatestTarBall_Folder/qqX.system/qqX_system_install  Upgrade" 
      fi

      sleep 0.6
      cd "$ReturnFolder"  || printColor "\n\n  ERROR  returning from qqX.releases folder"

    fi
}


