#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses  


# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 


##  qqX - quickemu quickget X terminal project   

#  This script is based on ffX - the ff(mpeg) X-terminal project - AV processing scripts for ffmpeg   
#  Also copyright (c)  Alex Genovese   https://github.com/TuxVinyards   https://github.com/theffxproject

#  Updated 2024/04 to work with changes to fedora 40 and github

#  Make sure shell is set during session to decimal separator of dot 
#  If LC_ALL=C changes too much, just set the numeric.  
#  This may upset some input/output filters ....    CAUTION   (see notes in the main settings) 

#  See locale setting discussion:  https://unix.stackexchange.com/a/149129 
#  Also  https://unix.stackexchange.com/questions/62316/why-is-there-no-euro-english-locale?rq=1
#  &   http://www.unicode.org/L2/L2001/01102-POSIX15897.htm   


## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154  


# 'check_for_qqX_updates' runs once only, at qqX start-up in the background, 
#  and a transfer file is used to move the variables to the foreground

# clear foreground vars:
qqX_Latest_ReleaseNumber=
qqX_Latest_SecureTarBall_Addr=
qqX_Latest_SecureTarSha_Addr=
qqX_UpdateAvail=
qqX_Upd_VarsTmpFile="/tmp/qqX.upd.chk.txt"
printf "\n\n qqX_UpdateAvail="  > "$qqX_Upd_VarsTmpFile"

check_for_qqX_updates() {

  # Quietly do a check for new releases and return required vars if update available
  # API method first, general release page second ... (?)
  # only fv --full detects beta releases 

  curl --disable -sLf -m 10 -o "/tmp/latest-qqX"  "https://api.github.com/repos/TuxVinyards/qqX/releases/latest"
  sleep 0.5
  if [[ -e "/tmp/latest-qqX" ]]; then
    if [[ $Hide_qqX_BetaUpdates ]]; then qqX_Latest_ReleaseNumber="$(fv -M  "$(grep -si 'tag_name' "/tmp/latest-qqX")" 2>/dev/null)"
    else qqX_Latest_ReleaseNumber="$(fv --full -M  "$(grep -si 'tag_name' "/tmp/latest-qqX")" 2>/dev/null)"
    fi
  fi

  if [[ $qqX_Latest_ReleaseNumber ]]; then
    # make sure that GitHub is listing a tarball download address
    # eg. "https://github.com/TuxVinyards/qqX/releases/download/$qqX_Latest_ReleaseNumber/qqX-$qqX_Latest_ReleaseNumber.tar.gz"
    if [[ "$(tr '"' '\n' < "/tmp/latest-qqX" | grep -s http | grep -sc download)" == "2" ]] ; then
      qqX_Latest_SecureTarBall_Addr="$(tr '"' '\n' < "/tmp/latest-qqX" | grep -s http | grep -s -m 1 download)"
      qqX_Latest_SecureTarSha_Addr="${qqX_Latest_SecureTarBall_Addr}.sha256"
    fi
  else
    # function 'download_new_release' will react to whether 'qqX_Latest_SecureTarBall_Addr' is available
    if [[ $Hide_qqX_BetaUpdates ]]; then 
      qqX_Latest_ReleaseNumber="$(curl -sf https://github.com/TuxVinyards/qqX/tags | grep 's/tag' | fv -M )"
    else qqX_Latest_ReleaseNumber="$(curl -sf https://github.com/TuxVinyards/qqX/tags | grep 's/tag' | fv -M --full)"
    fi
  fi

  if [[ $qqX_Latest_ReleaseNumber ]]; then
    # --gt check where eg "1.12.02-beta1 1.12.01" is true
    if  floatversion --gt "$qqX_Latest_ReleaseNumber  $qqX_Version" 2>/dev/null ; then
      # Versioning, normally as x.x.xx-suffix > major.minor.point and with optional suffix as -beta1 etc
      # Flag up release type. Current Version is carried out at the start, in similar way
      if [[ $qqX_Latest_ReleaseNumber == *[[:alpha:]]* ]] ; then  qqX_Latest_ReleaseType="beta"
      else qqX_Latest_ReleaseType="release"
      fi
      #  If currently using beta:
      if [[ $qqX_Current_ReleaseType == "beta" ]]; then 
        Hide_qqX_BetaUpdates=
        # flag up about beta notifications if transitioning from beta to release:
        [[ $qqX_Latest_ReleaseType == "release" ]] && BetaTxReleasePoint=1
      fi
      # Using TRANSFER FILE for all needed variables,  as check runs in background ...  NB 
      { printf "\n\n qqX_UpdateAvail=\"1\""   
        printf "\n\n qqX_Latest_ReleaseNumber=\"%s\""  "$qqX_Latest_ReleaseNumber" 
        printf "\n\n qqX_Latest_SecureTarBall_Addr=\"%s\""  "$qqX_Latest_SecureTarBall_Addr" 
        printf "\n\n qqX_Latest_SecureTarSha_Addr=\"%s\""  "$qqX_Latest_SecureTarSha_Addr" 
        printf "\n\n qqX_Latest_ReleaseType=\"%s\""  "$qqX_Latest_ReleaseType" 
      } > "$qqX_Upd_VarsTmpFile"
    fi
  fi 
}

# Runs in the background. qqX will run this once. 
function find_latest_qemu_version {
  printf "" > "/tmp/latest-qemu.txt"
  { floatversion --full -M "$(curl --disable -sLf --retry 4 --retry-max-time 2 --retry-delay 0 --max-time 8 "https://github.com/qemu/qemu/tags" | grep -s 'Link--primary')" 2>/dev/null; } > "/tmp/latest-qemu.txt"
}


function download_new_release {

    printf "\033c \n\n"
    qqX_logo_printf_title  "qqX updater"
    printf "\n\n\n  https://github.com/TuxVinyards/qqX/releases/latest" 

    if [[ ! $qqX_UpdateAvail ]] ; then 
      printColor "\n\n  ERROR  No latest release found.  Return & retry ..."
    else 
      if [[ ! $qqX_Latest_SecureTarBall_Addr ]]; then
        printf "\n\n  Only Non-SHA checked download available (?)\n"
      else 
        printf "\n\n  %s \n"  "$qqX_Latest_SecureTarBall_Addr"
        AboutRelease="$(tr ',' '\n' < "/tmp/latest-qqX" | grep -sA 12 'body')"
        AboutRelease="$(tr -cd '[:print:]' <<< "$AboutRelease")"
        AboutRelease="$(cut -d ':' -f2 <<< "$AboutRelease")"
        AboutRelease="${AboutRelease//\"/}"
        AboutRelease="${AboutRelease//'### '/}"
        AboutRelease="${AboutRelease//'## '/}"
        AboutRelease="${AboutRelease//'\n'/}"
        AboutRelease="${AboutRelease//'\r'/}"
        AboutRelease="${AboutRelease//'}'/}"
        IFS='-' read -ra AboutReleaseArray <<< "$AboutRelease"
        for Line in "${AboutReleaseArray[@]}" ; do  if [[ "$Line" != *'+1'* ]] ; then printColor "\n\n * %s"  "$Line" ; fi ; done
        # as long as there are no trailing colons or spaces in release list, prints a tidied up bullet-point summary
      fi
    fi

    printf "\n\n\n"
    while true ; do
      if [[ $qqX_UpdateAvail ]]; then
        printf "  Neatly download the release into its own sub-folder at: "
        [[ $Specified_Updates_Location ]] && printf "\n\n  [s] Specified folder:  %s"  "$Specified_Updates_Location"
        [[ -d "$HOME/Downloads" ]] && printf "\n\n  [d] Downloads folder:  %s"  "$HOME/Downloads"

        if [[ $(pwd) == "$Default_VM_Folder" ]]; then 
          printColor "\n\n  [enter] Current/Default folder:"
          printf "  %s "  "$Default_VM_Folder" 
        else
          # not to confuse with '$Current_VM_Folder' 
          printf "\n\n  [c] Current folder:    %s "  "$(pwd)"  
          printColor "\n\n  [enter] Default VM folder:"
          printf "  %s"  "$Default_VM_Folder"
        fi 
        printf "\n\n"
      fi
      [[ $WebBrowser ]] && printf "  [w] popup qqX web pages with browser" 
      printf "   or [b] to go back \n\n"
      read -rp "  >  "  qqX_LatestTarBall_Folder
      printf "\n\n"

      if [[ $qqX_LatestTarBall_Folder == "s" ]]; then  qqX_LatestTarBall_Folder="$Specified_Updates_Location" ; break
      elif [[ $qqX_LatestTarBall_Folder == "d" ]]; then  qqX_LatestTarBall_Folder="$HOME/Downloads" ; break
      elif [[ $qqX_LatestTarBall_Folder == "c" ]]; then  qqX_LatestTarBall_Folder="$(pwd)" ; break
      elif [[ $qqX_LatestTarBall_Folder == "w" ]]; then
        printf "  Opening Browser ... \n\n"
        (nohup &> /dev/null  "$WebBrowser"  "https://github.com/TuxVinyards/qqX" & ) || web_browser_not_found_message
        sleep 1
      elif [[ $qqX_LatestTarBall_Folder == "b" ]]; then  qqX_LatestTarBall_Folder= ; qqX_NoReleaseDL=1 ; break
      else qqX_LatestTarBall_Folder="$Default_VM_Folder" ; break
      fi
    done

    if [[ $qqX_NoReleaseDL ]]; then  qqX_NoReleaseDL=
    else
      # each release to its own FOLDER makes things tidier
      qqX_LatestTarBall_Folder="$qqX_LatestTarBall_Folder/qqX.releases/$qqX_Latest_ReleaseNumber"
      # make sure each DOWNLOAD is clean
      [[ -d "$qqX_LatestTarBall_Folder" ]] && rm -r "$qqX_LatestTarBall_Folder" 2>/dev/null
      sleep 0.5; mkdir -p "$qqX_LatestTarBall_Folder" ; sleep 0.5
      # record where to come back to, when done and not to confuse with '$Current_VM_Folder' 
      ReturnFolder="$(pwd)"
      # MOVE to download folder and keep things contained
      cd "$qqX_LatestTarBall_Folder"  || printColor "\n\n  ERROR  making or changing to qqX.releases folder ??"

      if [[ $(pwd) != "$qqX_LatestTarBall_Folder" ]]; then
        # if we are not in the right folder, we need to exit 
        printf "\n\n  [enter] to return \n\n"
        read -rp "  >  "
      else
        if [[ $qqX_Latest_SecureTarBall_Addr ]]; then
          dlCount="1"
          while [[ $dlCount -le "3" ]]; do
            eval curl --disable -L -m 10 -o "$qqX_LatestTarBall_Folder/qqX-${qqX_Latest_ReleaseNumber}.tar.gz"  "$qqX_Latest_SecureTarBall_Addr"
            echo
            eval curl --disable -L -m 10 -o "$qqX_LatestTarBall_Folder/qqX-${qqX_Latest_ReleaseNumber}.tar.gz.sha256"  "$qqX_Latest_SecureTarSha_Addr"
            echo
            SHA_Check="$(sha256sum -c "$qqX_LatestTarBall_Folder/qqX-${qqX_Latest_ReleaseNumber}.tar.gz.sha256")"
            printColor "\n  SHA256 Check: %s "  "$SHA_Check"
            if [[ "$SHA_Check" != *'OK' ]]; then
              rm -r ./*  2>/dev/null
              printf "\n\n  ERROR  - RETRYING  DOWNLOAD \n\n"
            else printf "\n\n" ; break
            fi
            ((dlCount++))
          done
        fi
        if [[ ! -e "qqX-${qqX_Latest_ReleaseNumber}.tar.gz" ]]; then
          rm -r ./*  2>/dev/null
          printf "\n  Problem auto-downloading via Secure Tarball"
          printColor "\n\n  Using standard NON sha256-checked \n\n"
          dlCount="1"
          while [[ $dlCount -le "3" ]]; do
            qqX_Latest_NonSecure_TarBall="https://github.com/TuxVinyards/qqX/archive/refs/tags/${qqX_Latest_ReleaseNumber}.tar.gz" 
            eval curl --disable -L -m 10 -o "$qqX_LatestTarBall_Folder/qqX-${qqX_Latest_ReleaseNumber}.tar.gz" "$qqX_Latest_NonSecure_TarBall"
            echo
            if [[ ! -e "qqX-${qqX_Latest_ReleaseNumber}.tar.gz" ]]; then
              rm -r ./*  2>/dev/null
              printf "\n\n  ERROR  - RETRYING  DOWNLOAD \n\n"
            else printf "\n\n" ; break
            fi
            ((dlCount++))
          done
        fi

        if [[ ! -e "qqX-${qqX_Latest_ReleaseNumber}.tar.gz" ]]; then
          printf "  Problem auto-downloading Tarball"
          printColor "\n\n  Download file '%s not found \n\n" "qqX-${qqX_Latest_ReleaseNumber}.tar.gz"
        fi

        printColor "  File download target %s"  "$qqX_LatestTarBall_Folder"

        if [[ $BetaTxReleasePoint ]]; then 
          printf "\n\n\n  Moving from beta to release ... "
          printf   "\n\n  See the general settings file for more details \n"
        fi

        printf "\n\n  Use the installer script to quickly refresh and add new features to your settings file."
        printf "\n\n  All option settings, locations and preferences will be kept."
        printf "\n\n\n  " 
        [[ -e "qqX-${qqX_Latest_ReleaseNumber}.tar.gz" ]] && printf "[enter] to run the installer script   "
        printf "[r] to return to main menu \n\n"
        read -rp "  >  "  qqX_UpdateExit

        if [[ $qqX_UpdateExit != "r" ]] && [[ ! -e "qqX-${qqX_Latest_ReleaseNumber}.tar.gz" ]]; then 
          printColor "\n\n  ERROR: Download folder/file not found ??"
          printf "\n\n  [enter] to close and retry \n\n"
          read -rp "  >  "
          qqX_UpdateExit="r"
        else
          # https://stackoverflow.com/questions/651018/opening-a-tar-gz-file-with-a-single-command
          tar xfz "qqX-${qqX_Latest_ReleaseNumber}.tar.gz"
          sleep 0.5
          if [[ -d "qqX-${qqX_Latest_ReleaseNumber}" ]]; then
            # is using fall-back mode
            cp -r "qqX-${qqX_Latest_ReleaseNumber}"/* .
          fi
          sleep 0.5
          if [[ ! -e "qqX_setup_and_install" ]] ; then 
            printColor "\n\n  ERROR extracting the download files ??"
            printf "\n\n  [enter] to close and retry \n\n"
            read -rp "  >  "
            qqX_UpdateExit="r"
          fi
        fi
        if [[ $qqX_UpdateExit != "r" ]]; then
          # start the SYSTEM installer (use the posix installer for initial or manual installs)
          exec  bash -c "$qqX_LatestTarBall_Folder/qqX.system/qqX_system_install  Upgrade" 
        fi
      fi

      sleep 0.5
      cd "$ReturnFolder"  || printColor "\n\n  ERROR  returning from qqX.releases folder"

    fi
}


