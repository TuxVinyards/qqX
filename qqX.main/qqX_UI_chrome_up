#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/qqxproject
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:
#   Licence  GPL3   https://www.gnu.org/licenses
##  qqX - quickemu quickget X terminal project

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154

#  GENERAL COLOR & THEMING   (see settings)

[[ ! $X_Shade ]] &&  X_Shade="3"

#  Yellow 3 (recommended), Blue 4, Cyan 6 (brighter blue), Red 1
#  https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
#  https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x405.html
#  if source without declared shade, set default shade


# non-color ECHO TRAP, mainly designed to capture the technical output that quickemu doesn't send to log file
printf "\n"  > "/tmp/qqX_echo_output.log"

echo () {

  if [[ $UseCustomBootArgs ]]; then
    command echo "$@" >>  "/tmp/qqX_echo_output.log" ;
  else
    command echo "$@" | tee -a  "/tmp/qqX_echo_output.log" ;
  fi

}

printColor () {
	tput setaf "$X_Shade"
	# shellcheck disable=SC2059
	printf "$@"
	tput sgr0
}

# avoid use of echo near the vm boot section, to avoid clashes with the log file

echColor () {
	if [[ $2 ]] ; then
		if [[ "$1" == "-n" ]] ; then
			tput setaf "$X_Shade"
			echo -n "$2"
			tput sgr0
		else
			tput setaf "$X_Shade"
			echo "$@"
			tput sgr0
		fi
	else
		tput setaf "$X_Shade"
		echo "$1"
		tput sgr0
	fi
}


# General default title:
qqX_title="[quickemu quickget X terminal project] - $qqX_Version - basically better ..."

## qqX chrome up

qqX_logo() {
  # not for use during vm boot sequences
  echColor "  _    _   \/   "
  echColor " (_|  (_|  /\ "
  echColor "   |.   |.    "
}

qqX_logo_plain() {
  # early loader
  echo "  _    _   \/   "
  echo " (_|  (_|  /\ "
  echo "   |.   |.    "
}

qqX_logo_printf() {
  # printf version (no end line feed)
  printColor "  _    _   \/   "
  printColor " (_|  (_|  /\ "
  printColor "   |.   |.    "
}

# Variant on   http://www.figlet.org/  -f mini  (-k)   (c)  Alex Genovese

qqX_logo_title() {
  # not for use during vm boot sequences
  if [[ $1 ]]; then qqX_LogoTxt="$1" ; else qqX_LogoTxt="$qqX_title" ; fi
  echColor "  _    _   \/   "
  echColor " (_|  (_|  /\ "
  echColor "   |.   |.     $qqX_LogoTxt"
}

qqX_logo_printf_title() {
  # printf version (no end line feed & also avoids the quickemu echo trap)
  if [[ $1 ]]; then qqX_LogoTxt="$1" ; else qqX_LogoTxt="$qqX_title" ; fi
  printColor "\n  _    _   \/   "
  printColor "\n (_|  (_|  /\ "
  printColor "\n   |.   |.     %s"  "$qqX_LogoTxt"
}


function exit {

  # trap to keep terminal open if started by mouse click  -t secs
  # or to stop sourced quickemu quitting as 'normal' procedure   (tput resets any hidden cursors)
  # https://unix.stackexchange.com/questions/220330/hide-and-unhide-cursor-with-tput

  if [[ $1 == "directly" ]]; then
    tput cnorm
    command exit

  elif [[ $1 ]] && [[ ! $NoExit ]]; then
    printf "\n\n"
    printColor "  ERROR :  [i] ignore & continue  [q] quit  \n\n"
    read -rp  "  >  "
    ExitTrap=
    printf "\n\n  Confirm:  [Enter] to quit  [r] to return and retry something else \n\n"
    read -rp "  >  "  ExitTrap
    if [[ ! $ExitTrap ]]; then
      tput cnorm
      command exit "$@"
    else
      return 0
    fi

   elif [[ ! $disk_img ]]; then
    # don't exit on quickemu error no disk defined, this is handled by qqX  REVIEW
    return

  fi

  # zero the optional 'exit 1' bypass flag (if it has been set)
  NoExit=
}

# Tests for these programs will have been made just previously in the read_main_settings script
# but placing the message functions here allows these functions to run elsewhere
# See function qcow2_filemanagement_launcher

texteditor_not_found_message () {
  printColor "\n\n  Unable to open settings or show some help sections without an editor."
  printf "\n\n  Default or basic text editors will be tried or have been tried ..."
  printf "\n\n  Give settings file the command name of a preferred editor."
  printf "\n\n  Settings location:  %s  \n\n  [enter] to return \n\n"  "$qqX_SettingsFile"
  read -rp "  >  "
}

web_browser_not_found_message () {
  printColor "\n\n  Add Web Browser to GENERAL SETTINGS:"
  printf "\n\n  None of the usual or default Web Browsers can be found ..."
  printf "\n\n  Give settings file the command name of a preferred browser."
  printf "\n\n  Settings location:  %s  \n\n  [enter] to return \n\n"  "$qqX_SettingsFile"
  read -rp "  >  "
}

file_manager_not_found_message () {
  printColor "\n\n  Add File Manager to GENERAL SETTINGS:"
  printf "\n\n  None of the usual or default File Managers can be found ..."
  printf "\n\n  Give settings file the command name of a preferred manager."
  printf "\n\n  Settings location:  %s  \n\n  [enter] to return \n\n"  "$qqX_SettingsFile"
  read -rp "  >  "
}

show_qqX_title_bar() {

  if [[ ! $LatestQEMU ]] && grep -qsE ^'[0-9]' "/tmp/latest-qemu.txt"; then  LatestQEMU="$(cat "/tmp/latest-qemu.txt")"; fi

  qqX_logo_printf_title  "$qqX_title" ;  printf "\n"
  printf "\n\n  Currently wrapping:  QEMU %s" "$QEMU_VER_LONG"
  if [[ $LatestQEMU ]]; then
    if [[ $QEMU_VER_LONG == "$LatestQEMU" ]]; then  printf "  (latest)   "
    else printf "  (latest: %s)   " "$LatestQEMU"
    fi
  else printf "   "
  fi
  printf "quickemu %s  &  quickget %s  '%s'"  "$QE_VerNumber" "$QG_VerNumber" "$QE_SourceVersion"

  [[ $VerboseArgs ]] && printColor  "  (Verbose Args)"

  if [[ $CodingHotSwap && $CodingHotSwapShow ]] || [[ $DevStart ]]; then
    printf "\n\n  Using Code: %s " "$QE_SourcePath"
    [[ $CodingHotSwap ]] && CodingHotSwapShow=
  fi

  PWD_Folder="$(pwd)"
  HideFolderTitleBar=

  for TF in "${Extra_VM_Folder[@]}"; do
    [[ $TF ==  "$PWD_Folder" ]] || [[ $PWD_Folder ==  "$Default_VM_Folder" ]] &&  HideFolderTitleBar=1
  done

  if [[ ! $Current_VM_Folder ]]; then
    Current_VM_Folder="$Default_VM_Folder"
    cd "$Default_VM_Folder" || printf "\n\n  ChromeUp ERROR sorting Current Folder"
  fi

  if [[ ! $HideFolderTitleBar ]]; then
    printf "\n\n  Default Folder: %s   Current Folder: %s \n"  "$Default_VM_Folder" "$Current_VM_Folder"
  else
    printf "\n"
  fi

}

function show_qqX_general_help {

  HelpSelect=

  while true; do

    if [[ $1 ]]; then  HelpSelect="$1" ; shift
    fi

    cat "$HOME/.qqX/icons/qqX.ascii.logo.8bit.25.txt"
    printf "\n  Translations:  https://qqxproject.org/docs/Translation   Release Notes:  https://qqxproject.org/docs/Release-Notes"
    printf "\n\n  For SETTINGS and user modes, see notes in the general settings file"
    printColor  "\n\n  [enter] to return  [f] FreeBird notes  [c] command line & mouse notes  [w] Online: HELP PAGES and FAQs"
    printf "\n\n"
    [[ $HelpSelect ]] || read -rp "  >  "  HelpSelect

    if [[ $HelpSelect == "c" ]]; then
      show_CLI_usage
      printf "\n"
      read -rp  "   >  " HelpSelect

    elif [[ $HelpSelect == "f" ]]; then
      printf "\n  Hot-Swappable from all main menus:  [FS] FreeSpirit  [FB] FreeBird  [HB]  [Ech]  [Sys]  [Cust]  [Dev] \n\n"
      grep -m 1 -A 100  '# Named versions' "$qqX_SettingsFile" | grep -m 1 -B 100 '# FreeBird or FreeSpirit are recommended'| tr '#' ' '
      if [[ -e "$Default_VM_Folder/qqX.custom/QE.Custom/quickemu" ]]; then
        printf "\n\n  Custom =   Default_VM_Folder > qqX.custom  > %s " "$("$Default_VM_Folder/qqX.custom/QE.Custom/quickemu" --version)"
      fi
      if [[ -e "$QE_DevPath/quickemu" ]]; then
        printf "\n\n  Dev =   %s  > %s " "$QE_DevPath"  "$("$QE_DevPath/quickemu" --version)"
      fi
      printf "\n\n  [enter] to return \n\n"
      read -rp  "  >  " HelpSelect

    elif [[ $HelpSelect == "w" ]]; then
      HelpSelect=
      printf "\n  Opening Browser ... \n"
      (nohup &> /dev/null  "$WebBrowser"  "https://qqxproject.org/docs/FAQs-and-Help"  & ) || web_browser_not_found_message
      sleep 1
    else
      HelpSelect=
      break
    fi

  done

}


function multi_instance_checks {

  MultiQuit=
  KillQQ=
  CurrentQQ_FullLine=
  CurrentQQ=
  CurrentQQ_LastField=
  AnotherQQ=

  # Make sure that all current processes have been statted properly before moving on.
  # pgrep -an is not reliable and pgrep sub-shell creates another pid too.
  # BUT new PID always goes on end of list so check for this until no 'kworker' grep errors
  sleep 0.2
  i=0
  while true; do
    CurrentQQ_FullLine="$(pgrep -afi qqX | tail -n 1  2>/dev/null)"
    [[ $ShowProcesses ]] && printf "\n(i%s) %s " "$i" "$CurrentQQ_FullLine"
    if [[ "$CurrentQQ_FullLine" == *kworker* ]]; then sleep 0.2 ; ((i+=1))
    else
      CurrentQQ_LastField="$(awk '{print $NF}' <<< "$CurrentQQ_FullLine")"
      CurrentQQ="$(awk '{print $1}' <<< "$CurrentQQ_FullLine")"
      break
    fi
    if [[ $i -gt 25 ]]; then
      printColor "\n\n ERROR statting current PID > restart required"
      printf "\n\n\n  [enter] to close \n\n"
      read -rp "  >  "
    fi
  done

  # All qqX, exactly, will exclude 'qqX_copy_over' but doesn't make reading the parameters and variants too easy
  # Also pgrep -aAxi qqX, with x, doesn't count itself ..... but -afi does .... REVIEW
  # Note: needs -i ignore case, so that CLI starts using 'qqx' (lower) get counted

  AnotherQQ="$(pgrep -aAi qqX 2>/dev/null)"

  # Also Note: CL launched running of qcow2 file management happens before this script is called. See qqX start.
  # Running CL instances will show up with 'pgrep -aAxi qqX' as 'pid /bin/bash /usr/bin/qqX --qqf' or similar.
  # With pgrep -afi qqX_filemanage as: pid /bin/bash /usr/share/qqX/qqX.main/qqX_filemanage_qcow_drive --qqf

  if [[ $ShowProcesses ]]; then
    echo
    echo; echo "CurrentQQ  $CurrentQQ"; echo; echo "LastField  $CurrentQQ_LastField"
    echo; echo "AnotherQQ:"; echo; echo "$AnotherQQ"; echo
    echo; echo "QF_exit_to_Main = $QF_exit_to_Main"; echo
    read -rp " >  "
  fi

  CurrentQQ_mode="main"
  if [[ ! $QF_exit_to_Main ]]; then
    case "$CurrentQQ_LastField" in
      *'.qcow2'*|*'--qqf'*|*'qqX_filemanage '*) CurrentQQ_mode="qcow" ;;
    esac
  fi

  if [[ $AnotherQQ ]]; then
    OtherQQ_MainArr=()
    OtherQQ_F_Arr=()
    mapfile -t AnotherQQ_Arr <<< "$AnotherQQ"
    for QQ in "${AnotherQQ_Arr[@]}"; do
      if [[ "$QQ" != *"$CurrentQQ"* ]]; then
        if [[ "$QQ" == *'--qqf'* ]] || [[ "$QQ" == *'qqX_filemanage'* ]]; then
          OtherQQ_F_Arr+=("$(awk '{print $1}' <<< "$QQ")")
        elif [[ "$QQ" != *'qqX_copy_over'* ]]; then
          OtherQQ_MainArr+=("$(awk '{print $1}' <<< "$QQ")")
        elif [[ $QF_exit_to_Main ]] && [[ "$QQ" != *'qqX_copy_over'* ]]; then
          OtherQQ_MainArr+=("$(awk '{print $1}' <<< "$QQ")")
        fi
      fi
    done
    # Starting Main via the .qcow2 route needs to counted too. And only 1 QF instance should exist.
    # .qcow2 remains when 'exit to main' but changes to 'filemanage' when switching to QF
    # while elif [[ "$QQ" == *'.qcow2'* ]]; gets included in [[ "$QQ" != *'qqX_copy_over'* ]]
    if [[ $ShowProcesses ]]; then
      echo; declare -p AnotherQQ_Arr; echo
      echo; declare -p OtherQQ_MainArr; echo
      echo; declare -p OtherQQ_F_Arr; echo
      read -rp " >  "
    fi
  fi

  if [[ $AnotherQQ ]] && [[ $CurrentQQ_mode == "main" ]] && [[ "${#OtherQQ_MainArr[@]}" -ge 1 ]]; then

    tput sc
    qqX_logo_printf_title  "CAUTION: more than one instance of qqX appears to be running "

    printf "\n"
    printf "\n\n  QEMU will lock protect key files and will prevent VM's being run simultaneously ..."
    printf "\n\n  Simple usage can be possible but be aware that minor cross-linking problems could occur"

    printf "\n\n\n  [enter] to continue with all   [k] kill other instances and continue with just this one "
    printColor "\n\n  [q] to quit \n\n"
    read -rp "  >  "   MultiQuit

    [[ $MultiQuit == "q" ]] && exit directly

    if [[ $MultiQuit == "k" ]]; then
      if [[ $(pgrep kvm 2>/dev/null) ]]; then printColor "\n\n  CAUTION: Check for distros that may be running. Force closing can corrupt VM file systems ...."
      else
        printf "\n\n  Killing desktop started instances will close the terminal windows."
        printf "\n\n  CLI instances will terminate but the windows will remain open ..."
        printColor "\n\n\n  Killing other qqX instances ... "
      fi
      printf "\n\n  [k] yes, kill  [enter] to continue with all  [q] to quit \n\n"
      read -rp "  >  "  KillQQ
      if [[ $KillQQ == "k" ]]; then
        for QQ in "${OtherQQ_MainArr[@]}"; do
          KillTarget="$(awk '{print $1}' <<< "$QQ" | tr -cd '[:digit:]' 2>/dev/null)"
          [[ $ShowProcesses ]] && printf "\n QQ = %  > killing: %s" "$QQ" "$KillTarget"
          kill "$KillTarget" 2>/dev/null
        done
        printColor "\n\n  Closed  \n\n" ; sleep 0.7
      elif [[ $KillQQ == "q" ]]; then exit directly
      fi
    fi

    tput rc ; tput ed  #  clear back the last lines to sc (set cursor)

  fi

  if [[ "$(pgrep quickgui 2>/dev/null)" ]] ; then

    printColor "\n\n  WARNING: an instance of QUICKGUI appears to be running "
    printf "\n\n  Both this program and qqX do have an amount of cross-link protection, however note that:"
    printf "\n\n  Stopping an instance shown as running in QuickGUI may stop an instance started in qqX. \n\n"
    read -rp "  [q] to quit    [enter] to continue  > "   MultiQuit

    [[ $MultiQuit == "q" ]] && exit directly

  fi

  printf "" > "$ConfClearanceLog"

}
