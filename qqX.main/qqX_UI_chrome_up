#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154   

#  GENERAL COLOR & THEMING   (see settings)

[[ ! $X_Shade ]] &&  X_Shade="3"

#  Yellow 3 (recommended), Blue 4, Cyan 6 (brighter blue), Red 1
#  https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit
#  https://tldp.org/HOWTO/Bash-Prompt-HOWTO/x405.html
#  if source without declared shade, set default shade


# non-color ECHO TRAP, mainly designed to capture the technical output that quickemu doesn't send to log file
printf "\n"  > "/tmp/qqX_echo_output.log"

echo () { 

  if [[ $UseCustomBootArgs ]]; then
    command echo "$@" >>  "/tmp/qqX_echo_output.log" ; 
  else 
    command echo "$@" | tee -a  "/tmp/qqX_echo_output.log" ; 
  fi

}

printColor () {
	tput setaf "$X_Shade"
	# shellcheck disable=SC2059
	printf "$@"
	tput sgr0
}

# avoid use of echo near the vm boot section, to avoid clashes with the log file

echColor () {
	if [[ $2 ]] ; then
		if [[ "$1" == "-n" ]] ; then
			tput setaf "$X_Shade"
			echo -n "$2"
			tput sgr0
		else
			tput setaf "$X_Shade"
			echo "$@"          			
			tput sgr0
		fi
	else
		tput setaf "$X_Shade"
		echo "$1"
		tput sgr0
	fi
}


# General default title:
qqX_title="[quickemu quickget X terminal project] - $qqX_Version "

## qqX chrome up  

qqX_logo() {
  # not for use during vm boot sequences
  echColor "  _    _   \/   "
  echColor " (_|  (_|  /\ "
  echColor "   |.   |.    "
}

qqX_logo_plain() {
  # early loader 
  echo "  _    _   \/   "
  echo " (_|  (_|  /\ "
  echo "   |.   |.    "
}

qqX_logo_printf() {
  # printf version (no end line feed)
  printColor "  _    _   \/   "
  printColor " (_|  (_|  /\ "
  printColor "   |.   |.    "
}

# Variant on   http://www.figlet.org/  -f mini  (-k)   (c)  Alex Genovese

qqX_logo_title() {
  # not for use during vm boot sequences
  if [[ $1 ]]; then qqX_LogoTxt="$1" ; else qqX_LogoTxt="$qqX_title" ; fi
  echColor "  _    _   \/   "
  echColor " (_|  (_|  /\ "
  echColor "   |.   |.     $qqX_LogoTxt"
}

qqX_logo_printf_title() {
  # printf version (no end line feed & also avoids the quickemu echo trap)
  if [[ $1 ]]; then qqX_LogoTxt="$1" ; else qqX_LogoTxt="$qqX_title" ; fi
  printColor "\n  _    _   \/   "
  printColor "\n (_|  (_|  /\ "
  printColor "\n   |.   |.     %s"  "$qqX_LogoTxt"
}


function exit {
  
  # trap to keep terminal open if started by mouse click  -t secs
  # or to stop sourced quickemu quitting as 'normal' procedure   (tput resets any hidden cursors)
  # https://unix.stackexchange.com/questions/220330/hide-and-unhide-cursor-with-tput

  if [[ $1 == "directly" ]]; then
    tput cnorm
    command exit

  elif [[ ! $disk_img ]]; then 
    # don't exit on quickemu error no disk defined, this is handled by qqX
    return 

  elif [[ $1 ]] && [[ ! $NoExit ]]; then
    printf "\n\n"
    printColor "  ERROR :  [i] ignore & continue  [q] quit  \n\n"
    read -rp  "  >  "  
    ExitTrap=
    printf "\n\n  Confirm:  [Enter] to quit  [r] to return and retry something else \n\n"  
    read -rp "  >  "  ExitTrap
    if [[ ! $ExitTrap ]]; then 
      tput cnorm
      command exit "$@"
    fi
  fi

  # zero the optional 'exit 1' bypass flag (if it has been set)
  NoExit=
}


show_qqX_title_bar() {

  qqX_logo_printf_title  "$qqX_title" ;  printf "\n"
  printf "\n\n  Currently wrapping:  QEMU %s   quickemu %s  &  quickget %s  '%s'" "$QEMU_VER_LONG" "$QE_VerNumber" "$QG_VerNumber" "$QE_SourceVersion"

  [[ $VerboseArgs ]] && printf  "  (Verbose Args)"

  if [[ $CodingHotSwap && $CodingHotSwapShow ]] || [[ $DevStart ]]; then 
    printf "\n\n  Using Code: %s " "$QE_SourcePath" 
    [[ $CodingHotSwap ]] && CodingHotSwapShow= 
  fi
  
  PWD_Folder="$(pwd)"
  HideFolderTitleBar=

  for TF in "${Extra_VM_Folder[@]}"; do
    [[ $TF ==  "$PWD_Folder" ]] || [[ $PWD_Folder ==  "$Default_VM_Folder" ]] &&  HideFolderTitleBar=1
  done

  if [[ ! $CurrentFolder ]]; then 
    CurrentFolder="$Default_VM_Folder"
    cd "$Default_VM_Folder" || printf "\n\n  ChromeUp ERROR sorting Current Folder"
  fi

  if [[ ! $HideFolderTitleBar ]]; then  
    printf "\n\n  Default Folder: %s   Current Folder: %s \n"  "$Default_VM_Folder" "$CurrentFolder"
  else  
    printf "\n"
  fi

}

function show_qqX_general_help {

  HelpSelect=

  while true; do 

    if [[ $1 ]]; then  HelpSelect="$1" ; shift ; fi

    printf "\n\n  FOR HELP with settings and user modes, SEE NOTES IN THE GENERAL SETTINGS file"  
    printf "\n\n  Also see:  https://github.com/TuxVinyards/qqX/wiki/FAQs-and-Help  etc "
    printf "\n\n  For code contributions, bugs and updates, see: https://github.com/TuxVinyards/qqX"

    cat "$HOME/.qqX/icons/qqX.ascii.logo.8bit.25.txt"

    printf "\n  Translations:  https://github.com/TuxVinyards/qqX/wiki/Translation   Release Notes:  https://github.com/TuxVinyards/qqX#release-notes"
    printColor  "\n\n  [w] Online: qqX WIKI PAGES    Offline: [f] FreeBird notes  [c] command line & mouse notes  [enter] to RETURN"  
    printf "\n\n"
    [[ ! $HelpSelect ]] && read -rp "  >  "  HelpSelect

    if [[ $HelpSelect == "c" ]]; then   
      show_CLI_usage  
      printf "\n"
      read -rp  "   >  " HelpSelect

    elif [[ $HelpSelect == "f" ]]; then   
      printf "\n  Selectable for Hot-Swap from all main menus:  [FS] FreeSpirit  [FB] FreeBird  [HB]  [Ech]  [Sys]  [Cust]  [Dev] \n\n"
      grep -m 1 -A 100  '# Branches' "$qqX_SettingsFile" | grep -m 1 -B 100 'Custom'| tr '#' ' ' 
      printf "\n"
      read -rp  "   >  " HelpSelect

    elif [[ $HelpSelect == "w" ]]; then
      HelpSelect=
      nohup &> /dev/null  "$WebBrowser"  "https://github.com/TuxVinyards/qqX/wiki/FAQs-and-Help"  & 

    else  
      HelpSelect=
      break
    fi

  done

}


function multi_instance_checks {

  MultiInstanceCount="$(pgrep -cx "qqX")"   # count exact match, ignores sub routines
  MultiQuit=
  KillQQ=

  if [[ $MultiInstanceCount -gt 1 ]]; then 

    tput sc
    qqX_logo_printf_title  "WARNING: more than one instance of qqX appears to be running "
    printf "\n\n  To prevent cross-linking, this instance or the other instance(s) should be closed. "
    printf "\n\n\n  For *simple* usage, it can be safe to continue ..."
    printf "\n\n  BUT as long as the other instance's code base has not been hot-swapped."

    CurrentQQ="$(ps | awk '/qqX/{print $1}')"
    OtherQQ="$(pgrep -ax qqX | grep -v "$CurrentQQ")"
    mapfile -t OtherQQ_Arr <<< "$OtherQQ"

    printf "\n\n\n  [enter] to continue with all   [k] kill other instances and continue with just this one "
    printColor "\n\n  [q] to quit \n\n"
    read -rp "  >  "   MultiQuit

    [[ $MultiQuit == "q" ]] && exit directly

    if [[ $MultiQuit == "k" ]]; then 
      if [[ $(pgrep kvm 2>/dev/null) ]]; then printColor "\n\n  CAUTION: Check for distros that may be running. Force closing can corrupt VM file systems ...."
      else printColor "\n\n  Continue with killing idle qqX instances? "
      fi
      printf "\n\n  [k] to kill  [enter] to continue with all  [q] to quit \n\n"
      read -rp "  >  "  KillQQ
      if [[ $KillQQ == "k" ]]; then
        for QQ in "${OtherQQ_Arr[@]}"; do
          kill "$(tr -cd '[:digit:]' <<< "$QQ")" 2>/dev/null
        done
        printColor "\n\n  Closed  \n\n" ; sleep 0.7
      elif [[ $KillQQ == "q" ]]; then exit directly
      fi
    fi

    tput rc ; tput ed  #  clear back the last lines to sc (set cursor)
    
  fi

  if [[ "$(pgrep quickgui)" ]] ; then

    printColor "\n\n  WARNING: an instance of QUICKGUI appears to be running " 
    printf "\n\n  Both this program and qqX do have an amount of cross-link protection, however note that:"
    printf "\n\n  Stopping an instance shown as running in QuickGUI may stop an instance started in qqX. \n\n"
    read -rp "  [q] to quit    [enter] to continue  > "   MultiQuit

    [[ $MultiQuit == "q" ]] && exit directly

  fi

  printf "" > "$ConfClearanceLog"

}
