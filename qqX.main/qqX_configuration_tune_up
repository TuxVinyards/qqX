#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154  


function_config_tune_up ()  {

  # $1 should be the full path/filename.conf
  
  TuneUpTargetFile="$1" 

  if [[ ! -e $TuneUpTargetFile ]]; then 
    printColor "\n\n  Internal ERROR  tune up .conf file not found \n\n  %s \n\n"
    sleep 100
  fi

  TuneUp_InstanceName="$(basename "$TuneUpTargetFile" .conf)"
  TuneUpDate="$(date +%b%d.%H.%M)"

  # Should be in the group folder but make sure we are. 
  # Could happen if tune up follows a download that was started in a different folder to the target new one.
  TuneUp_Conf_Dir="$(dirname "$TuneUpTargetFile")"

  if [[ ! -d $TuneUp_Conf_Dir ]]; then 
    printColor "\n\n  Internal ERROR  tune up Group Folder not found \n\n  %s \n\n"
    sleep 100
  fi

  cd "$TuneUp_Conf_Dir" || printColor "\n\n  ERROR changing to Tuning Group Folder "

  # standard procedure is to makes this match the .conf 
  if [[ ! -d $TuneUp_InstanceName ]]; then 
    printColor "\n\n  Internal ERROR  tune up Distro Name Folder not found \n\n  %s \n\n"
    sleep 100
  fi

  TuneUpOldFile="$TuneUp_InstanceName/OldConfig.$TuneUpDate.conf"

  cp "$TuneUpTargetFile"  "$TuneUpOldFile"

  # check starter, where QE_SystemFilePath is normally '/usr/bin/quickemu'
  # default behaviour from quickget is to add "#!$(which quickemu) --vm"
  # and from ver 1.8 on, builtins or custom will make a non standard mod 
  # if bypassing the tune-up, unless tweaked here:

  Conf_qqX_Pointer="$(head -n 1 "$TuneUpTargetFile" | grep '#!' | grep "$System_qqX_Path" )"
  Conf_SysQE_Pointer="$(head -n 1 "$TuneUpTargetFile" | grep '#!' | grep "$QE_SystemFilePath" )"

  TuneUpTmpCopy="/tmp/TuneUpTargetFile.tmp"
  TuneUpTargetDraft="/tmp/TuneUpTargetDraft.tmp"
  cp  "$TuneUpTargetFile"  "$TuneUpTmpCopy"

  if [[ ! $Conf_qqX_Pointer && ! $Conf_SysQE_Pointer ]]; then 
    printf "#!%s --vm \n\n" "$QE_SystemFilePath" > "$TuneUpTargetFile" 
    tail -n +2 "$TuneUpTmpCopy" >> "$TuneUpTargetFile" 
    cp  "$TuneUpTargetFile"  "$TuneUpTmpCopy"
  fi

  [[ $GeneralLoopCheck ]] && echo && echo "Conf_qqX_Pointer = $Conf_qqX_Pointer" && echo "Conf_SysQE_Pointer = $Conf_SysQE_Pointer"  && echo 
  dev_loop_check

  printColor "\n\n  CHECK ME: \n\n"
  cat "$TuneUpTmpCopy"
  printColor "\n\n  All changes made here, may be reversed:"
  printf "\n\n  A backup of your current configuration has now been date recorded & placed in the Distro Folder\n"
  
  if [[ $NewFileTuneUp ]]; then 
    printf "\n\n  So far, so good  >  "
    # Not fully done at this point but this is used a flag to stop repeat conf checks, means the tune-up screen has been done.
    NewFileTuneUp_JustDone=1
  fi

  if [[ ! $Conf_qqX_Pointer ]]; then

    ConfEdit_Qstart=
    printColor "\n\n  The start line may be edited to point to qqX"  
    printf "\n\n  Change the start line to point to qqX ?"  
    printf "\n\n  [enter] yes, go for it    [no] use System %s  [q] quit tune-up \n\n"  "$QE_SystemFilePath"
    read -rp "  >  "  ConfEdit_Qstart

    [[ $ConfEdit_Qstart == "q" ]] && return

    if [[ $ConfEdit_Qstart == "no" ]]; then printf "#!%s --vm \n\n" "$QE_SystemFilePath" > "$TuneUpTargetDraft"  
    else printf "#!%s --vm \n\n" "$System_qqX_Path" > "$TuneUpTargetDraft" 
    fi

  else  printf "#!%s --vm \n\n" "$System_qqX_Path" > "$TuneUpTargetDraft" 

  fi

  dev_loop_check

  # disk size  (for existing installs use the 'disk' util)

  ConfLine="$(grep -s 'disk_size' "$TuneUpTmpCopy")"

  if [[ $NewFileTuneUp ]]; then

    ConfEdit_DiskSize=
    printColor "\n\n  Suggest adding disk_size=\"64G\" or higher if expecting to create snapshots: " 
    printf "\n\n  qcow2 disks auto-compress & will normally occupy much less space"
    printColor "\n\n  & an empty disk only takes up 196k."
    printf "\n\n  It is easier make them larger now than to resize later ... " 
    printf  "\n\n\n  [enter] 128G  or  [number] in Gb 32, 64, 192   [no] leave as possibly sub-minimal  [q] quit tune-up "  
    printf "\n\n"
    read -rp  "  >  "  ConfEdit_DiskSize

    [[ $ConfEdit_DiskSize == "q" ]] && return
    [[ ! $ConfEdit_DiskSize ]]  && ConfEdit_DiskSize="128"
    [[ $ConfEdit_DiskSize ]]  &&  ConfEdit_DiskSize="$(tr -cd "[:digit:]" <<< "$ConfEdit_DiskSize")"
    [[ $ConfEdit_DiskSize ]] && printf "disk_size=\"%sG\"\n"  "$ConfEdit_DiskSize"  >> "$TuneUpTargetDraft"

  else  
  
    if [[ $ConfLine ]] && [[ "$ConfLine" != *'#'* ]]; then printf "%s\n" "$ConfLine" >> "$TuneUpTargetDraft" ; fi

  fi

  # add cores menu  (using code from ffX project ...)

  if [[ $(type -p lscpu) ]]; then

    CoresAvail=$(lscpu | grep "Core(s) per socket:" | tr -cd "[:digit:]")
    SocketsAvail=$(lscpu | grep "Socket(s):" | tr -cd "[:digit:]")   #  REVIEW  for dual cpu mobo (untested)
    CoresAvail=$((SocketsAvail*CoresAvail))
    ThreadsPerCoreAvail=$(lscpu | grep "Thread(s) per core:" | tr -cd "[:digit:]")      #  REVIEW  
    ThreadsAvailable=$((ThreadsPerCoreAvail*CoresAvail))
    ThreadsSuggested=$(bc <<< "scale=0; ((($ThreadsAvailable*3)/4)+0.5)/1" 2>/dev/null)

    #  Use 'modulo' to detect odd/even   See: https://stackoverflow.com/a/15660039  
    [[ "$(( ThreadsSuggested % 2 ))" == "1" ]] && (( ThreadsSuggested +=1 ))
    ThreadsSuggestLower=$(bc <<< "scale=0; ((($ThreadsAvailable*2)/3)+0.5)/1" 2>/dev/null)
    [[ "$(( ThreadsSuggestLower % 2 ))" == "1" ]] && (( ThreadsSuggestLower +=1 ))

  fi

  [[ $ThreadsAvailable ]] && printColor "\n\n  You have %s 'cores' available  (actual cores, or cores x threads) " "$ThreadsAvailable"
 
  printf "\n\n  Normal guest setting should be around 2/3 to 3/4 of the host's."
  printf "\n\n  All available 'cores x threads' can be allocated, esp. if running the VM full screen"
  printf "\n\n  These are VIRTUAL cores. So more than physically available may also be used too."

  printf "\n\n\n  Possibly, if using 'big LITTLE'  CPU's you *may* choose to use a lower figure."   
  printf "\n\n  Quickemu defaults to half the physical count. But be generous as less will actually be used."
  printf "\n\n  And the host CPU virtualizing units will always protect things ...."

  if [[ $guest_os == "macos" ]]; then 
    printColor "\n\n\n  MacOS: This should be cpu_cores=8 =16 or =32  Other values will not boot."
    printf "\n\n  Where value based on the CPU threads available, eg 4 physical cores x 2 threads per core = 8"
    ThreadsSuggested=8
    ThreadsSuggestLower=8
  else
    [[ $ThreadsSuggested ]] && printColor "\n\n  Suggested setting:  cpu_cores=\"%s\"  or  cpu_cores=\"%s\"" "$ThreadsSuggested"  "$ThreadsSuggestLower"
  fi
  CoresSetNumber=
  ConfLine="$(grep -s 'cpu_cores' "$TuneUpTmpCopy")"

  if [[ $ConfLine ]] && [[ "$ConfLine" != *'#'* ]]; then 
    printf "\n\n  CURRENT setting:  %s" "$ConfLine"    
    CurrentCores="$(tr -cd "[:digit:]" <<< "$ConfLine")"
    [[ $CurrentCores != "$ThreadsSuggestLower"  ]] && printColor "   [c] to use current  "
  fi

  if [[ $ThreadsSuggestLower ]]; then printColor "\n\n  [enter] use %s " "$ThreadsSuggestLower"; else  printf "\n\n" ; fi

  printColor "  [integer] choose (even numbers are usual)  "
  printColor "[d] use quickemu defaults   [q] quit tune-up \n\n"  
  read -rp  "  >  "  CoresSetNumber

  [[ $CoresSetNumber == "q" ]] && return

  if [[ $CoresSetNumber && $(tr -cd "[:digit:]" <<< "$CoresSetNumber") ]]; then

    printf "cpu_cores=\"%s\"\n"  "$CoresSetNumber"  >> "$TuneUpTargetDraft"

  elif [[ $CoresSetNumber == "c" ]]; then  printf "%s\n" "$ConfLine" >> "$TuneUpTargetDraft" 

  elif [[ $CoresSetNumber == "d" ]]; then  true 

  else

    if [[ $ThreadsSuggestLower ]]; then  
      printf "cpu_cores=\"%s\"\n"  "$ThreadsSuggestLower"  >> "$TuneUpTargetDraft"
      printf "\n\n  Max cores set to %s " "$ThreadsSuggestLower"
    fi

  fi

  SharedRAM_NotFound=
  RAM_Available=

  printColor "\n\n\n\n  Memory showing: \n\n"

  free --si -h  

  RAM_Available="$(free --giga | tr ' ' '\n' | grep -m 1 [0-9] 2>/dev/null)"
 
  # @2024/01 free --mega etc failing in Manjaro at the (interactive) command prompt, will work in scripts 
  # & has been traced to 'free' being aliased.  Manjaro Devs may wish to comment this out in ~/bashrc 

  # Of note, Qemu defaults to 128 MiB (mebibytes) but the ram values are taken as MB or GB

  # Also see https://github.com/quickemu-project/quickemu/issues/899    

  if [[ ! $RAM_Available ]]; then

    RAM_Available="$(grep MemTotal /proc/meminfo | cut -d':' -f2 | tr -cd '[:digit:]' 2>/dev/null)"
    RAM_Available="$(bc <<< "scale=1; $RAM_Available/999999" 2>/dev/null)"
    SharedRAM_NotFound=1

  else 

    Shared_RAM_Allocated="$(free --mega -h | tr ' ' '\n' | grep -m 4 [0-9] | tail -1  2>/dev/null)"

    if [[ "$Shared_RAM_Allocated" == *M* ]]; then 
      Shared_RAM_Allocated="$(cut -d'M' -f1 <<< "$Shared_RAM_Allocated")"
      if [[ $(bc <<< "$Shared_RAM_Allocated < 500") == 1 ]]; then Shared_RAM_Allocated= ; else Shared_RAM_Allocated="1" ; fi
    fi

  fi

  [[ ! $Shared_RAM_Allocated ]] && SharedRAM_NotFound=1

  printf "\n\n"
  printColor "  Don't stinge on the VM's RAM  Again, esp. if running the VM full screen."
  printf "\n\n  Quickemu will default to half, even quarter minimals ..."
  printf "\n\n  For full screen VM, suggest RAM of around 2/3 total, round up/down to expected guest/host demand"

  [[ $Shared_RAM_Allocated || $SharedRAM_NotFound ]] && printf "\n\n  Add about half of shared RAM, used for graphics"
  
  printf "\n\n  Integer values only. Possibly reduce if high quotas present.  \n\n  Use programs such as 'htop' for further tuning."

  if [[ $RAM_Available ]]; then
 
    printColor "\n\n  Your host system is showing %sG of RAM, " "$RAM_Available"  
    
    if [[ $Shared_RAM_Allocated ]]; then printColor "of which %sG is possibly allocated to graphics" "$Shared_RAM_Allocated"
    elif [[ $SharedRAM_NotFound ]]; then printColor "of which some *may* be allocated to graphics" 
    fi
 
    # suggest around 2/3 of RAM (using around half of shared graphics) rounded as applicable
    if [[ $Shared_RAM_Allocated ]]; then  RAM_ForCalcs="$(bc <<< "scale=3; ($RAM_Available-($Shared_RAM_Allocated/2))/1" )"
    else RAM_ForCalcs="$RAM_Available"
    fi

    RAM_Suggested_Lower="$(bc <<< "scale=3; (($RAM_ForCalcs /100)*55) /1" )"
    RAM_Suggested_Higher="$(bc <<< "scale=3; (($RAM_ForCalcs /100)*65) /1" )"

    printf -v RAM_Suggested_Lower  "%.0f" "$RAM_Suggested_Lower"           # rounded up/down
    printf -v RAM_Suggested_Higher  "%.0f" "$RAM_Suggested_Higher"         # rounded up/down
    printf "\n\n  Suggested RAM (lower)  = %sG"  "$RAM_Suggested_Lower"
    printf "\n\n  Suggested RAM (higher) = %sG"  "$RAM_Suggested_Higher"

  fi

  ConfLine="$(grep -s 'ram=' "$TuneUpTmpCopy")"

  if [[ $ConfLine ]] && [[ "$ConfLine" != *'#'* ]]; then 
  
    printf "\n\n  CURRENT setting:  %s" "$ConfLine"    
    Current_RAM="$(tr -cd "[:digit:]" <<< "$ConfLine")"
    [[ $Current_RAM != "$RAM_Suggested_Higher"  ]] && printColor "   [c] to use current  "

  fi


  RAM_SetNumber=

  printColor "\n\n  [enter] use %s   [integer] choose   " "$RAM_Suggested_Higher"
  printColor "[d] to use quickemu defaults  [q] quit tune-up \n\n"
  read -rp  "  >  "  RAM_SetNumber
  printf "\n\n"

  [[ $RAM_SetNumber == "q" ]] && return

  if [[ $RAM_SetNumber ]] && [[ $(tr -cd "[:digit:]" <<< "$RAM_SetNumber") ]]; then printf "ram=\"%sG\"\n"  "$RAM_SetNumber"  >> "$TuneUpTargetDraft"

  elif [[ $RAM_SetNumber == "d" ]]; then true

  elif [[ $RAM_SetNumber == "c" ]]; then printf "%s\n" "$ConfLine" >> "$TuneUpTargetDraft" 

  else [[ $RAM_Suggested_Higher ]] &&  printf "ram=\"%sG\"\n"  "$RAM_Suggested_Higher"  >> "$TuneUpTargetDraft" 

  fi


  # add in other conf lines

  printf "\n" >> "$TuneUpTargetDraft" 

  mapfile -t TuneUpArr < "$TuneUpTmpCopy"

  for Line in "${TuneUpArr[@]}"; do

    if [[ $(tr -cd "[:graph:]" <<< "$Line") ]] && [[ "$Line" != *'#!'* ]] && [[ "$Line" != 'disk_size='* ]] \
    && [[ "$Line" != 'cpu_cores='* ]] && [[ "$Line" != 'ram='* ]] && [[ "$Line" != '#tpm='* ]]  && [[ "$Line" != 'tpm='* ]] \
    && [[ "$Line" != *'cureboot='* ]]; then

      [[ "$Line" == '# Secure Boot'* ]] && printf "\n" >> "$TuneUpTargetDraft"
      printf "%s\n" "$Line" >> "$TuneUpTargetDraft" 

    fi

  done

  # Check for OS specifics

  guest_os=

  ConfLine="$(grep -s 'guest_os=' "$TuneUpTmpCopy")"

  if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then

    printColor "\n\n  WARNING  a line 'guest_os=\"xxx\"' should be present"
    printf "\n\n  This should be added manually, where  =\"linux\"  \"windows\"  or \"macos\" are valid options"
    printf "\n\n  Re-run this checker after the guest_os line has been added"

  else

    eval "$ConfLine"

    if [[ $guest_os == "windows" ]]; then 

      printColor "\n\n Windows: "
      printf "\n\n  Software TPM should be set as \"on\" until at least the registration process is complete"
      printf "\n\n  but can be set to \"off\" at later stages. Lines may commented-out with a \"#\" \n"
      
      ConfLine="$(grep -s '# Secure Boot' "$TuneUpTmpCopy")"

      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then  printf "\n\n# Secure Boot should normally be off & TPM should be on."   >> "$TuneUpTargetDraft" ; fi

      {   printf "\ntpm=\"on\"" 

          printf "\nsecureboot=\"off\"\n\n"
      
      }   >> "$TuneUpTargetDraft"


    elif [[ $guest_os == "macos" ]]; then 

      ConfLine="$(grep -s 'macos_release=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then  printf "macos_release=\"\"\n"  >> "$TuneUpTargetDraft" ; fi

      ConfLine="$(grep -s 'mouse=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then printf "mouse=\"virtio\"\n"  >> "$TuneUpTargetDraft" ; fi

      ConfLine="$(grep -s 'keyboard=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then  printf "keyboard=\"usb\"\n"  >> "$TuneUpTargetDraft" ; fi

    fi

  fi


  while true; do 

    printColor "\n\n  CHECK ME: \n\n"

    cat "$TuneUpTargetDraft"

    TuneUpConfConfirm=

    if [[ $guest_os == "macos" ]]; then 

      ConfLine="$(grep -s 'macos_release=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then 
        printColor "\n\n  MacOS WARNING: A line macos_release=\"catalina\" or similar should be present"
        printf "\n\n  This instructs Quickemu how to optimise & should be added manually.\n"
      fi

      ConfLine="$(grep -s 'mouse=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then 
        printColor "\n\n  MacOS Note: A line mouse=\"virtio\" or similar is recommended,"
        printColor "\n\n  especially with newer releases. Older ones may need =\"usb\" .... "
        printf "\n\n  This has been added but will need to be tested & optimised manually.\n"
      fi

      ConfLine="$(grep -s 'keyboard=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then 
        printColor "\n\n  MacOS Note: A line keyboard=\"usb\" or similar is recommended,"
        printColor "\n\n  some newer releases may need =\"virtio\" .... "
        printf "\n\n  This has been added but will need to be tested & optimised manually.\n"
      fi

      ConfLine="$(grep -s 'MacScreenRes=' "$TuneUpTmpCopy")"
      if [[ ! $ConfLine ]] || [[ "$ConfLine" == *'#'* ]]; then 
        printColor "\n\n  MacOS Note: A line MacScreenRes=\"2560x1440\" or similar may be used"
        printColor "\n\n  or needed in order to control the screen size when using FreeSpirit "
        printf "\n\n  Standard Stock sizes: 2560x1440  1920x1080  1280x720 to be added & optimised manually."
        printf "\n\n  Requires scripts from June 17 2024 onwards. Default is 1280x720.\n"
      fi

    fi



    printColor "\n\n  [enter] all good, continue    [r] revert back to the old config"
    printf "\n\n  [e]  edit the config file in more detail   "
    
    [[ $NewFileTuneUp ]] && printf "[d]  delete the VM - something went wrong ..."

    printf "\n\n"
    read -rp "  >  "   TuneUpConfConfirm


    if [[ $TuneUpConfConfirm == "e" ]]; then 

      printf "\n# To restore use name:   %s \n" "$TuneUpTargetFile" >> "$TuneUpOldFile"
      qqX_edit_settings  "tune-up" 
  
    elif [[ $TuneUpConfConfirm == "r" ]]; then 

      printColor "\n\n  Undoing changes to config file \n\n"  
      cat "$TuneUpTargetFile"
      printf "\n\n"
      read -rp "  [enter] to continue  >  "
      break
    
    elif [[ $NewFileTuneUp ]] && [[ $TuneUpConfConfirm == "d" ]]; then 
    
      function_delete_Selected_VM  "$TuneUp_InstanceName" "$TuneUpTargetFile"
      break

    else

      printf "\n# To restore use name:   %s \n" "$TuneUpTargetFile" >> "$TuneUpOldFile"
      cp "$TuneUpTargetDraft" "$TuneUpTargetFile"
      SelectArrayError=
      IgnoreSecondCheckNew=1
      break

    fi

  done

  # usage case options are complex, so generally do a refresh all and return to vm selector menu ...  REVIEW 
  
  if [[ $NewFileTuneUp ]]; then 

    SettingsFileAdjusted=1
    SelectArrayError=
    IgnoreSecondCheckNew=1

    # set here, before refresh
    VM_Conf_Dir="$TuneUp_Conf_Dir"
    VM_Conf_File="$TuneUpTargetFile"
    VM_InstanceName="$TuneUp_InstanceName"

    # ByPass_VM_Array_Loader=1
    # ByPass_VM_Array_Selector=1

    refresh_sources_and_load_VM_arrays

  else

    ConfSettingsAdjusted=1
    refresh_conf_vars_and_values

  fi

}

