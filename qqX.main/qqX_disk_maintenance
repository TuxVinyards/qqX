#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154


drives_and_snapshots() {

  #  @ 2023/08  with adding of second and shared drives,  
  #  also start accessing qemu-img directly instead of going round the houses with with quickemu calls 
  #  Omitting $1 will give simple lists, otherwise $1 may be given either as 'info' or 'select'
  #  Or $1 as 'info_current' to avoid the 'refresh_conf_vars_and_values' call 
  #  $2 "as_disk_util" is for disk utility to hide the message to use the disk utility

  [[ $1 == "as_disk_util" ]] && printColor "\n\n  Internal ERROR: disk uitilty needs two args \n\n"  && sleep 100

  Selected_Drive=
  Selected_DriveName=
  if [[ $1 == "info_current" ]]; then
    TwoTemp="$2"
    set -- "info" "$TwoTemp"
    TwoTemp=
  else
    refresh_conf_vars_and_values
  fi

  if [[ $SecondDriveArgs ]]; then

    printColor "\n  Second Drive: \n\n"

    if ! "$QEMU_IMG" snapshot -l "$SecondDrive" | grep -s -q 'Snapshot list:' ; then printf "  No Snaphots \n\n" 
    else
      if [[ $1 == "info" ]]; then "$QEMU_IMG" info "$SecondDrive"; echo 
      else "$QEMU_IMG" snapshot -l "$SecondDrive"; echo 
      fi
    fi

    if [[ $2 == "as_disk_util" ]]; then  check_disk_is_okay PrintErrors "$SecondDrive" ; echo 
    else check_disk_is_okay "$SecondDrive" 
    fi

    printf "  Health Status:  %s"  "$DiskChkStatus"
    if [[ $DiskChkStatus == "Okay" ]]; then  printf " > No errors " 
    elif [[ $2 != "as_disk_util" ]]; then printColor "\n\n  See qqX [disk] utility for repairs"
    fi
    printf "\n\n"

  fi

  if [[ $SharedDriveArgs ]]; then

    printColor "\n  Shared Drive: \n\n"

    if ! "$QEMU_IMG" snapshot -l "$SharedDrive" | grep -s -q 'Snapshot list:' ; then printf "  No Snaphots \n\n" 
    else
      if [[ $1 == "info" ]]; then "$QEMU_IMG" info "$SharedDrive"; echo
      else "$QEMU_IMG" snapshot -l "$SharedDrive"; echo
      fi
    fi

    if [[ $2 == "as_disk_util" ]]; then  check_disk_is_okay PrintErrors "$SharedDrive" ; echo ; else check_disk_is_okay "$SharedDrive" ; fi

    printf "  Health Status:  %s"  "$DiskChkStatus"
    if [[ $DiskChkStatus == "Okay" ]]; then  printf " > No errors " 
    elif [[ $2 != "as_disk_util" ]]; then printColor "\n\n  See qqX [disk] utility for repairs"
    fi
    printf "\n\n"

  fi

  if [[ $SharedDrive_Conf == "no-shared" ]]; then printColor "\n  Shared Drive:"; printf "\n\n  Disabled (see .conf file) \n\n" ; fi

  if [[ ! -e $MainDrive ]]; then  printColor "\n\n  NO MAIN DRIVE  (yet) \n\n"

  else

    if [[ $SharedDriveArgs || $SecondDriveArgs ]]; then printColor "\n  Main Drive: \n\n"
    else printColor "\n  One Main Drive: \n\n"
    fi

    if ! "$QEMU_IMG" snapshot -l "$MainDrive" | grep -s -q 'Snapshot list:' ; then printf "  No Snaphots \n\n" 
    else
      if [[ $1 == "info" ]]; then "$QEMU_IMG" info "$MainDrive"; echo
      else "$QEMU_IMG" snapshot -l "$MainDrive"; echo
      fi
    fi

    if [[ $2 == "as_disk_util" ]]; then  check_disk_is_okay PrintErrors "$MainDrive" ; echo
    else check_disk_is_okay "$MainDrive"
    fi

    printf "  Health Status:  %s"  "$DiskChkStatus"
    if [[ $DiskChkStatus == "Okay" ]]; then  printf " > No errors "
    elif [[ $2 != "as_disk_util" ]]; then printColor "\n\n  See qqX [disk] utility for repairs" 
    fi
    printf "\n\n"

  fi

  if [[ $1 == "select" ]] && [[ $SharedDriveArgs || $SecondDriveArgs ]]; then

    printColor "\n  SELECT:  [enter]  MAIN DRIVE (or back to main menu)"
    
    [[ $SecondDriveArgs ]] && printColor "   [2]  Second Drive"
    [[ $SharedDriveArgs ]] && printColor "   [3]  Shared Drive"
    [[ $SharedDriveArgs && $SecondDriveArgs ]] && printColor "  (scroll to view)"

    printf "\n\n"

    read -rp "  >  "   Selected_Drive

    case "$Selected_Drive" in

      2)  Selected_Drive="$SecondDrive" 
          Selected_DriveName="Second Drive"
      ;;

      3)  Selected_Drive="$SharedDrive" 
          Selected_DriveName="Shared Drive"
      ;;

      *)  Selected_Drive="$MainDrive" 
          Selected_DriveName="Main Drive"
      ;;

    esac

  else

    Selected_Drive="$MainDrive" 
    Selected_DriveName="Main Drive"

  fi

  if [[ $1 == "select" ]] && [[ -e "$Selected_Drive" ]] ; then

    printColor "\n\n Selected Drive = %s \n\n"  "$Selected_DriveName"
   
    "$QEMU_IMG" info "$Selected_Drive"
    check_disk_is_okay "$Selected_Drive"
    Selected_DriveSize="$("$QEMU_IMG" info "$Selected_Drive" | grep -m 1 'disk size' | cut -d: -f2)"

    if [[ $2 != "as_disk_util" ]]; then

      printf "\n\n  Health Status:  %s  (%s)"  "$DiskChkStatus"  "$Selected_DriveName"
      if [[ $DiskChkStatus == "Okay" ]]; then  printf " > No errors " ; else printColor "\n\n  See qqX [disk] utility for repairs" ; fi
      printf "\n\n  IMPORTANT > For disk operations, the virtual machine must *not* be running & not started elsewhere." 

    fi

    # use pgrep with -x exact match to avoid 'kvm-cleanup' processes being detected
    [[ $(pgrep -x kvm) ]] &&  printColor "\n\n  VIRTUAL MACHINE ACTIVITY has been DETECTED \n"

  fi

}


function manage_and_repair_disks {

  drives_and_snapshots  select  as_disk_util

  if [[ ! -e "$Selected_Drive" ]]; then

    printf "\n\n  [b] go back to main menu"

  else

    printf "\n\n  Selected Drive is %s " "$Selected_DriveName"
    check_disk_is_okay  "$Selected_Drive" 

    if [[ $DiskChkStatus != "Okay" ]]; then printColor "\n\n  Status:  %s"  "$DiskChkStatus" ; else printf "\n\n  Status:  %s"  "$DiskChkStatus" ; fi

    [[ $DiskChkStatus == "Okay" ]] && printf " > No errors "

    DiskSize_Envelope="$("$QEMU_IMG" info "$Selected_Drive" | grep -m 1 'virtual size:')"
    DiskSize_Envelope="${DiskSize_Envelope/'virtual size: '/}"
    DiskSize_Occupied="$("$QEMU_IMG" info "$Selected_Drive" | grep -m 1 'disk size:')"
    DiskSize_Occupied="${DiskSize_Occupied/'disk size: '/}"

    if [[ $DiskChkStatus == "Okay" ]]; then

      printf "\n\n  Theoretical Envelope: %s  containing  %s " "$DiskSize_Envelope" "$DiskSize_Occupied"
      printf "\n\n  Copy on Write and snapshots can sometimes make envelope size can be appear lower than the contents ..."

    fi

    if [[ $DiskChkExitCode == "3" || $DiskChkExitCode == "2" ]]; then

      printf "\n\n  Standard repair uses multithreads. Use slow method if standard fails."
      [[ $DiskChkExitCode == "2" ]] && printf "\n\n  WARNING - Full repair may cause some data loss if there are damaged data clusters ..."
      
    fi

    # Check there is disk free space to make a backup  

    if [[ "$DiskSize_Occupied" == *'KiB'* ]] || [[ "$DiskSize_Occupied" == *'MiB'* ]] ; then DiskSize_GiB_OnDisk="1"
    else DiskSize_GiB_OnDisk="${DiskSize_Occupied/'GiB'/}" 
    fi

    DiskFreeGiB_OnHost="$(df -H --output=avail . | tail -1)"
    DiskFreeGiB_OnHost="${DiskFreeGiB_OnHost/G/}"

    printf "\n\n  Checking for backup disk space on host drive ..."

    if [[ $(bc <<< "$DiskFreeGiB_OnHost < ($DiskSize_GiB_OnDisk + 10)") == "1" ]]; then

      printColor "\n\n  WARNING: insufficient or very low space."
    
    else

      printf "\n\n\n"
      if [[ $DiskChkExitCode == "3" ]]; then printColor "  [lk] basic leaks repair  [LK] slow method"
      elif [[ $DiskChkExitCode == "2" ]]; then printColor "  [full] attempt complex repair  [FULL] slow method"
      else printColor "  [rd] reduce only - clear ALL snapshots, remove deleted files & tidy 'empty' space   [rz] resize the envelope"
      fi

    fi
    
    printf "\n\n  The virtual machine MUST NOT BE RUNNING & not started elsewhere." 
    # use pgrep with -x exact match to avoid 'kvm-cleanup' processes being detected
    [[ $(pgrep -x kvm) ]] &&  printColor "\n\n  VIRTUAL MACHINE ACTIVITY has been DETECTED \n"
    printf "\n\n  A BACK-UP WILL BE MADE. All processes will remove any snapshots ...  [b] back to menu " 

  fi

  DiskManage=
  printf "\n\n"
  read -rp "  >  "  DiskManage
  printf "\n\n"	

  # https://qemu.readthedocs.io/en/v7.2.2/tools/qemu-img.html#cmdoption-qemu-img-commands-arg-convert

  # https://qemu.readthedocs.io/en/v7.2.2/tools/qemu-img.html#cmdoption-qemu-img-commands-arg-check
  
  # REVIEW   qemu's differential 'bitmap' tracking  https://lwn.net/Articles/837053/

  if [[ $DiskManage != "b" ]]; then 

    if [[ $DiskManage == "rz" ]]; then

      printf "  This will resize the external envelope. Internal partitions may require additional treatment."
      printf "\n\n  For main drive partitions, follow up with the [iso] utility > 'gparted' is recommended."
      printf "\n\n  See https://github.com/TuxVinyards/qqX/wiki/Disks-and-Resizing " 
      printColor "\n\n\n  Give extra GigaBytes TO ADD, as integer, eg 16 \n\n"
      read -rp "  >  "  ResizePlus
      printf "\n\n"
      ResizePlus="$(tr -cd "[:digit:]" <<< "$ResizePlus")"

    fi

    DiskDate="$(date +%b%d.%H.%M)"
    DiskBackup="${Selected_Drive}.$DiskDate.OLD.qcow2"
    mv "$Selected_Drive" "$DiskBackup" 

    printf  "  Original drive: %s \n\n" "$Selected_Drive"
    printColor "  Moved to back up as: %s \n\n" "$DiskBackup"

    if [[ $DiskManage == "LK" || $DiskManage == "FULL" ]]; then 

      printf "" > "$Qemu_IMG_ErrorLog"
      DU_BackUpSize="$(du "$DiskBackup" | cut -f 1)"

      function dd_progress_report {

        sleep 5

        while true ; do
        
          DU_SelectedSize="$(du "$2" | cut -f 1  2>/dev/null)"
          DU_BackUpSize="$1"
          [[ ! $DU_SelectedSize ]] && DU_SelectedSize=1

          DD_ProgressPercent="$(bc <<< "scale=5; ($DU_SelectedSize/$DU_BackUpSize)*100")"
          DD_ProgressPercent="$(bc <<< "scale=0; ($DD_ProgressPercent + 0.5)/1")"
          [[ $DD_ProgressPercent -ge 98 ]] && break

          printf "\r  New Drive Progress = %s%%   "  "$DD_ProgressPercent"
          sleep 3

        done

      }

      dd_progress_report  "$DU_BackUpSize"  "$Selected_Drive"  &
      printColor "\n\n  Attemping repair .... \n\n"
      
      "$QEMU_IMG" dd -f qcow2 -O qcow2  if="$DiskBackup" of="$Selected_Drive" 2> "$Qemu_IMG_ErrorLog" 

    else  "$QEMU_IMG" convert -O qcow2 "$DiskBackup" "$Selected_Drive" 

    fi

    if [[ -e  "$DiskBackup" ]] && [[ -e "$Selected_Drive" ]]; then

      [[ $DiskManage == "lk" || $DiskManage == "LK" ]] && "$QEMU_IMG" check -f qcow2 -r leaks "$Selected_Drive" 2> "$Qemu_IMG_ErrorLog" 
      [[ $DiskManage == "full" || $DiskManage == "FULL" ]] && "$QEMU_IMG" check -f qcow2 -r all "$Selected_Drive" 2> "$Qemu_IMG_ErrorLog" 
      # option 'rd' is basically 'convert' process only  (all options do this as standard)
      if [[ $DiskManage == "rz" || $DiskManage == "rd" ]]; then 
        [[ $DiskManage == "rz" ]] && "$QEMU_IMG" resize -f qcow2 "$Selected_Drive" "+${ResizePlus}G" 2> "$Qemu_IMG_ErrorLog" 
        "$QEMU_IMG" info "$Selected_Drive"
        printColor "\n\n  Drive Updated ..."
      fi

    else  printColor  "\n\n  ERROR: a NEW drive could not be created from the backup ??"

    fi


    printf "\n\n  [enter] to return to menu \n\n "
    read -rp "  >  "  

  fi

}

function qqX_snapshot_delete {

  # NB qqX prefix to avoid cross-linking with the quickemu one

  printColor "\n\n qqX Snapshot Delete function "  
  printf "\n\n %s  (reselection & cancel prompts are given before starting)" "$Selected_DriveName"

  # Create range-selectable array 
  SnapListString="$("$QEMU_IMG" info "$Selected_Drive" | grep '[0-9][0-9]:')"

  # turns the multiline string into raw array with one whole line for each entry making each array element
  # then line by line extract the snap number and its title:
  mapfile -t SnapListArrRaw <<< "$SnapListString"

  i=0
  SnapListArrSeparated=()

  printColor "\n\n ID   Array  Name \n\n"
  while [[ "${SnapListArrRaw[i]}" ]]; do
    IFS=' ' read -ra SnapListArrSeparated <<< "${SnapListArrRaw[i]}" 
    # prints the first two elements of each snapshot info line 
    printf "%2d    %2d    %s \n"  "${SnapListArrSeparated[0]}"  "$i"  "${SnapListArrSeparated[1]}"
    ((i+=1))
  done

  SnapListArrTotal=$((i-1))

  printColor "\n Enter ARRAY number [0] to [%s], either for individual snapshot, or for the start of snapshot range"  "$SnapListArrTotal"
  printf "\n\n or [full individual name] for difficult names only showing correctly in the FULL listing"
  printf "\n\n or [enter] to return to main menu "

  SnapName=
  SnapDeleteStart=
  SnapDeleteEnd=
  SnapDeleteConfirm=
  
  printf "\n\n"
  read -rp " >  "  SnapDeleteStart
  
  if [[ $SnapDeleteStart ]]; then

      SpecialSnapName="$SnapDeleteStart"
      SpecialSnapName="$(tr -d "[:digit:]" <<< "$SpecialSnapName")"

    if  [[ $SpecialSnapName ]]; then

      # restore name as valid name if, when all digits removed, there is still something
      SpecialSnapName="$SnapDeleteStart"
      printf "\n  Snap to delete: \"%s\"" "$SpecialSnapName"

    else

      printColor "\n [enter] for an individual snapshot or to correct an error \n\n Or ARRAY [number] for end of range (inclusive) \n\n"
      read -rp " >  "  SnapDeleteEnd

      if [[ $SnapDeleteEnd ]]; then 

        SnapDeleteEnd="$(tr -cd "[:digit:]" <<< "$SnapDeleteEnd")"

        if [[ $SnapDeleteEnd ]]; then  [[ $SnapDeleteEnd -gt "$SnapListArrTotal" ]] && SnapDeleteEnd="$SnapListArrTotal"

        else  SnapDeleteEnd="$SnapListArrTotal"

        fi

        printf "\n Array Range = %s to %s" "$SnapDeleteStart"  "$SnapDeleteEnd"

        i="$SnapDeleteStart"
        SnapListArrSeparated=()

        printColor "\n\n ID   Array  Name \n\n"
        while true; do
          IFS=' ' read -ra SnapListArrSeparated <<< "${SnapListArrRaw[i]}" 
          # prints the first two elements of each snapshot info line 
          printf "%2d    %2d    %s \n"  "${SnapListArrSeparated[0]}"  "$i"  "${SnapListArrSeparated[1]}"
          [[ $i == "$SnapDeleteEnd" ]] && break
          ((i+=1))
        done

      else         
        printf "\n Delete = ARRAY entry %s " "$SnapDeleteStart" 
        printf "\n\n  %s \n" "${SnapListArrRaw[SnapDeleteStart]}" 
        SnapDeleteEnd="$SnapDeleteStart"
      fi

    fi

    printColor "\n [enter] to delete  [b] back to main menu (or reselect) \n\n"
    read -rp " >  "  SnapDeleteConfirm


    if [[ $SnapDeleteConfirm == "b" ]]; then

      printf "\n\n Deletion schedule has been CANCELLED"

    else

      if [[ $SpecialSnapName ]]; then

        "$QEMU_IMG" snapshot -q -d "$SpecialSnapName" "$Selected_Drive" 

      else
    
        SnapDeleteRangeCounter=$SnapDeleteStart

        while [[ $SnapDeleteRangeCounter -le $SnapDeleteEnd ]]; do

          IFS=' ' read -ra SnapListArrSeparated <<< "${SnapListArrRaw[$SnapDeleteRangeCounter]}"
          SnapName="${SnapListArrSeparated[1]}"

          if [[ ! $SnapName ]]; then
            printColor "\n\n ERROR with SnapShot Array List \n\n"
            sleep 5
            exit 1
          else
            printColor "\n\n Deleting SnapShot %2d   %2d  %s \n\n"  "${SnapListArrSeparated[0]}"  "$SnapDeleteRangeCounter"  "${SnapListArrSeparated[1]}"
            "$QEMU_IMG" snapshot -q -d "$SnapName" "$Selected_Drive" 
          fi
          ((SnapDeleteRangeCounter+=1))

        done

      fi

      "$QEMU_IMG" info "$Selected_Drive" 

      Selected_Drive_NewSize="$("$QEMU_IMG" info "$Selected_Drive" | grep -m 1 'disk size' | cut -d: -f2)"
      if [[ "$Selected_Drive_NewSize" == *GiB* ]] && [[ "$Selected_DriveSize" == *GiB* ]]; then
        SelDrvOld="${Selected_DriveSize//'GiB'/}"
        SelDrvNew="${Selected_Drive_NewSize//'GiB'/}"
        SelDrv_SpaceSaved="$(bc <<< "$SelDrvOld - $SelDrvNew ") GiB"
      fi

      printColor "\n\n Initial Disk Size: %s  -  Space Saved: %s \n"  "$Selected_DriveSize"  "$SelDrv_SpaceSaved"

    fi

    printf "\n\n [enter] to return to menu \n\n "
    read -rp " >  "  

  fi

  #  REVIEW  see if tiano core bios can be set to select 'misc device' instead of 'windows boot manager' 
  #  as this can cause problems when rebooting on updates
  #  https://github.com/tianocore/tianocore.github.io/wiki/UEFI-application
  #  https://github.com/theopolis/uefi-firmware-parser

}

drive_chown_notes () {
  printf "\n\n  If your new drives only have root access and your file manager won't change them,"
  printf   "\n  the following commands can help give general user permissions:"
  printf "\n\n"
  # shellcheck disable=SC2016
  echo '  sudo chown $USER:$USER "mounted-drive-name"' 
  echo '  chmod 775 "mounted-drive-name"'
}

function create_new_drives {

  SecondDriveCreateSize=
  DriveCreated=

  [[ $MainMenuChoice == "2c" ]] && MainMenuChoice="2"
  [[ $MainMenuChoice == "3c" ]] && MainMenuChoice="3"

  if [[ $MainMenuChoice == "3" ]] && [[ $SharedDrive ]] ; then 
     
    printColor "\n\n  ERROR:  A shared drive appears to already have been set up. Check VM conf and general settings."
    printf "\n\n  Shared drive is set as '%s'" "$SharedDrive"
    if [[ -e "$SharedDrive" ]]; then 
      printf "  and has been found." 
      check_disk_is_okay "$SharedDrive" 
      printf "\n\n  Drive Health Status:  %s"  "$DiskChkStatus"
    else printf "  but cannot be found."
    fi
    printf "\n"
    drive_chown_notes
    printf "\n"

  elif [[ $MainMenuChoice == "2" ]] && [[ "$SecondDrive" ]] ; then 
  
    printColor "\n\n  ERROR:  A second appears to already have been set up. Check VM conf and general settings."
    printf "\n\n  Second drive is set as '%s'" "$SecondDrive"
    if [[ -e "$SecondDrive" ]]; then 
      printf "  and has been found." 
      check_disk_is_okay "$SecondDrive" 
      printf "\n\n  Drive Health Status:  %s"  "$DiskChkStatus"
    else printf "  but cannot be found."
    fi
    printf "\n"
    drive_chown_notes
    printf "\n"

  else

    [[ $MainMenuChoice == "2" ]] && printColor "\n\n  Create a SECOND virtual hard-drive for this VM instance:"
    
    [[ $MainMenuChoice == "3" ]] && printColor "\n\n  Create a SHARED virtual hard-drive for this VM instance:"
    
    printf "\n\n\n  Suggest 32G or higher, especially if expecting to create snapshots. Note that" 
    printf "\n\n  qcow2 disks auto-compress & will normally occupy much less of your hard drive "
    printf "\n\n  than that allocated.  An empty disk only takes up 70Mb when formatted."
    printf "\n\n  It is easier make them larger now than to resize later ... " 
    printColor "\n\n\n  [enter] create 64G   [integer] create int G   [b] go back \n\n"
    read -rp "  >  "  SecondDriveCreateSize

    [[ ! $SecondDriveCreateSize ]]  && SecondDriveCreateSize="64"

    [[ $SecondDriveCreateSize ]]  &&  SecondDriveCreateSize="$(tr -cd "[:digit:]" <<< "$SecondDriveCreateSize")"

    if [[ $SecondDriveCreateSize ]]; then 

      if [[ $MainMenuChoice == "2" ]] && grep -s -q SecondDrive "$VM_Conf_File" ; then

        printColor "\n\n  ERROR: A SecondDrive entry is already present in your .conf file ??"
        printf "\n\n  Check general settings & notes on drives set up.  Edit the configuration. \n\n"

      elif [[ $MainMenuChoice == "3" ]] && [[ ! -d "$Default_VM_Folder" ]]; then

          printf "\n\n  Default_VM_Folder not present. Edit the main settings file first. \n\n"  

      else
          
        if [[ $MainMenuChoice == "2" ]]; then

          printf "\n\n  A Storage Drive will be created in the VM's folder \n\n  %s"  "$VM_InstanceName"

        elif [[ $MainMenuChoice == "3" ]]; then 

          printf "\n\n  A folder 'SharedDrive will be created in the Default_VM_Folder \n\n  %s"  "$Default_VM_Folder"
          printf "\n\n  It may later be moved. Editing settings file: \n\n  %s" "$qqX_SettingsFile"

        fi

        printColor "\n\n  [enter] to continue  [b] to go back \n\n"
        NewDriveCreate=
        read -rp "  > "  NewDriveCreate

        if [[ $NewDriveCreate != "b" ]]; then

          if [[ $MainMenuChoice == "2" ]]; then 

            printf "SecondDrive=\"%s/storage.qcow2\"" "$VM_InstanceName"  >> "$VM_Conf_File"
            "$QEMU_IMG"  create -q -f qcow2 "$VM_Conf_Dir/$VM_InstanceName/storage.qcow2" "${SecondDriveCreateSize}G"
            [[ -e "$VM_Conf_Dir/$VM_InstanceName/storage.qcow2" ]] && DriveCreated=2
        
          elif [[ $MainMenuChoice == "3" ]]; then

            [[ ! -d "$Default_VM_Folder/SharedDrive" ]] && mkdir "$Default_VM_Folder/SharedDrive"
            "$QEMU_IMG"  create -q -f qcow2 "$Default_VM_Folder/SharedDrive/shared.qcow2" "${SecondDriveCreateSize}G"
            [[ -e "$Default_VM_Folder/SharedDrive//shared.qcow2" ]] && DriveCreated=3

            #  https://www.gnu.org/software/sed/manual/sed.html#Command_002dLine-Options  
            #  Make sure sed command works in --posix  if testing on gnu sed ...
            #  Also note here:
            #  https://stackoverflow.com/questions/6537490/insert-a-line-at-specific-line-number-with-sed-or-awk#6537587
            #  sed -i only works in GNU sed  ... 

            if [[ "$(sed --version | head -n 1)" == *'GNU'* ]] && [[ $(grep -s 'SharedDrive=' "$qqX_SettingsFile" | grep -v '#' | grep -c 'SharedDrive') == 1 ]]; then

              # do a grep -c (count) & make sure that other than in comments (#) there is only one entry that is possible
              SharedDriveSettingsLine="$(grep -s -n 'SharedDrive=' "$qqX_SettingsFile" | grep -v '#' | cut -d ':' -f 1)"
              printf "\n\n  Backing up settings file to /tmp and changing line %s \n\n"  "$SharedDriveSettingsLine"
              eval cp "$qqX_SettingsFile"  "/tmp/qqX_settings.$(date +%s).old"     # REVIEW add awk version?
              eval sed -i \'"$SharedDriveSettingsLine" c\ SharedDrive=\""$Default_VM_Folder"/SharedDrive/shared.qcow2\"\'  "$qqX_SettingsFile"

            else 

              printColor "\n\n  A drive has been created but the settings file will need to be edited manually \n\n  Here: \n\n"
              grep -B 3 'SharedDrive=' "$qqX_SettingsFile"
              printf "\n\n  To read SharedDrive=\"%s/SharedDrive/shared.qcow2\" \n\n" "$Default_VM_Folder"

            fi

          fi

          if [[ $DriveCreated ]]; then

            refresh_conf_vars_and_values
            printColor "\n  The Created Drive should now be formatted from inside a VM:"
            printf "\n\n  Use Gparted or similar to set a device table and add partition(s)"
            printf "\n\n  Read notes in main settings if older MacOS or if Windows present."
            drive_chown_notes

          else  printColor "\n\n  Something went wrong. Drive not created "

          fi

        fi

      fi

    fi
      
  fi

  printf "\n\n  [enter] to return \n\n"
  read -rp "  >  "
  
}

function_delete_SecondDrive () {

  # To be run from the VM's main menu, which should have 'VM_Conf_File' etc present as a variables.

  if [[ $(type -p gio 2>/dev/null) ]]; then TrashingAvailable=1 ; else TrashingAvailable= ; fi

  if [[ ! -e "$SecondDrive" ]]; then 

    printf "\n\n  ERROR  a Second Drive  cannot be found"

  else

    printColor "\n\n  Drive '%s' to be deleted and config amended?" "$SecondDrive"

    if [[ $TrashingAvailable ]]; then 
      printColor "\n\n  [enter] safely move the drive to the recoverable trash bin"  
      printf "\n\n  [n] keep   [y] yes, PERMANENTLY, I have back-ups ..."
    else
      printColor "\n\n  [enter] use the file manager to move things the trash bin "
      printf "\n\n  [y] yes, PERMANENTLY, I have back-ups ..."
    fi

    printf "\n\n"
    read -rp "  >  "   DeleteSecond

    if [[ $DeleteSecond == "y" ]]; then 

      printf "\n\n  Second Drive being deleted ... "
      rm -f "$SecondDrive"

    else

      if [[ $TrashingAvailable ]] && [[ $DeleteSecond != "n" ]]; then
        printf "\n\n  Moving files to the bin ... "
        gio trash "$SecondDrive"
      else  printf "\n\n  NOT deleted ... "
      fi  # https://specifications.freedesktop.org/trash-spec/trashspec-latest.html

    fi

    if [[ $DeleteSecond != "n" ]]; then

      cp "$VM_Conf_File" "$VM_InstanceName/${VM_Conf_File}.edit.old.txt"
      mapfile -t ConfEditArray < "$VM_Conf_File"
      printf "" > "$VM_Conf_File"
      for Line in "${ConfEditArray[@]}"; do [[ "$Line" != *'SecondDrive'* ]] && printf "%s\n" "$Line" >> "$VM_Conf_File" ; done
      refresh_conf_vars_and_values

    fi

  fi
  
  printColor "\n\n  [enter] to return or continue \n\n" 
  read -rp "  > "

}

#  shellcheck disable=SC2120

qcow2_filemanagement_launcher () {

  local qqf_StandaloneInfo=
  local qqf_SetVars=
  local qqf_Input=
  local qqf_Input_Drivepath=

  if [[ $Trace_InputVars ]]; then echo "Args: $*"  ; echo  ; sleep "$Trace_InputVars" ; fi

  if [[ $1 == "qqf-info" ]]; then qqf_StandaloneInfo=1 ; shift
  fi
  if [[ $1 == "qqf-setvars" ]]; then qqf_SetVars=1 ; shift
  fi
  [[ $1 ]] && qqf_Input_Drivepath="$(realpath "$1")" && shift
  [[ -e "$qqf_Input_Drivepath" ]] && qqf_Input_Drivepath=

  if [[ $Trace_InputVars ]]; then echo "qqf_Input_Drivepath: $qqf_Input_Drivepath"  ; echo  ; sleep "$Trace_InputVars" ; fi

  if [[ ! -e "$XDG_GUI_desktop_Folder/qqX.desktop" ]]; then 
    printColor "\n\n  ERROR: qqX.desktop file cannot be located. Probable NON-FHS or NON-STANDARD installation problem."
    printf "\n\n  [enter] to return \n\n"
    read -rp "  >  "
    return
  fi

  Terminal_Start=
  # Read the .desktop file for Terminal_Start instruction
  # Eg. Exec=mate-terminal  --geometry=145x50 --hide-menubar --title=qqX  -e  " /usr/bin/qqX  XDG %f "
  GrepExecLine="$(grep -s Exec "$XDG_GUI_desktop_Folder/qqX.desktop")"
  if [[ $GrepExecLine ]]; then 
    GrepExecLine="${GrepExecLine/'Exec='/}"
    if grep -qs 'gnome-terminal' "$XDG_GUI_desktop_Folder/qqX.desktop" ; then
      Terminal_Start="$(cut -d '/' -f 1 <<< "$GrepExecLine")"
    else Terminal_Start="$(cut -d '"' -f 1 <<< "$GrepExecLine")"
    fi
  fi

  # resize qqf terminal a tad, if possible, to make it easier to see that there are two terms open
  Terminal_Start="${Terminal_Start/150/170}"
  Terminal_Start="${Terminal_Start/145/170}"
  Terminal_Start="${Terminal_Start/x55/x40}"
  Terminal_Start="${Terminal_Start/x50/x40}"
  Terminal_Start="${Terminal_Start/x45/x40}"

  local UserTerm=
  UserTerm="$(cut -d' ' -f1 <<< "$Terminal_Start")"

  if [[ $qqf_StandaloneInfo ]]; then 
  printf "\n\n  This option will set/reset the necessary VM variables for the QF standalone."
  printf "\n\n  If the Standard Option [qf] is not opening a new terminal, as it should do," 
  printf "\n\n  then open a terminal manually and type 'qqX --qqf' at the prompt."
  printColor "\n\n  [enter] to return  [k] to skip"
  printf "\n\n"
  read -rp "  >  "  qqf_Skip_SetVars
  fi

  if [[ $qqf_Skip_SetVars ]]; then qqf_Skip_SetVars=
  else
    # Needs to run script in a separate terminal to ensure qqX main does NOT get elevated permissions
    { printf "\n qqX_MainFolder=\"%s\"" "$qqX_MainFolder"
      printf "\n qqX_CustomFolder=\"%s\"" "$qqX_CustomFolder"
      printf "\n FileManager=\"%s\"" "$FileManager"
      printf "\n TextEditor=\"%s\"" "$TextEditor"
      printf "\n Default_VM_Folder=\"%s\"" "$Default_VM_Folder"
      printf "\n VM_Conf_Dir=\"%s\"" "$VM_Conf_Dir"
      printf "\n VM_InstanceName=\"%s\"" "$VM_InstanceName"
      printf "\n LiveBoot=\"%s\"" "$LiveBoot"
      printf "\n qqf_Input_Drivepath=\"%s\"" "$qqf_Input_Drivepath"
      printf "\n MainDrive=\"%s\"" "$MainDrive"
      printf "\n SecondDrive=\"%s\"" "$SecondDrive"
      printf "\n SharedDrive=\"%s\"" "$SharedDrive"
      printf "\n UserTerm=\"%s\"" "$UserTerm"
      printf "\n NoClear=\"%s\"" "$NoClear"
      printf "\n Trace_InputVars=\"%s\"" "$Trace_InputVars"
      printf "\n"
    } > "/tmp/qqX_nbd_vars"
  fi
  
  if [[ $Trace_InputVars ]]; then echo; cat "/tmp/qqX_nbd_vars"  ; echo  ; sleep "$Trace_InputVars" ; fi

  if [[ $qqf_StandaloneInfo ]]; then 
    return
  elif [[ $qqf_SetVars ]]; then 
    return
  elif [[ $qqf_Input_Drivepath ]]; then 
    if [[ -e "$qqX_CustomFolder/custom_filemanage_qcow_drive" ]]; then 
      eval "$Terminal_Start" "$qqX_CustomFolder/custom_filemanage_qcow_drive" "$qqf_Input_Drivepath"  >/dev/null 2>&1 &
    else
      eval "$Terminal_Start" "$qqX_MainFolder/qqX_filemanage_qcow_drive" "$qqf_Input_Drivepath" >/dev/null 2>&1 &
    fi
  else
    if [[ -e "$qqX_CustomFolder/custom_filemanage_qcow_drive" ]]; then 
      eval "$Terminal_Start" "$qqX_CustomFolder/custom_filemanage_qcow_drive" >/dev/null 2>&1 &
    else
      eval "$Terminal_Start" "$qqX_MainFolder/qqX_filemanage_qcow_drive" >/dev/null 2>&1 &
    fi
  fi

}

function check_vm_nbd_boot_connected {

  local qf_Launch=
  while pgrep -a qemu-nbd | grep -qi "$VM_InstanceName" || pgrep -a qemu-nbd | grep -q '/dev/nbd3' ; do  
    printf "\n  ERROR - The VM needs to be disconnected from its NBD mounts"
    if pgrep -a bash | grep -q 'qqX_filemanage' ; then printf "\n\n  Switch tabs to the qcow2 file manager"
    else printf "\n\n  [qf] Start the qcow2 file manager"
    fi
    printColor "\n\n\n  [enter] to continue, when disconnected   [r] to return"
    printf "\n\n"
    read -rp "  >  "  qf_Launch
    [[ $qf_Launch == "r" ]] && return 1
    [[ $qf_Launch ]] && qcow2_filemanagement_launcher
  done

}
