#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

#   Licence  GPL3   https://www.gnu.org/licenses 

##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:

# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 


vm_pid_kill_menu() {

  tput civis

	# WAIT for background load & QEMU messages to appear before showing menu (unless reloading)

	if [[ $KillPID_Menu_Exited ]]; then  KillPID_Menu_Exited=

  elif [[ $BreakAtVerboseArgs ]]; then BreakAtVerboseArgs= ; return

  else  sleep 2 
  
  fi
  
  # Qemu SHOULD write a .pid file while it is running & remove it when not  (Uses quickemu Var Names)

  # But from ver 1.6.02 there is a theoretical possibility of users customising out the call line: 
  # eg -pidfile ubuntu-22.04/ubuntu-22.04.pid etc being removed, so do belt & braces check for the PID  

  InstancePID="$(cat "${VMDIR}/${VMNAME}.pid" 2> /dev/null)"

  [[ ! $InstancePID ]] && InstancePID="$(pgrep "$VM_InstanceName")"

  SpicyPID="$(pgrep spicy)"

  if [[ ! $InstancePID ]]; then 

    # if instance didn't boot but Spicy did, then close the Spicy connect dialog window
    [[ $SpicyPID ]]  && kill "$SpicyPID" 2>/dev/null &

  else

    [[ $UseCustomBootArgs ]] && printColor "  STARTING CUSTOM BOOT SEQUENCE:  \n"

    sleep  "$P_Kill_WaitSecs"   

    printColor "\n  Quickemu instance %s on PID:  %s  %s"  "$VM_InstanceName"  "$InstancePID"  "$BootAlert"

    printColor  "\n\n  [k] force close the Quickemu instance   "
    
    if [[ $SpicyPID ]]; then 

      SpicyReStartCmd="$(ps --no-headers -o cmd "$SpicyPID")"
      printColor " [r] reload Spicy window (if closed)"

    fi

    printf "\n\n"
    tput cnorm

  fi

  # return to menu requires VM to be shutdown first
  # run a check every second (-t 1)

  while true ; do 

    read -rp  "  >  " -t 1  KillPID_Menu

    if [[ $KillPID_Menu == "k" ]]; then 

      printf "\n\n"
      if [[ $( ps -p "$InstancePID" --no-headers ) ]]; then
        [[ $SpicyPID ]] && kill "$SpicyPID" 2>/dev/null &
        kill "$InstancePID" 2>/dev/null &
      fi

      sleep 3
      printf "\n\n"

      tput cnorm
      break

    elif [[ $KillPID_Menu == "r" ]]; then 

      if [[ ! $(pgrep spicy) ]]; then 
        eval "$SpicyReStartCmd"
        sleep 2
        SpicyPID="$(pgrep spicy)"
      fi

    else

      if [[ ! $( ps -p "$InstancePID" --no-headers ) ]]; then 
      
        tput cnorm 
        break 

      else

        #  Erase text and adjust cursor:   "\e[1A\r"  "\e[2K\r"  etc    See https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
       
        printf "\r"

      fi

    fi

  done

  KillPID_Menu=

  KillPID_Menu_Exited=1

  P_Kill_WaitSecs="$P_Kill_WaitSecs_PreSet"

  refresh_and_load_quickemu_vars
  refresh_conf_vars_and_values

}	



show_main_menu_header () {

  [[ $InstancePID ]] && [[ ! $(cat "${VMDIR}/${VMNAME}.pid" 2>/dev/null) ]] && InstancePID=

  [[ ! $InstancePID ]] && printf "\033c"  && show_qqX_title_bar   

  printf "\n"
  printColor "    %s " "$VM_InstanceName" 

  #  Default_VM_Folder, as defined in settings.  Highlight if using non-default or current (pwd).

  #  See if using a Live ISO boot  (as in function_print_conf_array) or if is a new install without .qcow disk
  
  if [[ $Select_VM ]]; then  BootAlert=   

  elif  [[  ! -e "$MainDrive" && ! -e "$IsoImg" ]]; then  BootAlert="(ERROR)" 

  elif  [[  ! -e "$MainDrive" ]]; then  BootAlert="(New: Bootable Main Drive yet to be created)" 
  
  elif  [[  ! $(du -b -t 1000000 "$MainDrive" 2>/dev/null) ]]; then  BootAlert="(ISO/IMG Boot: Distro Non-installed)" 
  
  else  BootAlert= 
  
  fi

  [[ $VM_Conf_Dir ]] && printf "  @   %s"  "$VM_Conf_Dir"
  printf "   %s" "$BootAlert"  
  printf "\n"

  [[ $KVM_MSR_Error ||  $Show_MSR_Warnings  || $MSR_Warnings || $Verbose_MSR_dialog ]] && print_kvm_status_warnings

  # Note .conf won't exist at first load, at VM selector menu

  [[ -e $VM_Conf_File ]] && [[ ! -e "$MainDrive" && ! -e "$IsoImg" ]] && printColor "\n    ERROR  Check .conf Drive & Iso Img settings \n"

}

# When a VM_InstanceName exists, check the VM disk is not corrupt  (quickemu default name only)
# https://qemu.readthedocs.io/en/v7.2.2/tools/qemu-img.html#cmdoption-qemu-img-commands-arg-check

function check_disk_is_okay {

  local PrintErrors=

  for CheckArg in "$@" ; do 
    if [[ $CheckArg == "PrintErrors" ]]; then PrintErrors=1 ; shift ; fi
  done

  if [[ $1 && ! $2 ]]; then

    DiskCheckFolderName="$(dirname "$1")"
    DiskCheck_Disk="$(basename "$1")"

  else

    if [[ $1 ]]; then DiskCheckFolderName="$1" ; else DiskCheckFolderName="$VM_InstanceName"; fi
    if [[ $2 ]]; then DiskCheck_Disk="$2" ; else DiskCheck_Disk="disk.qcow2"; fi

  fi

  DiskChkExitCode=
  DiskChkStatus=

  if [[ -e "$DiskCheckFolderName/$DiskCheck_Disk" ]]; then

    # Disk won't exist if new (or named differently REVIEW )
    # Qemu-img with '-q' only outputs if error & on outputs on stderr   The exit status remains separately recorded.

    if [[ $PrintErrors ]]; then  "$QEMU_IMG" check -q "$DiskCheckFolderName/$DiskCheck_Disk"

    else "$QEMU_IMG" check -q "$DiskCheckFolderName/$DiskCheck_Disk"  2>/dev/null ; fi

    # Note "Okay"  is also used as a flag  > caution if changing   # REVIEW  could also be flagged using:
    # DiskChkMsg="$("$QEMU_IMG" check -q "$DiskCheckFolderName/$DiskCheck_Disk" 2>&1)" 

    case "$?" in 

      0) DiskChkStatus="Okay" ;;

      1) DiskChkStatus="Check not completed because of internal errors" ;;

      2) DiskChkStatus="Check completed, image is corrupted" 
         DiskChkExitCode=2 ;;

      3) DiskChkStatus="Check completed, image has leaked clusters, but is not corrupted" 
         DiskChkExitCode=3  ;;

      63) DiskChkStatus="Checks are not supported by the image format -- not qcow2 ??" ;;

    esac

  fi

}

## filter for 'ERRORS' that changes in QEMU might throw up and that WE WANT TO IGNORE  (see main settings)

filter_and_flag_qemu_errors () {

  if [[ ! -e "$QemuErrorLog" ]]; then  printColor "\n\n  Internal ERROR:  QemuErrorLog not found.  A qqX re-start may be needed."  
  
  elif [[ $(cat "$QemuErrorLog" 2>/dev/null) ]]; then 

    QemuErrorAlert=1

    if [[ "${QemuErrorFilter[*]}" ]]; then
      for ErrChk in "${QemuErrorFilter[@]}"; do
        if grep -q -s "$ErrChk" "$QemuErrorLog" ; then QemuErrorAlert= ; return ; fi
      done
    fi

    if [[ "${QemuError_VM_Filter[*]}" ]]; then
      for ErrChk in "${QemuError_VM_Filter[@]}"; do
        if grep -q -s "$ErrChk" "$QemuErrorLog" ; then QemuErrorAlert= ; return ; fi
      done
    fi

  else  QemuErrorAlert=
    
  fi

}


function multi_instance_checks {

  MultiInstanceCount="$(pgrep -c -x "qqX")"   # count exact match, ignores sub routines

  if [[ $MultiInstanceCount -gt 1 ]]; then 

    tput sc
    printColor "\n\n  WARNING: more than one instance of qqX appears to be running "  
    printf "\n\n  To prevent cross-linking, this instance or the other instance(s) should be closed \n\n"
    read -rp "  [q] to quit    [enter] to continue  > "   MultiQuit

    [[ $MultiQuit == "q" ]] && exit directly
    tput rc ; tput ed  #  clear back the last lines to sc (set cursor)
    
  fi

  if [[ "$(pgrep quickgui)" ]] ; then

    printColor "\n\n  WARNING: an instance of QUICKGUI appears to be running " 
    printf "\n\n  Both this program and qqX do have an amount of cross-link protection, however note that:"
    printf "\n\n  Stopping an instance shown as running in QuickGUI may stop an instance started in qqX. \n\n"
    read -rp "  [q] to quit    [enter] to continue  > "   MultiQuit

    [[ $MultiQuit == "q" ]] && exit directly

  fi

  # clear .conf settings record from any previous/other session, if no other instances are running
  printf "" > "$ConfClearanceLog"

}


function_delete_Selected_VM () {

  if [[ ! $1 && ! $2 ]]; then

    # Normally: VM_InstanceName="${VM_Conf_File/.conf}"
    printColor "\n\n  Internal Params: VM Name & VM config file (NO PATH) must be given \n\n " 
    sleep 2 ;  return

  else

    if [[ ! -d "$1" ]] || [[ ! -e "$2" ]]; then
       printColor "\n\n  Internal Params: VM Name & VM config file (NO PATH) must be given \n\n " 
      printColor "\n\n  Internal Params: VM Name / VM config file  NOT FOUND  \n\n " 
      sleep 2 ;  return
    fi

    if [[ $(type -p gio 2>/dev/null) ]]; then TrashingAvailable=1 ; else TrashingAvailable= ; fi

    printColor "\n\n  Folder: %s " "$1"
    printColor "  & file: %s  to be deleted?"  "$2"
    printf  "\n\n  To delete a VM, removal of the above folder/file is sufficient."
    printf "\n\n  Select [n] to manually delete, & to possibly retain individual files, using a file manager."
    printf "\n\n  Folder content: \n\n"

    ls "$1"

    if [[ $TrashingAvailable ]]; then 
      printColor "\n\n  [enter] safely move the folder & file to the recoverable trash bin"  
      printf "\n\n  [n] keep   [y] yes, PERMANENTLY, I have back-ups ..."
    else
      printColor "\n\n  [enter] use the file manager to move things the trash bin "
      printf "\n\n  [y] yes, PERMANENTLY, I have back-ups ..."
    fi

    printf "\n\n"
    read -rp "  >  "   Delete_VM_Option

    if [[ $Delete_VM_Option == "y" ]]; then 

      printf "\n\n  Folder & .conf file being deleted ... \n\n"
      rm -f -r "$1"  
      echo
      rm -f "$2"
      echo

    else

      if [[ $TrashingAvailable ]] && [[ $Delete_VM_Option != "n" ]]; then
        printf "\n\n  Moving files to the bin ... \n\n"
        gio trash "$1"
        gio trash "$2"
      else  printf "\n\n  NOT deleted ... \n\n"
      fi  # https://specifications.freedesktop.org/trash-spec/trashspec-latest.html

    fi

    sleep 1.4

    printColor "\n\n  [enter] to return or continue \n\n" 
    read -rp "  > "

    VM_InstanceName=
    VM_Conf_Dir=
    VM_Conf_File=
    SettingsFileAdjusted=1

    refresh_sources_and_load_VM_arrays

  fi

}

read_x86_tiano_vars_list () {

  # current std list
  String="$(grep -A 20 -m 1 'ovmfs=' /usr/bin/quickemu | grep '"')"    

  String="$(tr -cd '[:print:]' <<< "$String")"
  String="${String//'ovmfs=('/}"
  String="${String//','/' '}"

  # shellcheck disable=SC1003 
  String="${String//'\'/' '}"
  String="$(tr -s '[= =]' <<< "$String")"

  # shellcheck disable=SC2206
  Tiano_x86_FilesList=($String)
  Tiano_x86_CodeList=()
  Tiano_x86_VarsList=()

  i=0    
  while [[ "${Tiano_x86_FilesList[i]}" ]]; do Tiano_x86_CodeList+=("${Tiano_x86_FilesList[i]}"); ((i+=2)); done
  i=1    
  while [[ "${Tiano_x86_FilesList[i]}" ]]; do Tiano_x86_VarsList+=("${Tiano_x86_FilesList[i]}"); ((i+=2)); done

}


refresh_tiano_vars () {  

  RtvBack= ; RtvArm=
  read_x86_tiano_vars_list

  if [[ $RunRtvCheck || $RtvManualOnly ]]; then RtvText=1 ; else RtvText= ; fi

  if [[ $RtvText ]]; then

    printColor "\n\n  In cases when distro boot sequences get stuck in unwanted loops or behaviours, this may help:"
    printf "\n\n  Backups will be made, in case you need to revert, as *.fd.old etc \n\n  Your *VMF_VARS.fd file(s) will be reinstalled."
    if [[ "$VM_InstanceName" == *macos* ]]; then 
      printf "\n\n  MacOS refreshes require an internet connection. The small boot drive 'OpenCore.qcow2' is also needed."
      printf "\n\n  For security reasons, these Mac specific files should generally be updated at regular intervals...."
    fi

    if [[ $(ls "$VM_Conf_Dir/$VM_InstanceName/AAVMF"* 2>/dev/null) ]]; then
      RtvArm=1
      if [[ ! $RtvArmFolder ]]; then
        printf  "\n\n  Using Standard Folder '/usr/share/AAVMF' >> Variations may be placed in main settings"
        RtvArmFolder="/usr/share/AAVMF"
      else
        printf  "\n\n  Using Folder '%s' >>  From variation placed in main settings" "$RtvArmFolder"
      fi
    fi 

    printColor  "\n\n  [enter] to continue"
    printf  "  [b] to go back "
    read -rp "  >  "  RtvBack

  fi

  if [[ $RtvBack ]]; then  printf "\n\n  Returning ... " ; sleep 1

  else

    if [[ $RtvArm ]]; then 

      AA_VarsList=("AAVMF_VARS.fd"  "AAVMF32_VARS.fd"  "AAVMF_VARS.ms.fd"  "AAVMF_VARS.snakeoil.fd")

      [[ $RtvText ]] && printf "\n\n  Checking: %s" "${AA_VarsList[*]}"

      for AA_Var in "${AA_VarsList[@]}"; do
        if [[ -e "$VM_Conf_Dir/$VM_InstanceName/$AA_Var" ]]  &&  [[ -e "/usr/share/AAVMF/$AA_Var" ]]; then
          mv "$VM_Conf_Dir/$VM_InstanceName/$AA_Var" "$VM_Conf_Dir/$VM_InstanceName/${AA_Var}.old"
          cp -f "/usr/share/AAVMF/$AA_Var" "$VM_Conf_Dir/$VM_InstanceName/$AA_Var"
          [[ $RtvText ]] && printColor "\n\n  Reset/Installed '%s' "  "$AA_Var"
        fi
      done

    elif [[ "$VM_InstanceName" == *macos* ]]; then

      RtvMacGet="Okay"

      [[ -e "$VM_Conf_Dir/$VM_InstanceName/OpenCore.qcow2" ]] &&  \
      mv "$VM_Conf_Dir/$VM_InstanceName/OpenCore.qcow2" "$VM_Conf_Dir/$VM_InstanceName/OpenCore.qcow2.old"

      [[ -e "$VM_Conf_Dir/$VM_InstanceName/OVMF_CODE.fd" ]] &&  \
      mv "$VM_Conf_Dir/$VM_InstanceName/OVMF_CODE.fd" "$VM_Conf_Dir/$VM_InstanceName/OVMF_CODE.fd.old"

      [[ -e "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS-1920x1080.fd" ]] &&  \
      mv "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS-1920x1080.fd" "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS-1920x1080.fd.old"

      # as per quickget 4.9.2

     [[ $RtvText ]] && printf "\n\n  Checking ..."

      wget -t 3 -T 2 -o "$VM_Conf_Dir/$VM_InstanceName/rtv.log" "https://github.com/kholia/OSX-KVM/raw/master/OVMF_VARS-1920x1080.fd" \
      -O "$VM_Conf_Dir/$VM_InstanceName/OVMF_VARS-1920x1080.fd" || RtvMacGet="Fail"

      [[ $RtvText ]] && printf "....."

      wget -t 3 -T 2 -a "$VM_Conf_Dir/$VM_InstanceName/rtv.log" "https://github.com/kholia/OSX-KVM/raw/master/OVMF_CODE.fd" \
      -O "$VM_Conf_Dir/$VM_InstanceName/OVMF_CODE.fd" || RtvMacGet="Fail"
      
      [[ $RtvText ]] && printf "........ \n\n"

      wget -t 3 -T 2 -a "$VM_Conf_Dir/$VM_InstanceName/rtv.log" "https://github.com/kholia/OSX-KVM/raw/master/OpenCore/OpenCore.qcow2" \
      -O "$VM_Conf_Dir/$VM_InstanceName/OpenCore.qcow2" || RtvMacGet="Fail"

      [[ $RtvText ]] && grep -v '\.\.\.\.\.\.\.' "$VM_Conf_Dir/$VM_InstanceName/rtv.log" 

      echo "$RtvMacGet" > "$VM_Conf_Dir/$VM_InstanceName/rtv.status.log"

      [[ $RtvText ]] && printColor "\n  Update:  %s" "$RtvMacGet"

    else

      i=0 
      while [[ "${Tiano_x86_VarsList[i]}" ]]; do

        x86_VarPath="${Tiano_x86_VarsList[i]}"
        x86_VarPath="${x86_VarPath//'"'/}"

        x86_Var="$(basename "${Tiano_x86_VarsList[i]}")"
        x86_Var="${x86_Var//'"'/}"

        # For reasons unexplained, quickget 4.9.2 and previous go through the whole list from beginning to end,
        # and selects the last available option, not the first. Whatever the rationale was, it's probably best to 
        # leave things as they are. At least for now.  REVIEW 
        # Quickemu should re-install the 'correct' vars file if the current one(s) is(are) removed.  

        if [[ -e "$VM_Conf_Dir/$VM_InstanceName/$x86_Var" ]]; then 
          mv "$VM_Conf_Dir/$VM_InstanceName/$x86_Var" "$VM_Conf_Dir/$VM_InstanceName/${x86_Var}.old"
          [[ $RtvText ]] && printColor "\n\n  Reset '%s' >> Quickemu will now auto-update your VM on its next boot"  "$x86_Var"
        fi

        ((i+=1))
      done

    fi

    date +%s > "$VM_InstanceName/rtv.date.txt"

    if [[ $RtvText ]]; then
      printf "\n\n  [enter] to return \n\n "
      read -rp "  >  "
    fi
    
  fi
}
