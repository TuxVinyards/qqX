#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

# Licence  GPL3   https://www.gnu.org/licenses 

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# https://www.gnu.org/licenses  


# IF CODE IN GENERAL BECOMES USED IN ANY OTHER PROJECT,
# THE GPL3 LICENCE APPLIES & YOU SHOULD SHOW CLEAR ATTRIBUTIONS. 


##  qqX - quickemu quickget X terminal project   

#  A wrapping script for quickemu/quickget  Part of quickemu-mod quickemu-wrap suite of scripts. 
#  @2023/07/12 also forms the base script for qqX - quickemu quickget X terminal project  and may also be named as qqx or qqX

#  This script is based on ffX - the ff(mpeg) X-terminal project - AV processing scripts for ffmpeg   
#  Also copyright (c)  Alex Genovese   https://github.com/TuxVinyards   https://github.com/theffxproject

#  Make sure shell is set during session to decimal separator of dot 

#  If LC_ALL=C changes too much, just set the numeric.  
#  This may upset some input/output filters ....    CAUTION   (see notes in the main settings) 

#  See locale setting discussion:  https://unix.stackexchange.com/a/149129 
#  Also  https://unix.stackexchange.com/questions/62316/why-is-there-no-euro-english-locale?rq=1
#  &   http://www.unicode.org/L2/L2001/01102-POSIX15897.htm   


# https://www.shellcheck.net/wiki/SC1090  SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 


if [[ $AllowMoreLocale ]]; then

  export "LC_NUMERIC=C"
  export "LC_COLLATE=C"

else  export "LC_ALL=C"

fi


if  [[ $NoClear ]]; then 

	printf () {

		# shellcheck disable=SC2199
		# checks for occurence of the clearing pattern within the parameter text, treating the text as a single string

		if [[ "$@" ==  '\033c'* ]]; then

			# shellcheck disable=SC2124
			# see http://www.tldp.org/LDP/abs/html/internalvariables.html#APPREF
			# and http://mywiki.wooledge.org/BashGuide/Parameters#Special_Parameters_and_Variables

			PFtext="$@"
			PFtext=${PFtext//'\033c'/}			# remove all escape clears from the printf instruction
      command echo
      command echo "  ***************************************************************************"
      sleep "$NoClear"
			command printf "$PFtext"
    else

      # let all other printf commands through
      command printf "$@"

    fi

	}

fi


if ! tput -V | grep -q ncurses 2> /dev/null; then
  printf "\n\n  Check for your OS >  \n\n  An 'ncurses' installation should normally be present. Test using 'tput -V' "
  sleep 5
  exit 1
fi

if [[ ! -d "/tmp" ]]; then
  printf "\n\n  Check for your OS >  \n\n  A directory '/tmp' should be present. A symbolic link may be needed. "
  printf "\n\n  See:  https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard"
  sleep 5
  exit 1
fi

##  Check for 'curl' and 'aria2' etc  as is often omitted from quickemu install recipes
#   & where $1 test is true if command line is being used 

if [[ ! $(type -p curl) ]] || [[ ! $(type -p aria2c) ]] || [[ ! $(type -p zsync) ]]; then
  echo
  echo "  You need to install 'curl' & 'aria2' & 'zsync' to run parts of the quickget script ..."
  echo
  if [[ $1 ]]; then exit 1 ; else read -rp "  [enter] to continue > " ; fi
fi

if [[ $1 == "XDG" ]]; then 

  # set xdg flags for now, deal with details after the basic initializing is done

  if [[ -e "$2" ]]; then

    XDG_MimeType="$(mimetype "$2" 2>/dev/null)"
   
    if [[ "$XDG_MimeType" == *'application/x-qemu-disk' ]]; then XDG_MimeType_Valid=1

    else XDG_MimeType_Valid=  ; fi

  fi

  if [[ $XDG_MimeType_Valid ]]; then

    # is a right-click start on a qcow2 disk (set flag for later) 
    XDG_QcowRightClick=1
    shift
    
  elif [[ $2 ]]; then

    # is right click XDG but at this stage needs flagging for later analysis or other type of handling
    XDG_StartVariant=1
    shift

  else

    shift
    # set to $HOME folder and flag to run the VM selector
    cd "$HOME"  || printf "\n\n XDG .desktop starter  >  HOME Folder not found " 
    CurrentFolder="$HOME"
    XDG_GeneralDesktopStart=1

  fi


elif [[ $ModName_qqX ]] && [[ $1 == "--version" || $1 == "-V" ]] ; then  echo "$ModVersion" ; exit 


elif [[ ! $ModName_qqX ]] && [[ "$1" == *'vm' ]]; then  

  # quickemu-wrap only  &  where test [[ $Conf_TriggerFolder ]] will also flag up if the script was .conf target started

  Conf_TriggerFolder="$(dirname "$0")"
  
  CurrentFolder="$(dirname "$2")"

else 

  CurrentFolder="$(pwd)"
  
fi

#  Pick up the SETTINGS file:  If placing the main file in /usr/bin,"
#  then place the settings file as "/$HOME/.qmod_settings, OR if qqX in "/$HOME/.qqX/qqX_settings"

#  For details, see notes at start of the settings file ...

#  Use full quoted path & name if adding in a additional folder to this script or different to these defaults
#  For .conf click starts, the Positional parameters need reading to check the settings file location;
#  this would be expected to be where the specified wrap script is located as a first check


if [[ $ModName_qqX ]]; then SettingsName="qqX_settings"

else SettingsName="qmod_settings" ; fi


if [[ $ModName_qqX ]]; then 

  [[ -e "$HOME/.qqX/qqX_settings" ]] && Q_Mod_SettingsFile="$HOME/.qqX/qqX_settings"

#

elif [[ $Conf_TriggerFolder ]] && [[ -e "$Conf_TriggerFolder/${SettingsName}" ]]; then  

  Q_Mod_SettingsFile="$Conf_TriggerFolder/${SettingsName}"

#

elif [[ -e "$CurrentFolder/${SettingsName}" ]] && [[ "$CurrentFolder" != '/usr'* ]]; then  

  Q_Mod_SettingsFile="$CurrentFolder/${SettingsName}"

elif [[ -e "$CurrentFolder/.${SettingsName}" ]] && [[ "$CurrentFolder" != '/usr'* ]]; then  

  Q_Mod_SettingsFile="$CurrentFolder/.${SettingsName}"

#  

elif [[ -e "$HOME/.qmod_settings" ]] && [[ ! $ModName_qqX ]] ; then  

  Q_Mod_SettingsFile="$HOME/.qmod_settings"

elif [[ -e "$HOME/qmod_settings" ]] && [[ ! $ModName_qqX ]] ; then 

  Q_Mod_SettingsFile="$HOME/qmod_settings"

else  

  Q_Mod_SettingsFile=  

  echo; echo "  No settings file found .... " ; echo ; sleep 2
  
fi


if [[ -e "$Q_Mod_SettingsFile" ]]; then
    
  if [[ $ModName_qqX ]]; then source "$Q_Mod_SettingsFile" ; else source "$Q_Mod_SettingsFile"  QWRAP ; fi

else 

  printf "\n\n  ERROR with settings file detection \n\n  Re-check Installation &/or Installation instructions \n\n" ; sleep 10 ; exit 1
  
fi


# Determine possible XDG folders 

function_xdg_start_folder () {

  #  For a .desktop start, to be run after the settings file has been loaded so that a $Default_VM_Folder can be available
  #  Also can be called (belt & braces) at the other command line $1 trap towards end of script ...  REVIEW 

  if [[ ! $(ls "$HOME/"*.conf 2> /dev/null) ]] && [[ -d "$Default_VM_Folder" ]]; then

    cd "$Default_VM_Folder"  || printf "\n\n XDG .desktop starter  >  Default_VM_Folder not found " 

    CurrentFolder="$Default_VM_Folder"

  else

    cd "$HOME"  || printf "\n\n XDG .desktop starter  >  HOME Folder not found " 

    CurrentFolder="$HOME"

  fi

}


[[ $XDG_GeneralDesktopStart ]] &&  function_xdg_start_folder


if [[ $XDG_QcowRightClick ]]; then

  XDG_QcowRightClick_Conf_Dir="$(dirname "$1")"
  XDG_QcowRightClick_DiskName="$(basename "$1")"
  XDG_QcowRightClick_VM_Dir_Name="$(basename "$XDG_QcowRightClick_Conf_Dir")"

  # .desktop starts tend to open in the $HOME folder even if right clicking somewhwere else

  cd "$XDG_QcowRightClick_Conf_Dir" || printf "\n\n XDG .desktop starter  >  Disk's start Folder not found " 

  cd ..  || printf "\n\n XDG .desktop starter  >  Disk's root Folder not found " 

  CurrentFolder="$XDG_QcowRightClick_Conf_Dir"

fi

