#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154  

qqX_logo_plain() {
  # early loader 
  echo "  _    _   \/   "
  echo " (_|  (_|  /\ "
  echo "   |.   |.    "
}

if  [[ $NoClear ]]; then 
	printf () {
		# shellcheck disable=SC2199
		# checks for occurence of the clearing pattern within the parameter text, treating the text as a single string
		if [[ "$@" ==  '\033c'* ]]; then
			# shellcheck disable=SC2124
			# see http://www.tldp.org/LDP/abs/html/internalvariables.html#APPREF
			# and http://mywiki.wooledge.org/BashGuide/Parameters#Special_Parameters_and_Variables
			PFtext="$@"
			PFtext=${PFtext//'\033c'/}			# remove all escape clears from the printf instruction
      command echo
      command echo "  ***************************************************************************"
      sleep "$NoClear"
			command printf "$PFtext"
    else
      # let all other printf commands through
      command printf "$@"
    fi
	}
else 
	printf () {
		# shellcheck disable=SC2199
		if [[ "$@" ==  '\033c'* ]]; then
      # add belt and braces for differing terminal behaviour eg. konsole
      tput clear
			command printf "$@"
    else
      command printf "$@"
    fi
	}
fi

# Usage needs to be loaded early on, so it can be shown if initial help is required
show_CLI_usage () {

  printf     "\n  Command line Usage"  
  printf     "\n\n  qqX --version  &  qqX --help  as standard"
  printf     "\n\n\n  Plain 'qqX' to start the distro/vm selector menu"    
  printf     "\n\n  Or qqX \"[/path/to/vms-folder/]vm-name.conf\" to start a specific machine."
  printf     "\n\n  To set up an ISO: qqX \"iso_name.iso\" or \"/path/iso_name.iso\" "
  printf     "\n\n  Or analyse a Qcow2 disk: \"qqX disk_name.qcow2\" or \"/path/disk_name.qcow2\" "

  printf     "\n\n\n  Mouse click - Right:"
  printf     "\n\n  On an ISO file and using 'open-with' will open the qqX distro installer."
  printf     "\n\n  On a .qcow2 disk will 'open-with' into the qqX disk analyser."
  printf     "\n\n  Also the .conf and using 'open-with' may also be enabled. See the qqX wiki."

  printf    "\n\n\n  Mouse click - Left:"
  printf     "\n\n  On a .conf file and 'run in terminal' will open directly to the distro's individual menu"
  printf     "\n\n  The first line of the .conf must have been edited to point to qqX instead of quickemu,"   
  printf     "\n\n  eg. #!/usr/bin/quickemu --vm  becomes  #!/usr/bin/qqX --vm  or similar (VM name not needed)" 
  printf     "\n\n  and the .conf file permissions must have been set to executable. See qqX [tune] utiility." 

  printf    "\n\n\n  https://github.com/TuxVinyards/qqX/wiki/Command-line-and-Mouse \n\n"

}

#  Pick up the SETTINGS file 
#  qqX version 1.7 starts on the removal of legacy 'qwrap' code lines and introduces a custom settings file

if [[ ! -f "$HOME/.qqX/qqX_settings" ]]; then 
  printf "\n\n  ERROR with settings file detection "
  printf "\n\n  Re-check Installation &/or Installation instructions \n\n" ; sleep 10 ; exit 1
else
  qqX_SettingsFile="$HOME/.qqX/qqX_settings"
  source "$qqX_SettingsFile" 
  [[ -f "$HOME/.qqX/custom_settings" ]] && source "$HOME/.qqX/custom_settings"
fi

if [[ $AllowMoreLocale ]]; then 
  # Use C.UTF-8  where possible as has more locale https://wiki.archlinux.org/title/Locale
  if  grep -sqi 'C.utf8' <<< "$(locale -a)"; then export "LC_NUMERIC=C.UTF-8" ; export "LC_COLLATE=C.UTF-8"
  else export "LC_NUMERIC=C" ; export "LC_COLLATE=C" ; fi
else
  if  grep -sqi 'C.utf8' <<< "$(locale -a)"; then  export "LC_ALL=C.UTF-8" ;  else export "LC_ALL=C" ; fi
fi


#  Check any MOUSE CLICK or COMMAND LINE parameters and set any initial flags
#  Further processing is done in the 'qqX_api_and_mouse_tidyup' script, after other functions have been loaded

if [[ $RClickShowVars ]]; then echo "1: $*"  ; echo  ; read -r ; fi

if [[ $1 == "--version" || $1 == "-V" ]] ; then  echo "$qqX_Version" ; exit 
elif [[ $1 == "--help" || $1 == "-h" ]] ; then echo; show_CLI_usage ; exit 
fi

if [[ $1 ]]; then RunMouseApiTidy=1 ; else RunMouseApiTidy=
fi

# @ Ver 1.11, the 'XDG' trigger parameter is now not needed and is deprecated
[[ $1 == "XDG" ]] && shift
# --vm is a legacy carry-over from the quickemu api
[[ $1 == "--vm" || $1 == "-vm" ]] && shift
# If starting from the main menu, this will be present from the .desktop launcher but will need removing.
# On right click starts, the '%f' gets auto-replaced by a filename.
[[ $1 == '%f' ]] && shift 


if [[ $RClickShowVars ]]; then echo "2: $*"  ; echo  ; read -r ; fi

# SORT OUT if '$1' is a readable file or drive, what MIME-TYPE it is, and what main folder to CD to.

if [[ -e "$1" ]]; then

  XDG_FileType_Recognised=
  XDG_MimeType_Recognised=
  XDG_MimeType_is_ISO=
  XDG_MimeType_is_QCOW=
  XDG_ISO_Name=
  XDG_RealPathName="$(realpath "$1")"
  XDG_MimeType="$(mimetype "$XDG_RealPathName" 2>/dev/null)"
  CurrentFolder="$(dirname "$XDG_RealPathName")"
  if [[ $RClickShowVars ]]; then echo "RP $XDG_RealPathName  MT $XDG_MimeType" ; echo "CF  $CurrentFolder"  ; echo  ; read -r ; fi

  if [[ "$XDG_MimeType" == *'application/x-qemu-disk' ]]; then 
    XDG_MimeType_is_QCOW=1
    # is a right-click start on a qcow2 disk (flag is set for later)  
    QCOW_RightClick_Dir="$(dirname "$XDG_RealPathName")"
    QCOW_RightClick_DiskName="$(basename "$XDG_RealPathName")"  
    QCOW_RightClick_Conf_Dir="$(dirname "$QCOW_RightClick_Dir")"
    QCOW_RightClick_VM_Dir_Name="$(basename "$QCOW_RightClick_Dir")"
    if [[ $RClickShowVars ]]; then 
      echo "D $QCOW_RightClick_Dir  CD $QCOW_RightClick_Conf_Dir"  
      echo "VDN  $QCOW_RightClick_VM_Dir_Name  N  $QCOW_RightClick_DiskName " ; echo  ; read -r
    fi
    # .desktop starts tend to open in the $HOME folder even if right clicking somewhwere else
    #  standard right-click open-with actions will use the current folder
    cd "$QCOW_RightClick_Conf_Dir" || printf "\n\n XDG .desktop starter  >  Disk's start Folder not found " 
    #cd ..  || printf "\n\n XDG .desktop starter  >  Disk's root Folder not found " 
    CurrentFolder="$QCOW_RightClick_Conf_Dir"

  elif [[ "$XDG_RealPathName" == *'.iso' ]]; then 
    XDG_FileType_Recognised=1
    XDG_ISO_Name="$1"
    if [[ "$XDG_MimeType" == *'application/x-cd-image' || "$XDG_MimeType" == *'application/vnd.efi.iso' ]]; then 
      XDG_MimeType_is_ISO=1 ; XDG_MimeType_Recognised=1
    fi

  elif [[ "$XDG_MimeType" == *'text/plain' ]] || [[ $XDG_RealPathName == *'.conf' ]] ; then 
      # NB .conf files may also be mime sym-links 
    if [[ $XDG_RealPathName == *'.conf' ]] && grep -qs 'guest_os' "$XDG_RealPathName" ; then 
      # then is a conf file open-with and appears to conform to standard quickemu .conf layout
      # (also see api mouse script for qcow checks)
      XDG_RightClick_NON_qqX=
      XDG_RightClick_VM_qqX=1
      VM_Conf_Dir="$(dirname "$XDG_RealPathName")"
      VM_Conf_File="$(basename "$XDG_RealPathName")"
      VM_InstanceName="${VM_Conf_File/'.conf'/}"
      #echo "2: $XDG_RealPathName"  ; echo 
      #echo "R: $XDG_RealPathName"  ; echo 
      #echo "D: $VM_Conf_Dir"  ; echo 
      #echo "C: $VM_Conf_File"  ; echo 
      #echo "N: $VM_InstanceName"  ; echo  ; read
      shift $#
      if [[ $VM_InstanceName ]]; then
        # set to VM folder and flag to run the VM selector
        cd "$VM_Conf_Dir"  || printf "\n\n XDG .desktop starter  >  VM Folder not found " 
        CurrentFolder="$VM_Conf_Dir"
      fi
    else
      XDG_MimeType_is_QCOW=  
      QCOW_RightClick_Conf_Dir=
      echo
      qqX_logo_plain
      echo; echo " $XDG_RealPathName"; echo
      echo " qqX has been associated to open .conf (text) files via the file properties 'open-with' option."
      echo; echo; echo "<<" 
      head -n 20 "$XDG_RealPathName"
      echo ">>" ; echo
      FileLines="$(grep -c ^ "$XDG_RealPathName")"
      printf "\n This current file is plain text only. " 
      [[ $FileLines -gt 20 ]] && printf " File length %s lines \n"  "$FileLines"  &&  TextAll="[a] view full text & quit   "
      echo
      echo " [enter] to run qqX   $TextAll [q]  quit"
      echo
      read -rp " >  "   TextOpener
      echo  
      if [[ $TextOpener == "a" ]]; then  cat "$XDG_RealPathName"; echo; echo " [enter] to quit  "; echo; read -rp " >  "; exit 
      elif [[ $TextOpener == "q" ]]; then exit
      else VM_InstanceName= ; XDG_MimeType_Recognised=1
      fi
    fi
  
  else

    XDG_StartVariant=1
    XDG_MimeType_Recognised=
    XDG_FileType_Recognised=
    XDG_MimeType_is_QCOW=  
    # set to $HOME folder and flag to run the VM selector
    cd "$HOME"  || printf "\n\n XDG .desktop starter  >  HOME Folder not found " 
    CurrentFolder="$HOME"
    
  fi

  if [[ $RClickShowVars ]]; then echo "3: $*"  ; echo  ; read -r ; fi

else  CurrentFolder="$(pwd)"
  
fi

if [[ $RClickShowVars ]]; then echo "4: $*"  ; echo  ; read -r ; fi

# vim:tabstop=2:shiftwidth=2:expandtab