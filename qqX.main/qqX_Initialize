#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154  


qqX_logo_plain() {
  
  # early loader 

  echo "  _    _   \/   "
  echo " (_|  (_|  /\ "
  echo "   |.   |.    "

}


if  [[ $NoClear ]]; then 

	printf () {
		# shellcheck disable=SC2199
		# checks for occurence of the clearing pattern within the parameter text, treating the text as a single string
		if [[ "$@" ==  '\033c'* ]]; then
			# shellcheck disable=SC2124
			# see http://www.tldp.org/LDP/abs/html/internalvariables.html#APPREF
			# and http://mywiki.wooledge.org/BashGuide/Parameters#Special_Parameters_and_Variables
			PFtext="$@"
			PFtext=${PFtext//'\033c'/}			# remove all escape clears from the printf instruction
      command echo
      command echo "  ***************************************************************************"
      sleep "$NoClear"
			command printf "$PFtext"
    else
      # let all other printf commands through
      command printf "$@"
    fi
	}

else 

	printf () {
		# shellcheck disable=SC2199
		if [[ "$@" ==  '\033c'* ]]; then
      # add belt and braces for differing terminal behaviour eg. konsole
      tput clear
			command printf "$@"
    else
      command printf "$@"
    fi
	}

fi


# Usage needs to be loaded early on, so it can be shown if initial help is required
show_CLI_usage () {

  printf     "\n  Command line Usage"  
  printf     "\n\n  qqX --version  &  qqX --help  as standard"
  printf     "\n\n\n  Plain 'qqX' to start the distro/vm selector menu"    
  printf     "\n\n  Or qqX --vm  [path/to/vms-folder/]vm-name.conf to start something specific."
  printf     "\n\n  To set up an ISO: 'qqX XDG iso_name.iso' or /path/iso_name.iso"

  printf     "\n\n\n  Mouse click - Right:"
  printf     "\n\n  On an ISO file and using 'open-with' will open the qqX distro installer."
  printf     "\n\n  On a .qcow2 disk will 'open-with' into the qqX disk analyser."
  printf     "\n\n  Also the .conf and using 'open-with' may also be enabled. See the qqX wiki."

  printf    "\n\n\n  Mouse click - Left:"
  printf     "\n\n  On a .conf file and 'run in terminal' will open directly to the distro's individual menu"
  printf     "\n\n  The first line of the .conf must have been edited to point to qqX instead of quickemu,"   
  printf     "\n\n  eg. #!/usr/bin/quickemu --vm  becomes  #!/usr/bin/qqX --vm  or similar (VM name not needed)" 
  printf     "\n\n  and the .conf file permissions must have been set to executable. See qqX [tune] utiility." 

  printf    "\n\n\n  https://github.com/TuxVinyards/qqX/wiki/Command-line-and-Mouse \n\n"

}

#  Check any MOUSE CLICK or COMMAND LINE parameters and set any initial flags
#  Further processing is done in the 'qqX_api_and_mouse_tidyup' script, after other functions have been loaded

# echo "$@"  ; echo  ; read

if [[ $1 ]]; then RunMouseApiTidy=1 ; else RunMouseApiTidy= ; fi

if [[ $1 == "XDG" ]]; then 

  [[ $2 == "%f" ]] && shift

  if [[ -e "$2" ]]; then

    XDG_FileType_Recognised=
    XDG_MimeType_Recognised=
    XDG_MimeType_is_ISO=
    XDG_MimeType_is_QCOW=
    XDG_ISO_Name=
    XDG_MimeType="$(mimetype "$2" 2>/dev/null)"
    CurrentFolder="$(dirname "$2")"
   
    if [[ "$XDG_MimeType" == *'application/x-qemu-disk' ]]; then XDG_MimeType_is_QCOW=1

    elif [[ "$XDG_MimeType" == *'application/x-cd-image' || "$XDG_MimeType" == *'application/vnd.efi.iso' ]] && [[ "$2" == *'.iso' ]]; then 

      XDG_MimeType_is_ISO=1
      XDG_ISO_Name="$2"
      XDG_MimeType_Recognised=1

    elif [[ "$2" == *'.iso' ]]; then 

      XDG_MimeType_is_ISO=
      XDG_ISO_Name="$2"
      XDG_FileType_Recognised=1

    elif [[ "$XDG_MimeType" == *'text/plain' ]] &&  grep -qs 'guest_os' "$2" ; then 
      # then is a conf file open-with and appears to conform to standard quickemu .conf layout
      QCOW_RightClick=
      QCOW_RightClick_NON_qqX=
      QCOW_RightClick_VM_qqX=1
      VM_Conf_Dir="$(dirname "$2")"
      [[ "$VM_Conf_Dir" == '.' ]] && VM_Conf_Dir="$(pwd)"
      VM_Conf_File="$(basename "$2")"
      VM_InstanceName="${VM_Conf_File/'.conf'/}"
      cd "$VM_Conf_Dir" || ExtraFolderError=1
      shift $#

    elif [[ "$XDG_MimeType" == *'text/plain' ]] ; then
    
      QCOW_RightClick= 
      XDG_MimeType_is_QCOW=  
      QCOW_RightClick_Conf_Dir=
      echo
      qqX_logo_plain
      echo; echo " $2"; echo
      echo " qqX has been associated to open .conf (text) files via the file properties 'open-with' option."
      echo; echo; echo "<<" 
      head -n 20 "$2"
      echo ">>" ; echo
      FileLines="$(grep -c ^ "$2")"
      printf "\n This current file is plain text only. " 
      [[ $FileLines -gt 20 ]] && printf " File length %s lines \n"  "$FileLines"  &&  TextAll="[a] view full text & quit   "
      echo
      echo " [enter] to run qqX   $TextAll [q]  quit"
      echo
      read -rp " >  "   ConfOpener
      echo  

      if [[ $ConfOpener == "a" ]]; then  cat "$2"; echo; echo " [enter] to quit  "; echo; read -rp " >  "; exit 
      elif [[ $ConfOpener == "q" ]]; then exit
      else VM_InstanceName= ; XDG_MimeType_Recognised=1
      fi

    else

      XDG_StartVariant=1
      XDG_MimeType_Recognised=
      XDG_FileType_Recognised=
      XDG_MimeType_is_QCOW=  
      
    fi

  fi

  if [[ $XDG_MimeType_is_QCOW ]]; then

    # is a right-click start on a qcow2 disk (flag is set for later)  
    shift
    
  elif [[ $2 ]]; then

    # is right click XDG but at this stage needs flagging for later analysis or other type of handling 
    XDG_StartVariant=1
    XDG_MimeType_is_QCOW= 
    shift

  else

    shift
    # set to $HOME folder and flag to run the VM selector
    cd "$HOME"  || printf "\n\n XDG .desktop starter  >  HOME Folder not found " 
    CurrentFolder="$HOME"
    XDG_GeneralDesktopStart=1

  fi

elif [[ $1 == "--version" || $1 == "-V" ]] ; then  echo "$qqX_Version" ; exit 

elif [[ $1 == "--help" || $1 == "-h" ]] ; then echo; show_CLI_usage ; exit 

elif [[ "$1" == *'vm' ]] && [[ $2 == *'.conf' ]]; then  

  # conforms to  -vm | --vm  file.conf
  VM_Conf_Dir="$(dirname "$2")"
  [[ "$VM_Conf_Dir" == '.' ]] && VM_Conf_Dir="$(pwd)"
  VM_Conf_File="$(basename "$2")"
  VM_InstanceName="${VM_Conf_File/'.conf'/}"
  shift $#

else 

  CurrentFolder="$(pwd)"
  
fi


#  Pick up the SETTINGS file 
#  qqX version 1.7 starts on the removal of legacy 'qwrap' code lines and introduces a custom settings file

if [[ ! -f "$HOME/.qqX/qqX_settings" ]]; then 

  printf "\n\n  ERROR with settings file detection \n\n  Re-check Installation &/or Installation instructions \n\n" ; sleep 10 ; exit 1

else

  qqX_SettingsFile="$HOME/.qqX/qqX_settings"
  source "$qqX_SettingsFile" 
  [[ -f "$HOME/.qqX/custom_settings" ]] && source "$HOME/.qqX/custom_settings"

fi

if [[ $AllowMoreLocale ]]; then 
  # Use C.UTF-8  where possible as has more locale https://wiki.archlinux.org/title/Locale
  if  grep -sqi 'C.utf8' <<< "$(locale -a)"; then export "LC_NUMERIC=C.UTF-8" ; export "LC_COLLATE=C.UTF-8"
  else export "LC_NUMERIC=C" ; export "LC_COLLATE=C" ; fi
else
  if  grep -sqi 'C.utf8' <<< "$(locale -a)"; then  export "LC_ALL=C.UTF-8" ;  else export "LC_ALL=C" ; fi
fi

if [[ $XDG_MimeType_is_QCOW ]]; then

  QCOW_RightClick_Conf_Dir="$(dirname "$1")"
  [[ "$QCOW_RightClick_Conf_Dir" == '.' ]] && QCOW_RightClick_Conf_Dir="$(pwd)"

  QCOW_RightClick_DiskName="$(basename "$1")"  
  
  QCOW_RightClick_VM_Dir_Name="$(basename "$QCOW_RightClick_Conf_Dir")"
 
  # .desktop starts tend to open in the $HOME folder even if right clicking somewhwere else
  #  standard right-click open-with actions will use the current folder

  cd "$QCOW_RightClick_Conf_Dir" || printf "\n\n XDG .desktop starter  >  Disk's start Folder not found " 

  cd ..  || printf "\n\n XDG .desktop starter  >  Disk's root Folder not found " 

  CurrentFolder="$QCOW_RightClick_Conf_Dir"

fi

