#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/qqxproject
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:
#   Licence  GPL3   https://www.gnu.org/licenses
##  qqX - quickemu quickget X terminal project

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154

function  main_menu_actions {

  if [[ $MainMenuChoice == "h" ]] ; then

    show_qqX_general_help

  elif [[ $MainMenuChoice == "tx" ]]; then

    # https://en.wikipedia.org/wiki/List_of_ISO_639_language_codes   Those two char that have been assigned:

    Iso_639_1_List="aa ab ae af ak am an ar as av ay az ba be bg bi bm bn bo br bs ca ce ch co cr cs cu cv cy da de dv dz ee el en eo es et eu "
    Iso_639_1_List+="fa ff fi fj fo fr fy ga gd gl gn gu gv ha he hi ho hr ht hu hy hz ia id ie ig ii ik io is it iu ja jv ka kg ki kj kk kl km "
    Iso_639_1_List+="kn ko kr ks ku kv kw ky la lb lg li ln lo lt lu lv mg mh mi mk ml mn mr ms mt my na nb nd ne ng nl nn no nr nv ny oc oj om "
    Iso_639_1_List+="or os pa pi pl ps pt qu rm rn ro ru rw sa sc sd se sg si sk sl sm sn so sq sr ss st su sv sw ta te tg th ti tk tl tn to tr "
    Iso_639_1_List+="ts tt tw ty ug uk ur uz ve vi vo wa wo xh yi yo za zh zu"

    TxLang="it"
    if grep -qs  "${LANG:0:2}" <<< "$Iso_639_1_List"; then TxLang="${LANG:0:2}"
    elif grep -qs  "${GDM_LANG:0:2}" <<< "$Iso_639_1_List"; then TxLang="${GDM_LANG:0:2}"
    elif grep -qs  "${LANGUAGE:0:2}" <<< "$Iso_639_1_List"; then TxLang="${LANGUAGE:0:2}"
    fi
    [[ $TxLang == "en" ]] && TxLang="it"
    # Where caps vars are from std env, hopefully without creeping-in conflict from Quickemu vars system ...
    # and where TxLang must be non-original (non en) or Google complains

    printf "\n\n  For General notes on translation see: \n\n  https://qqxproject.org/docs/Translation"
    printf "\n\n  Google Chrome or Microsoft Edge are recommended"
    printf "\n\n  Or https://translate.google.com in Firefox and others"
    printColor "\n\n  [enter] to attempt Google auto-translate of settings using %s " "$WebBrowser"
    printColor "\n\n  [t] open 'translate.google' in %s  [T] open qqX translation notes  [b] to go back "  "$WebBrowser"
    printf "\n\n  This link may need pasting to the webpages tab:"
    printf " \n\n  https://github.com/qqxproject/qqX/blob/main/qqX_settings \n\n"
    read -rp "  >  "  TxSetCode
    if [[ ! $TxSetCode ]]; then
      printf "\n  Opening Browser ... \n\n"
      (nohup &> /dev/null  "$WebBrowser"  \
      "https://github-com.translate.goog/qqxproject/qqX/blob/main/qqX_settings?_x_tr_sl=en&_x_tr_tl=${TxLang}&_x_tr_hl=${TxLang}&_x_tr_pto=wapp"  & ) \
      || web_browser_not_found_message
      sleep 1
    elif [[ $TxSetCode == "t" ]]; then
      printf "\n  Opening Google Translate in Browser ... \n\n"
      (nohup &> /dev/null  "$WebBrowser" "https://translate.google.com"  & ) || web_browser_not_found_message
      sleep 1
    elif [[ $TxSetCode == "T" ]]; then
      printf "\n  Opening qqX Translation notes in Browser ... \n\n"
      (nohup &> /dev/null  "$WebBrowser" "https://qqxproject.org/docs/Translation"  & ) || web_browser_not_found_message
      sleep 1
    else
      TxSetCode= ; return
    fi

  elif [[ $MainMenuChoice == "w" ]]; then

    printf "\n\n  HomePage = %s" "$DistroHomePage"
    printColor "\n\n  [enter] to load in browser  [b] to go back \n\n"
    read -rp "  >  "  LoadHomePage
    if [[ ! $LoadHomePage ]]; then
      printf "\n  Opening Browser ... \n\n"
      (nohup &> /dev/null  "$WebBrowser"  "$DistroHomePage"  & ) || web_browser_not_found_message
      sleep 1
    else
      LoadHomePage= ; return
    fi

  elif [[ $MainMenuChoice == "del" ]]; then

    function_delete_Selected_VM  "$VM_InstanceName"  "$VM_Conf_File"
    return

  elif [[ $MainMenuChoice == "mv" || $MainMenuChoice == "rn" || $MainMenuChoice == "ln" ]]; then

    move_rename_Selected_VM  "$VM_InstanceName"  "$VM_Conf_File"
    return

  elif [[ $MainMenuChoice == "hdw" ]] ; then

    AddHW_Record=

    if [[ -e "$QemuArgsFile" ]]; then

      printf "\033c"
      if [[ -e "$QemuVirtHardwareRecord" ]]; then printf "\n\n  Existing Record: \n\n"; cat "$QemuVirtHardwareRecord"; fi
      printf "\n\n  Current Args / Qemu Virtual Hardware \n\n"
      cat "$QemuArgsFile"

      if [[ -e "$QemuVirtHardwareRecord" ]]; then printColor "  Copy Current Args onto the end of existing record list?\n\n"
      else printColor "  Create new Virtual Hardware Record using Current Args?\n\n"
      fi

      read -rp "  [enter] to continue  [b] to go back"  AddHW_Record

      [[ $AddHW_Record != "b" ]] && cat "$QemuArgsFile" >> "$QemuVirtHardwareRecord"

    else

      printf "\n\n  No Args log found. The virtual machine launch process must be run first. \n\n"
      printf "\n\n  The 'VerboseArgs' option may be used, which will allow checking.  \n\n"

    fi

  elif [[ $MainMenuChoice == "u" ]] ; then

    if [[ ! $ShowUtilsMenu ]]; then ShowUtilsMenu=1 ; else ShowUtilsMenu= ; fi

  elif [[ $MainMenuChoice == "set" ]] ; then  qqX_edit_settings

  elif [[ $MainMenuChoice == "tmc" ]] ; then

    find_texteditor
    if [[ $TextEditor ]] && [[ ! $(type -p "$TextEditor") ]]; then texteditor_not_found_message
    else
      if [[  -e  "$HOME/.qqX/qqX_term.conf" ]]; then
        printColor "\n\n  Follow up by running the latest release installer for changes to the Terminal config to take effect"
        printf  "\n\n  [enter] to edit or view \n\n"
        read -rp "  >  "
        (nohup &> /dev/null   "$TextEditor" "$HOME/.qqX/qqX_term.conf"  & )  || texteditor_not_found_message
      else
        printColor "\n\n  Read the installer notes and run the latest release installer to create a Terminal config ..."
        printf  "\n\n  [enter] to return \n\n"
        read -rp "  >  "
      fi
    fi

  elif [[ $MainMenuChoice == "rtv" ]] ; then RunRtvCheck=1 ; refresh_tiano_vars ; RunRtvCheck=

  elif [[ ${MainMenuChoice^^} == "FS" ]] ; then  CodingHotSwap="FreeSpirit" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays
  elif [[ ${MainMenuChoice^^} == "FB" ]] ; then  CodingHotSwap="FreeBird" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays
  elif [[ ${MainMenuChoice^^} == "HB" ]] ; then  CodingHotSwap="HomeBird" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays
  elif [[ "${MainMenuChoice,,}" == ech* ]] ; then  CodingHotSwap="Echo" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays
  elif [[ "${MainMenuChoice,,}" == sys* ]] ; then  CodingHotSwap="System" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays
  elif [[ "${MainMenuChoice,,}" == cust* ]] ; then  CodingHotSwap="Custom" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays
  elif [[ "${MainMenuChoice,,}" == dev* ]] ; then  CodingHotSwap="Dev" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; refresh_sources_and_load_VM_arrays

  elif [[ $MainMenuChoice == "ql" ]] ; then

    QL_LogView=
    printf "\n\n"
    if [[ $(cat "$QemuErrorLog" 2>/dev/null) ]] ; then
      cat "$QemuErrorLog"
      printf "\n\n  This log gets cleared when you run the VM, or it can be cleared now.  For permanent adjustments, see notes in the main settings."
    else  printf "  No qemu errors were present on the last VM load ...  ?? "
    fi

    #  Avoid any "[W] permanent" type option because it could overwrite something manually placed in the .conf file
    printf "\n\n  Also try [rtv] from the utils menu which may help if the distro boot sequence is causing problems"
    printColor "\n\n  [enter] to return  [c] clear & return  [w] hide non-critical warnings, for this VM session \n\n"

    read -rp "  >  "  QL_LogView

    [[ $QL_LogView  == "w" ]] && QemuError_VM_Filter+=("warning" "deprecated" "info:" "usb_desc_get_descriptor") && QemuErrorAlert=
    [[ $QL_LogView  == "c" ]] && printf "" > "$QemuErrorLog" && QemuErrorAlert=

  elif [[ $MainMenuChoice == "f" ]] ; then

    printf "\n\n  Switching to view VM files in File Manager in new window ...."
    printColor "\n\n  [enter] to open File Manager  [c] to cancel \n\n"
    read -rp "  >  "  CancelFM
    if [[ ! $CancelFM ]]; then
      (nohup &> /dev/null  "$FileManager"  "$VM_Conf_Dir/$VM_InstanceName"  & ) || file_manager_not_found_message
      DiskStorageChanges=1 ; FileManager_Run=1
      sleep 2
      printf "\n\n  [enter] to refresh and continue \n\n"
      read -rp "  >  "
    fi

  elif [[ $MainMenuChoice == "qqf" ]] ; then  qcow2_filemanagement_launcher qqf-info

  elif [[ $MainMenuChoice == "qf" ]] ; then  qcow2_filemanagement_launcher

  elif [[ $MainMenuChoice == "dl" ]] ; then  download_new_release ; return

  elif [[ $MainMenuChoice == "conf" ]] ; then  qqX_edit_settings  conf

  elif [[ $MainMenuChoice == "ce" ]] ; then qqX_edit_settings  custom

  elif [[ $MainMenuChoice == "cc" ]] ; then custom_boot_file create

  elif [[ $MainMenuChoice == "cd" ]] ; then custom_boot_file delete

  elif [[ $MainMenuChoice == "iso" ]] ; then iso_select_mount_and_boot

  elif [[ $MainMenuChoice == "fb" || $MainMenuChoice == "bm" ]] ; then

    if [[ $BootStyle == "fast" ]]; then  BootStyle="slow" ; BootStyleMsg="slow"
    elif [[ $BootStyle == "slow" ]]; then  BootStyle="fast" ; BootStyleMsg="fast"
    fi

  elif [[ $MainMenuChoice == "qd" ]] ; then
    printf "\n  Opening Browser ... \n\n"
    (nohup &> /dev/null  "$WebBrowser"  "https://qemu.readthedocs.io"  & ) || web_browser_not_found_message
    sleep 1
  elif [[ $MainMenuChoice == "qw" ]] ; then
    printf "\n  Opening Browser ... \n\n"
    (nohup &> /dev/null  "$WebBrowser"  "https://qqxproject.org"  & ) || web_browser_not_found_message
    sleep 1
  elif [[ $MainMenuChoice == "qW" ]] ; then
    printf "\n  Opening Browser ... \n\n"
    (nohup &> /dev/null  "$WebBrowser"  "https://qqxproject.org/docs/Guides/Windows-OS"  & ) || web_browser_not_found_message
    sleep 1

  elif [[ $MainMenuChoice == "tune" ]] ; then function_config_tune_up "$VM_Conf_Dir/$VM_Conf_File"

  elif [[ $MainMenuChoice == "gt" ]] ; then

    # also see "vm" option
    source "$ConfClearanceLog"
    # no need to reload the arrays
    ByPass_VM_Array_Loader=1
    # but run the selector
    ByPass_VM_Array_Selector=
    # signal to run the VM selection initializer with absent VM_InstanceName and return to qqX main loop
    VM_InstanceName=
    # run the clearance sections but signal to go straight to the downloads menu, no need to load the selector one.
    Run_GT=1
    return

  elif [[ $MainMenuChoice == "z" ]] ; then

    if [[ $Zsync_Updatable_ISO && $Zsync_OS_Name && $Zsync_Release_Name ]]; then
      printf "\n\n  Updating the live boot development iso with any changes"
      # check name can be found for updates
      if ! grep -qs "  ${Zsync_OS_Name})" "$QG_SourcePath" ; then
        printColor "\n\n  Naming ERROR  >  Can't find '%s' as a Quickget listed distro?  Try a re-install? \n\n\n" "$Zsync_OS_Name"
      else
        if [[ $LastZsync -lt 360000 ]]; then
          printColor "\n\n  Normally only takes a few moments to compare & synchronize"
          printf " - Last updated only %d hrs ago"  "$((LastZsync/3600))"
        fi
        if [[ $LastZsync -gt 2000000 ]]; then
          printColor "\n\n  May take a while to compare & synchronize"
          printColor " - last updated over %d days ago"  "$((LastZsync/86400))"
          printf "\n\n  Deletion and re-download can sometimes be quicker ...."
        fi
        printf "\n\n  [enter] to continue "
        if [[ $LastZsync -gt 3600000 ]]; then printColor "  (out-of-date)"
        elif [[ $New_Zsync_SHA ]] && [[ $(cat "$VM_InstanceName/dl-sha.txt") ]]; then
          Curr_Zsync_SHA="$(awk '{print $1}' "$VM_InstanceName/dl-sha.txt")"
          if [[ ${Curr_Zsync_SHA// /} == "${New_Zsync_SHA// /}" ]]; then printf "  (up-to-date)"; else printf "  (update available)"
          fi
        fi
      fi
      printf "  [b] to go back \n\n"
      read -rp "  >  "  ZsyncRemind
      if [[ $ZsyncRemind ]]; then ZsyncRemind=
      else MainMenuZsync=1 ; function_quick_get_wrap ; refresh_conf_vars_and_values
      fi
    else
      printColor "\n\n  %s is not being recognised as Zsync updatable Release"   "$VM_InstanceName"
      printf "\n\n  Note: only daily-live iso's are zsync updateable ..."
      printf "\n\n  [enter] to return \n\n"
      read -rp "  >  "
    fi

  elif [[ $MainMenuChoice == "m" ]] ; then KVM_MSR_selector_LoadHelp=1 ; select_msr_config

  elif [[ $MainMenuChoice == "gl" ]] ; then

    if [[ $qqX_GL_Mode == "on" ]] ; then qqX_GL_Mode="off"
    elif [[ $qqX_GL_Mode == "off" ]] ; then qqX_GL_Mode="on"
    fi

  elif [[ $MainMenuChoice == "C" ]] ; then

    if [[ $ShowCustomBootStyle ]]; then  ForceCustomBootStyle="hide" ; else  ForceCustomBootStyle="show" ; fi
    MainMenuChoice=

  elif [[ $MainMenuChoice == "c" ]] ; then

    printf "\n\n"
    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then  show_msg_pid_found
    else
      UseCustomBootArgs=1
      eval quickemu "-vm $VM_Conf_File --vm_boot"
      vm_pid_kill_menu
    fi

  elif [[ $MainMenuChoice == "g" ]] ; then

    printf "\n\n"
    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then show_msg_pid_found
    else
      check_vm_nbd_boot_connected || return
      eval quickemu "-vm $VM_Conf_File --vm_boot --display gtk"
      vm_pid_kill_menu
    fi

  elif [[ $MainMenuChoice == "d" ]] || [[ $MainMenuChoice == "df" ]] ; then

    printf "\n\n"
    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then show_msg_pid_found
    elif ! grep -sqi sdl <<< "$(qemu-system-x86_64 -display help)" ; then
      printColor "\n\n  SDL cannot be found:"
      printf "\n\n  OpenSUSE distros lack -official- support for 'qemu-ui-sdl' "
      printf "\n\n  See the installation pdf/wiki for more details"
      printf "\n\n  Community packages might be available for different distros."
      printf "\n\n  [enter] to return \n\n"
      read -rp "  >  "
    else
      check_vm_nbd_boot_connected || return
      if [[ $MainMenuChoice == "df"  ]]; then
        if [[ "$SDL_ScreenSize_Cmd" == *width* ]]; then  eval quickemu "-vm $VM_Conf_File --vm_boot --display sdl $SDL_ScreenSize_Cmd97  $Extra_QE_Params"
        else eval quickemu "-vm $VM_Conf_File --vm_boot --display sdl --screenpct 97  $Extra_QE_Params"
        fi
      else  eval quickemu "-vm $VM_Conf_File --vm_boot --display sdl $SDL_ScreenSize_Cmd $Extra_QE_Params"
      fi
      [[ $InstancePID ]] && printf "\n  SDL: Use guest based display resize. Avoid resizing with the host mouse ...\n\n"
      vm_pid_kill_menu
    fi

  elif  [[ $MainMenuChoice == "s" ]] || [[ $MainMenuChoice == "sf" ]] ; then

    printf "\n\n"
    if [[ -e "$VM_InstanceName/${VM_InstanceName}.pid" ]]; then show_msg_pid_found
    else
      check_vm_nbd_boot_connected || return
      if [[ $HeadlessCmd ]]; then  eval quickemu "-vm $VM_Conf_File --vm_boot $HeadlessCmd  $Extra_QE_Params"
      elif [[ $MainMenuChoice == "sf" ]]; then  eval quickemu "-vm $VM_Conf_File --vm_boot --display spice --fullscreen  $Extra_QE_Params"
      else  eval quickemu "-vm $VM_Conf_File --vm_boot --display spice  $Extra_QE_Params"
      fi
      #  headless only runs in Spice
      #  https://qemu.readthedocs.io/en/latest/system/invocation.html#hxtool-3
      [[ $P_Kill_WaitSecs  -gt 1 ]] && P_Kill_WaitSecs="$(bc <<< "scale=0; ($P_Kill_WaitSecs+1.5)/2" 2>/dev/null)"
      vm_pid_kill_menu
    fi

  elif  [[ $MainMenuChoice == "q" ]] ; then

    tput cnorm ; echo ; sleep 0.3 ; exit directly

  elif  [[ $MainMenuChoice == "i" ]] ; then

    drives_and_snapshots  info

    if [[ $LiveBoot ]]; then
      printColor "\n  Live Boot Only:  Main Drive is only minimal in size at this stage. "
      printf "\n\n  See [conf] and [disk] utils, from the main menu, for more details."
    else
      printf   "\n  VIRTUAL DISK SIZE is normally larger than the actual size occupied but combined CoW"
      printf "\n\n  and snapshot processes can sometimes make the contents appear to exceed that stated."
      printf "\n\n  Snapshot deletion will reduce the occupied space but empty data can create a"
      printf "\n\n  FILE LENGTH disparity. Excessive size differences may indicate a need to tidy and compress"
      printf "\n\n  whilst small differences may be ignored and will later become self adjusted ..."
      printColor "\n\n  Use the qqX disk utility to resize and tidy."
    fi
    if [[ $SharedDriveArgs || $SecondDriveArgs ]]; then
      [[ ! $LiveBoot ]] && printColor "\n\n  Scroll to View "
      printf "\n\n  [enter] to return to menu \n\n"
    else printColor "\n\n  [enter] to return to menu \n\n"
    fi
    read -rp "  >  "

  elif  [[ $MainMenuChoice == "disk" ]] ; then

    DiskManage=
    while true; do
      manage_and_repair_disks
      if [[ $DiskManage == "b" ]]; then
        DiskManage=
        break
      fi
    done

  elif  [[ $MainMenuChoice == "sl" ]] ; then

    drives_and_snapshots

    if [[ $SharedDriveArgs && $SecondDriveArgs ]]; then
      printColor "\n\n  Scroll to View " ; printf "\n\n  [enter] to return to menu \n\n"
    else printColor "  [enter] to return to menu \n\n"
    fi
    read -rp "  >  "

  elif  [[ $MainMenuChoice == "sc" ]] ; then

    drives_and_snapshots  select

    printColor "\n\n  [enter] Create snap with date.time title "
    printf "  [text input] Create with text descriptor   [b] back to main menu "
    SnapTitle= ; scReturn=
    printf "\n\n"
    read -rp "  >  "  SnapTitle
    printf "\n\n"
    [[ ! $SnapTitle ]] && SnapTitle="$(date +%b%d.%H.%M)"
    if [[ $SnapTitle != "b" ]]; then
      # remove spaces, make title dot separated, as easier to IFS
      SnapTitle="${SnapTitle// /.}"
      "$QEMU_IMG" snapshot  -c "$SnapTitle" "$Selected_Drive"
      "$QEMU_IMG" info "$Selected_Drive"
      DiskStorageChanges=1
      printf "\n\n  Drive Updated ..."
      printColor "\n\n  [enter] to return to menu"
      printf "   [sd] delete older snaps \n\n "
      read -rp "  >  "  scReturn
      if [[ $scReturn ]]; then MainMenuChoicePreset="sd" ; Selected_DrivePreset=1
      else MainMenuChoicePreset= ; Selected_DrivePreset=
      fi
    fi

  elif  [[ $MainMenuChoice == "sd" ]] ; then

    drives_and_snapshots  select
    qqX_snapshot_delete

  elif  [[ $MainMenuChoice == "sa" ]] ; then

    drives_and_snapshots select
    SnapNumber=

    printColor "\n\n  Give number of snapshot to use  [enter] to return to menu "
    printf "\n\n"
    read -rp "  >  "  SnapNumber
    printf "\n\n"

    if [[ $SnapNumber ]]; then

      "$QEMU_IMG" snapshot -q -a "$SnapNumber" "$Selected_Drive"

      printf "\n\n  May take a moment .... \n\n"
      printColor "\n\n  Snapshot %s has been applied. \n\n"  "$SnapNumber "

    fi

  elif [[ $MainMenuChoice == "2c" || $MainMenuChoice == "3c" ]] ; then

    create_new_drives

  elif [[ $MainMenuChoice == "2d" ]]; then

    function_delete_SecondDrive

  elif [[ $MainMenuChoice == "3m" ]]; then

    if [[ ! -e $SharedDrive ]]; then
      printColor "\n\n  ERROR: A Shared drive has not been set up or created"
    else
      if [[ $SharedDrive_Mount || $SharedDriveArgs ]]; then
        SharedDrive_Mount=
        SharedDrive_Conf="no-shared"
        printColor "\n\n  The Shared drive has been UN mounted"
      else
        SharedDrive_Conf=
        SharedDrive_Mount=1
        printColor "\n\n  The Shared drive has been mounted"
        if [[ $LiveBoot ]]; then
          printf "\n\n  CAUTION: if intending to install from a Live ISO,"
          printf "\n\n  certain distro installers may not be clear about which drive is being used."
        fi
      fi
      set_drive_paths
    fi
    printf "\n\n  [enter] to return \n\n"
    read -rp "  >  "

  elif [[ $MainMenuChoice == "v" ]] ; then

    if [[ $VerboseArgs ]]; then VerboseArgs= ; else VerboseArgs=1 ; fi

  elif [[ $MainMenuChoice == "vm" ]] ; then

    # also see "gt" option
    source "$ConfClearanceLog"
    # no need to reload the arrays
    ByPass_VM_Array_Loader=1
    # but run the selector
    ByPass_VM_Array_Selector=
    # signal to run the selector with absent VM_InstanceName and return to qqX main loop
    VM_InstanceName= ; VM_Conf_Dir= ; VM_Conf_File= ; VM_Selection= ; VM_Selection_Overide=
    return

  elif [[ $MainMenuChoice == "xa" ]] ; then

    MenuXA=
    MenuXA_Correct=

    printf     "\n\n  Format = grouped & with space separated elements "
    printf     "\n\n  eg.  -device  tpm-tis,tpmdev=tpm0 "

    [[ $ExtraSetArgs ]] && printf  "\n\n  Settings file Extra Args:  %s"  "$ExtraSetArgs"
    [[ ! $ExtraArgs ]] && printf  "\n\n  No Extra Args are present"

    printColor "\n\n  Give extra QEMU arguments to add or to add further, or [enter] to continue as is"

    if [[ $ExtraArgs ]] && [[ "$ExtraArgs" != "$ExtraSetArgs" ]]; then
      printf  "\n\n  Menu Added Extra Args:  %s"  "$ExtraArgs"
      if [[ $ExtraSetArgs ]]; then printf "\n\n  [r] reset back to Set Args only " ; else printf "\n\n  [r] remove the Extra Args " ; fi
    fi

    printf "\n\n"
    read -rp "  > "  MenuXA

    if [[ $MenuXA && $MenuXA != "r" ]]; then
      printf "\n\n  %s %s"  "$ExtraArgs" " $MenuXA"
      printf "\n\n  Is this correct y/n ? \n\n"
      read -rp "  >  "  MenuXA_Correct
    fi

    if [[ $MenuXA_Correct == "n" ]]; then printColor "\n\n  Ignoring the entered Qemu Args \n\n" ; sleep 2
    elif [[ $MenuXA == "r" ]]; then printColor "\n\n  Resetting \n\n" ; ExtraArgs="$ExtraSetArgs" ; sleep 1.5
    elif [[ $MenuXA ]]; then  ExtraArgs="$ExtraArgs $MenuXA" ; printColor "\n\n  Added \n\n" ; sleep 1.5
    else  printColor "\n\n  NOT changed \n\n" ; sleep 1.5
    fi

    printf "\033c\n\n"

  else

    # the [enter] to refresh option with 'rq' as hidden quiet
    ShowUtilsMenu=
    VM_ExecBoot=
    refresh_and_load_quickemu_sources
    refresh_conf_vars_and_values
    ConfSettingsAdjusted=1

  fi

  [[ $MainMenuChoice != "u" ]] && ShowUtilsMenu=
  VM_ExecBoot=

}


