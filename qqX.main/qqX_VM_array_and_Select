#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

#   Licence  GPL3   https://www.gnu.org/licenses 

##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:

# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154  


function_VM_array_ADD_confs () {

  ## Adds to VM array & lists, if submitted item has not been already listed 
  #  where $1 is 'VM_Path' and  $2 is 'VM_Conf' to be tested against the existing list (non-sparse)

  if [[ $1 ]]; then

    # make sure that a $1 has been sent & that the calling array splitter hasn't sent an empty value
    TestFolderFile="$1/$2"

    [[ ! -e $TestFolderFile ]] && function_conf_error  "VM_array_add_confs: File Not Found" && return 

    if [[ ! ${VM_Array[0,0]} ]]; then 
    
      New_VM_ElementCount=0  

    else 
    
      New_VM_ElementCount="$((${#VM_Array[@]} / 2))" 

      local i=0

      while [[ ${VM_Array[$i,0]} ]]; do

        ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"

        if [[ $ArrFolderFile == "$TestFolderFile" ]]; then return  # already exists, stop searching, quit function:

        else  ((i+=1))  # carry on interating the array

        fi
        
      done

    fi

      # if it's the first entry, or at the end there is no match found in the array, then add it
      VM_Array["$New_VM_ElementCount",0]="$1" 
      VM_Array["$New_VM_ElementCount",1]="$2" 

  fi
  
}


function_scan_VM_folderList () {

  #  Scans of current & listed VM folders for other potential '.conf' files to the VM array
  #  Adds via calls to ** 'function_VM_array_ADD_confs' **

  #  If the general settings file has populated or part-populated the VM array, then ${VM_Array[0,0]} will be present
  #  Starts by checking for settings file errors

  VM_SettingsError=
  VM_ElementCount="${#VM_Array[@]}" 

  if [[ $VM_ElementCount ]]; then 

    while true ; do

      # Settings file checking loop. Runs until either settings file reads correctly or the user quits.

      # CHECK 1
      # Use 'modulo' to detect odd/even   See: https://stackoverflow.com/a/15660039  
      [[ "$(( VM_ElementCount % 2 ))" == "1" ]] &&  VM_SettingsError=1 

      # CHECK 2
      if [[ ! $VM_SettingsError ]]; then

        # Check that array is non-sparse & is in pairs & that the elements exist
        # Note that a sparse array will stop listing at the first empty entry

        i=0
        VM_PairsCount=0

        while [[ ${VM_Array[$i,0]} ]]; do

          ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"

          if [[ -d "${VM_Array[$i,0]}" && -f "$ArrFolderFile"  ]]; then  

            [[ $VM_PairsCount -eq  "$VM_ElementCount" ]] &&  break

            # else carry on interating the array 
            ((i+=1))  
            ((VM_PairsCount+=2))  
            
          else  

            VM_SettingsError=1
            printf "\n\n  Array Element(s) Not Found "
            printf "\n\n  Folder:  %s " "${VM_Array[$i,0]}"
            printf "\n\n  .conf :  %s " "${VM_Array[$i,1]}"
            break
            
          fi
          
        done

      fi


      # CHECK 3
      # If empty array elements were present, the pairs counter won't have incremented fully
      # & in associative arrays, unlike indexed ones, are not possible (@2023) to test for directly. 

      if [[ $VM_PairsCount != "$VM_ElementCount" ]]; then  
      
        VM_SettingsError=1

        printf "\n\n  Empty Array Element(s) Found "

      fi


      if [[ $VM_SettingsError ]]; then

        printColor "\n\n  ERROR in VM array general settings"

        printf "\n\n  Check the folder path with the file manager. Check for spellings. Check upper/lower case."
        
        printf "\n\n  Esp. check for spaces that may have been true-typed into semi-invisibility ... "

        printf "\n\n  [enter] to open settings editor  [q] to quit \n\n"

        read -rp  "  >  "  VM_SettingsError

        printf "\n\n"

        if [[ $VM_SettingsError == "q" ]] ; then  exit directly ; else  qqX_edit_settings ; fi

      else 

        break

      fi

    done

  fi

  i=0

  while [[ ${VM_Folder_List[i]} ]]; do

    FolderPathName="${VM_Folder_List[i]}"

    Folder_Conf_String="$(ls "$FolderPathName/"*.conf 2> /dev/null)"

    Folder_Conf_String=${Folder_Conf_String//"$FolderPathName/"/}

    mapfile -t  Folder_Conf_Array  <<< "$Folder_Conf_String"

    if [[ ${Folder_Conf_Array[0]} ]]; then 

      for TestFile in "${Folder_Conf_Array[@]}"; do 

        # calls adding function, one by one, if the .conf file appears to be valid, & builds the ${VM_Array[*,*]} 
        if grep -q -s 'guest_os=' "$FolderPathName/$TestFile"; then
          function_VM_array_ADD_confs  "$FolderPathName" "$TestFile" 
        fi
      
      done

    fi

    ((i+=1))

  done

  if [[ ! ${VM_Array[0,0]} ]] ; then
    function_conf_error  "VM ARRAY - No VMs - Is it time to get some distros?  Also check"
    SelectArrayError=1
  fi

}

## Variant styles of VM display & their common function units:

vm_selector_init_common () {

  VM_ElementCount="${#VM_Array[@]}" 
  VM_PairsCount="$((VM_ElementCount/2))"
  VM_Array_LastIndex="$((VM_PairsCount-1))"

  ZsyncDistrosFound=
  LiveDistrosFound=
  MSR_DistrosFound=

}

function_vm_selector_array_check () {

  # Legacy checker moved here in version 1.6.03 with introduction of selector styles
  # Appears intended for changes made after main initialization has happened   # REVIEW  may not be now needed ?

  SelectArrayError=
  i=0

  while [[ ${VM_Array[$i,0]} ]] ; do

    if [[ ! -d "${VM_Array[$i,0]}" ]]; then 

        printf "\n\n  ERROR  %s folder not found: \n\n  %s \n\n" "$ModName" "${VM_Array[$i,0]}"   
        function_conf_error  "folder $i" 
        SelectArrayError="${VM_Array[$i,0]}"
        break
    fi
        
    if [[ ! -e "${VM_Array[$i,0]}/${VM_Array[$i,1]}" ]]; then 

      printf "\n\n  ERROR  %s ' .conf ' not found: \n\n  %s \n\n" "$ModName" "${VM_Array[$i,1]}"
      function_conf_error  "config $i" 
      SelectArrayError="${VM_Array[$i,1]}"
      break
    fi

    ((i+=1))

  done

}

function_vm_folder_item_text () {

  ArrayConf_Item="${VM_Array[$i,0]}/${VM_Array[$i,1]}"
  ArrayConf_Item_Listing="${VM_Array[$i,1]}"
  ArrayConf_Item_Listing="${ArrayConf_Item_Listing/'.conf'/}"

  [[ "$ArrayConf_Item_Listing" == 'windows'* ]] || [[ "$ArrayConf_Item_Listing" == 'macos'* ]] && MSR_DistrosFound=1

  [[ ${#ArrayConf_Item_Listing} -gt "24" ]] &&  ArrayConf_Item_Listing="${ArrayConf_Item_Listing:0:24}"

  ## Decide on item text to print

  QcowTarget=
  QcowTarget="$(grep -s 'disk_img' "$ArrayConf_Item" )"   
  QcowTarget="${QcowTarget/'disk_img='/}"  
  QcowTarget="${QcowTarget//'"'/}"

  # Newly downloaded VMs will have a qcow disk path in the .conf file 
  # BUT the disk won't be be there yet, not until quickemu has done a first run against the .conf


  if [[ ! -e "${VM_Array[$i,0]}/$QcowTarget" ]]; then 

    ArrayConf_Item_Listing+=" (new)"

  elif  [[  ! $(du -b -t 1000000 "${VM_Array[$i,0]}/$QcowTarget" 2>/dev/null) ]]; then

    #  Live VM qcow2 disks are as little as only 196k. 
    #  But set test ceiling is set at 1,000,000k (1G) to allow for meta preallocation etc REVIEW 

    if [[ "${VM_Array[$i,1]}" == 'ubuntu'* ]] && [[ "${VM_Array[$i,1]}" == *'daily'* ]]; then
      #  Are Live VMs only, as zsync only updates the iso file.   
      ArrayConf_Item_Listing+=" (Z)"
      ZsyncDistrosFound=1
    else
      #  Live VMs only, in general, running off the iso file.   
      ArrayConf_Item_Listing+=" (L)"
      LiveDistrosFound=1
    fi

  fi

}

function_print_conf_array_A_style () {

  i=0
  ListTitleFolder=
  VM_List_LineItemCount=0

  vm_selector_init_common

  while [[ ${VM_Array[$i,0]} ]] ; do

    if [[ $ListTitleFolder != "${VM_Array[$i,0]}" ]]; then

      if [[ $ListTitleFolder ]]; then 
      
        # won't print first time if value has been initialized as empty ...
        printf " >>  %s\n\n\n  "  "$ListTitleFolder"
        VM_List_LineItemCount=0

      else  printf "\n\n  "

      fi

      ListTitleFolder="${VM_Array[$i,0]}"

    fi

    function_vm_folder_item_text

    if [[ $i -gt 9 ]]; then printf "[%d]  " "$i" ; else printf " [%d]  " "$i" ; fi
    printColor "%-29s" "$ArrayConf_Item_Listing"
    ((VM_List_LineItemCount+=1))   

    # Move to new line when number of items per line reached  (default 4, see main settings)
    if [[ $VM_List_LineItemCount == "$VM_Select_ItemsPerLine" ]]; then
      VM_List_LineItemCount=0
      printf "\n\n  "
    fi

    ((i+=1))

  done

  [[ $i == "$VM_PairsCount" ]] && printf " >>  %s"  "$ListTitleFolder"

  printf "\n"

}

function_print_conf_array_B_style () {

  i=0
  VM_List_LineItemCount=0
  ListTitleFolder="${VM_Array[0,0]}"

  vm_selector_init_common

  while [[ ${VM_Array[$i,0]} ]] ; do

    if [[ $ListTitleFolder != "${VM_Array[$i,0]}" ]]; then

      printf " >>  %s\n\n  "  "$ListTitleFolder"
      VM_List_LineItemCount=0
    
    else  printf "\n  "

    fi

    ListTitleFolder="${VM_Array[$i,0]}"

    function_vm_folder_item_text

    if [[ $i -gt 9 ]]; then printf "[%d]  " "$i" ; else printf " [%d]  " "$i" ; fi
    printColor "%-35s" "$ArrayConf_Item_Listing"
    ((VM_List_LineItemCount+=1))   

    # Move to new line when number of items per line reached  (default 4, see main settings)
    if [[ $VM_List_LineItemCount == "$VM_Select_ItemsPerLine" ]]; then VM_List_LineItemCount=0 ; fi

    ((i+=1))

  done

  [[ $i == "$VM_PairsCount" ]] && printf " >>  %s"  "$ListTitleFolder"

  printf "\n"
  
}

function_print_conf_array_C_style () {

  i=0
  VM_List_LineItemCount=1
  ListTitleFolder=

  vm_selector_init_common

  [[ ! $VM_Select_Items_style_C_PerLine ]] && VM_Select_Items_style_C_PerLine="3"


  while [[ ${VM_Array[$i,0]} ]] ; do

    function_vm_folder_item_text

    ListTitleFolder="${VM_Array[$i,0]}"

    if [[ $ListTitleFolder != "$ListTitleFolderOld" ]]; then

      if [[ ${#ListTitleFolder} -gt 28 ]]; then

        ListTitleFolderDisplay="${ListTitleFolder:(-28)}"
        ListTitleFolderDisplay="${ListTitleFolderDisplay#*/}"
        [[ "$ListTitleFolderDisplay" != '/'* ]] && ListTitleFolderDisplay="/$ListTitleFolderDisplay"

      else  ListTitleFolderDisplay="$ListTitleFolder"

      fi

      [[ $ListTitleFolderOld ]] && printf "\n"

      printf "\n\n  %-35s"  "$ListTitleFolderDisplay" 

      VM_List_LineItemCount=1

    else

      if [[ $VM_List_LineItemCount == "$VM_Select_Items_style_C_PerLine" ]]; then  
      
        printf "\n\n  " ;  VM_List_LineItemCount=0 

        # Move to new line when number of items per line reached  (Variant style C default 3, normal = 4  See main settings) 

      else  ((VM_List_LineItemCount+=1))  

      fi
    
    fi

    if [[ $i -le 9 ]]; then printf "[%d]  " "$i" ; printColor "%-30s" "$ArrayConf_Item_Listing"

    else printf "[%d] " "$i" ;  printColor "%-30s" "$ArrayConf_Item_Listing" ; fi

    ListTitleFolderOld="${VM_Array[$i,0]}"

    ((i+=1))

  done

  printf "\n"
  
}


function_Select_VM () {  

  ShowUtilsMenu=
  ShowCustomBootMenu=
  ShowDefault_Hybrid=
  ForceCustomBootMenu=
     
  if [[ $ByPass_VM_Array_Loader ]] && [[ ${VM_Array[0,0]} ]]; then

    # if reselecting & the array is already loaded (which it should be ...)
    ByPass_VM_Array_Loader=

  else 

    # Re-scan folders as something new may have been added
    function_scan_VM_folderList
    function_VM_array_ADD_confs

  fi
 
  if [[ ! $ByPass_VM_Array_Selector ]] ; then

    VM_Selection=
    VM_Conf_Dir=
    VM_Conf_File=

    while true; do

      function_vm_selector_array_check

      [[ ! $SelectArrayError ]] && function_print_conf_array_"$VM_SelectorStyle"_style
    
      if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError ]]; then 

        printf "\n\n  Settings file: %s" "$Q_Mod_SettingsFile"

        [[ $DefaultFolderError ]] && printf "\n\n  ERROR: DEFAULT FOLDER   [enter] to edit settings file  [q] to quit " 

        [[ $ExtraFolderError ]] && printf "\n\n  ERROR: VM FOLDER ARRAY %s \n\n  [enter] to edit settings file  [q] to quit "  "$ExtraFolderError"

        [[ $SelectArrayError ]] && printf "\n\n  ERROR: VM ARRAY / VM .CONF %s \n\n  [enter] to edit settings file  [q] to quit " "$SelectArrayError"

      else

        printf "\n\n  [number] to select a VM   [gt] quickget a new distro   [set] to edit settings file   [q] to quit "

        if [[ $ZsyncDistrosFound || $LiveDistrosFound ]]; then 
          printf "   ("
          [[ $LiveDistrosFound ]] && printf "L=LiveISO"
          [[ $LiveDistrosFound && $ZsyncDistrosFound ]] && printf ") & ("
          [[ $ZsyncDistrosFound ]] && printf "Z=Zsync"
          printf ")"
        fi

        VM_Array_NameZero="${VM_Array[0,1]}"
        VM_Array_NameZero="${VM_Array_NameZero/'.conf'/}"

        printColor "\n\n  [Enter]  "
        printf "%s  "  "${VM_Array_NameZero^^}"

      fi

      printf "\n\n"
      read -rp  "   >  "  VM_Selection

      #

      if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError ]]; then 
            
        DefaultFolderError= 
        ExtraFolderError=
        VM_Selection=
        VM_InstanceName=
        qqX_edit_settings 
        return

      fi

      if [[ $VM_Selection == "q" || $VM_Selection == "Q" ]]; then echo ; exit directly 

      elif [[ $VM_Selection == "set" ]];then

        VM_Selection=
        VM_InstanceName=
        qqX_edit_settings 
        return

      elif [[ $VM_Selection == "gt" || $VM_Selection == "GT" ]]; then

        if [[ $VM_Selection == "GT" ]]; then

          printColor "\n\n  CAPS LOCK should be unset \n\n"
          read -rp "  [enter] to continue  >  "

        fi

        VM_Selection=
        function_quick_get_wrap 
        ByPass_VM_Array_Loader=
        printf "\033c"
        show_qmod_title
        return

      elif [[ $VM_Selection == [0-9] || $VM_Selection == [0-9][0-9] || $VM_Selection == [0-9][0-9][0-9] ]]; then

        if [[ $VM_Selection -gt $VM_Array_LastIndex ]]; then  

          VM_Conf_Dir=
          VM_Conf_File=
          VM_Selection=

        else

          VM_Conf_Dir="${VM_Array[$VM_Selection,0]}"
          VM_Conf_File="${VM_Array[$VM_Selection,1]}"
          VM_Selection=
          break

        fi

      else  
      
        sleep 0.1   # gives background scans a little more time, if using the faster [enter] selection
        VM_Conf_Dir="${VM_Array[0,0]}"
        VM_Conf_File="${VM_Array[0,1]}"
        VM_Selection=
        break

      fi

    done

  fi


  if [[ ! $ByPass_VM_Array_Selector  &&  ! $SelectArrayError ]]; then  

    ## Check file/folder exists and that we are where we need to be
    [[ ! -d "$VM_Conf_Dir" ]] &&  function_conf_error  "folder"  && SelectArrayError=1

    # change directory to where the VM is
    ! cd "$VM_Conf_Dir"  &&  printColor "\n\n  ERROR  .conf  folder switching \n\n" && sleep 5 && exit 1
    [[ ! -e "$VM_Conf_File" ]] &&  function_conf_error  ".conf file" && SelectArrayError=1

    # Set Instance Name, following Quickemu pattern which sets the same name to the .conf file and to the main folder 
    VM_InstanceName="${VM_Conf_File/.conf}"

    # Check that the dir contains the right files  &&  grep .conf for right content
    if [[ $IgnoreFolderCheck ]]; then IgnoreFolderCheck=
    else [[ ! $(ls "$VM_InstanceName"/*.qcow2 2> /dev/null) ]] && function_conf_error  "folder"  && SelectArrayError=1
    fi
    ! grep -q -s 'guest_os=' "$VM_Conf_File" && function_conf_error  ".conf file"   && SelectArrayError=1

    # Check KVM parameter settings & advise according to guest OS
    KVM_MSR_selector=
    find_kvm_msr_default_and_status

    if [[ $Verbose_MSR_dialog ]] || [[ ! $Verbose_MSR_dialog ]] && [[ "$VM_InstanceName" == *windows* || "$VM_InstanceName" == *macos* ]]; then 
      msrs_conflict_check_resolver
    fi

    # All existing .CONF VARS MUST BE CLEARED before sourcing a new conf file 
    # otherwise any items specified in the previous config, but not in the new one, will remain.
    refresh_conf_vars_and_values

    ##  Set or adjust any VM_Conf_Dir related globals  (VM is now selected OR has been re-selected)

    QemuArgsFile="$VM_Conf_Dir/$VM_InstanceName/Qemu_args_List.txt"
    QemuArgsShortFile="$VM_Conf_Dir/$VM_InstanceName/Qemu_ShortArgs_List.txt"
    QemuArgsCustomFile="$VM_Conf_Dir/$VM_InstanceName/Qemu_ShortArgs_Custom.txt"
    QemuVirtHardwareRecord="$VM_Conf_Dir/$VM_InstanceName/QemuVirtHardwareRecord.txt"

    # Qemu_IMG log > eg. for disk repair functions 
    Qemu_IMG_ErrorLog="$VM_InstanceName/${VM_InstanceName}.qemu.IMG.error.log"
    if [[ -s "$Qemu_IMG_ErrorLog" ]]; then printf "\n\n" ; cat "$Qemu_IMG_ErrorLog" ; fi

    # Qemu SYSTEM log
    QemuErrorLog="$VM_Conf_Dir/$VM_InstanceName/${VM_InstanceName}.qemu.error.log"
    [[ ! -e "$QemuErrorLog" ]] && printf "" >  "$QemuErrorLog"

  fi

  # clear any no-longer needed flags
  Select_VM=
  VM_Selection=
  ByPass_VM_Array_Loader=
  ByPass_VM_Array_Selector=

  # reload if the editor was called, due to settings error
  if [[ $SelectArrayError ]]; then
  
    MainMenuChoice="refresh" 
    Select_VM=1
    [[ $VM_InstanceName ]] && ByPass_VM_Array_Selector=1

  else

    SettingsFileAdjusted=

  fi

}


function_delete_Selected_VM () {

  if [[ ! $1 && ! $2 ]]; then

    # Normally: VM_InstanceName="${VM_Conf_File/.conf}"

    printColor "\n\n  Internal Params: VM Name & VM config file (NO PATH) must be given \n\n " 

    sleep 2 ;  return

  else

    if [[ ! -d "$1" ]] || [[ ! -e "$2" ]]; then

      printColor "\n\n  Internal Params: VM Name & VM config file (NO PATH) must be given \n\n " 

      printColor "\n\n  Internal Params: VM Name / VM config file  NOT FOUND  \n\n " 

      sleep 2 ;  return

    fi

    if [[ $(type -p gio 2>/dev/null) ]]; then TrashingAvailable=1 ; else TrashingAvailable= ; fi

    printColor "\n\n  Folder: %s " "$1"
  
    printColor "  & file: %s  to be deleted?"  "$2"
  
    printf  "\n\n  To delete a VM, removal of the above folder/file is sufficient."

    printf "\n\n  Select [n] to manually delete, & to possibly retain individual files, using a file manager."

    printf "\n\n  Folder content: \n\n"

    ls "$1"

    if [[ $TrashingAvailable ]]; then 

      printColor "\n\n  [enter] safely move the folder & file to the recoverable trash bin"  
      
      printf "\n\n  [n] keep   [y] yes, PERMANENTLY, I have back-ups ..."

    else

      printColor "\n\n  [enter] use the file manager to move things the trash bin "
      
      printf "\n\n  [y] yes, PERMANENTLY, I have back-ups ..."

    fi

    printf "\n\n"

    read -rp "  >  "   Delete_VM_Option

    if [[ $Delete_VM_Option == "y" ]]; then 

      printf "\n\n  Folder & .conf file being deleted ... \n\n"
      
      rm -f -r "$1"  
      echo

      rm -f "$2"
      echo

    else

      # https://specifications.freedesktop.org/trash-spec/trashspec-latest.html

      if [[ $TrashingAvailable ]] && [[ $Delete_VM_Option != "n" ]]; then

        printf "\n\n  Moving files to the bin ... \n\n"
        gio trash "$1"
        gio trash "$2"

      else  printf "\n\n  NOT deleted ... \n\n"

      fi

    fi

    sleep 1.4

    printColor "\n\n  [enter] to return or continue \n\n" 
    read -rp "  > "

    VM_InstanceName="$VM_InstanceName"" - Deleted >> ReSelect"

    SettingsFileAdjusted=1

    refresh_sources_and_reload_VM_arrays

  fi

}


# If settings need reloading, following a settings edit or a VM deletion:

refresh_sources_and_reload_VM_arrays() {

  # clear any previously declared settings based arrays 
  Extra_VM_Folder=()
  VM_Array=()
  QemuErrorFilter=()

  # shellcheck disable=SC1090

  if [[ $ModName_qqX ]]; then source "$Q_Mod_SettingsFile" ; else source "$Q_Mod_SettingsFile"  QWRAP ; fi

  refresh_and_load_main_sources
  quickget filepath

  [[ $XDG_GeneralDesktopStart ]] &&  function_xdg_start_folder && find_xdgopen_settings

  function_create_VM_folderList  
  function_scan_VM_folderList  
  refresh_conf_vars_and_values

  # reload screen 
  ByPass_VM_Array_Selector=1
  KVM_MSR_Error=
  ShowUtilsMenu=
  ForceCustomBootMenu=
  printf "\033c"
  show_qmod_title

}