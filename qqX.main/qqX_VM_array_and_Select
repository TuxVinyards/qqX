#!/usr/bin/env bash

## VM Selector Menu to be located in folder 'qqX.main' along with 'qqX_VM_array_routines'

##  Copyright (c)  Alex Genovese   https://github.com/qqxproject
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:
#   Licence  GPL3   https://www.gnu.org/licenses
##  qqX - quickemu quickget X terminal project

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154

# For notes on custom vm menus > edit > find > "Custom styles" in 'qqX.main/qqX_VM_selector_styles'


VM_loader_selector_and_menu () {

  ShowUtilsMenu=
  ShowCustomBootStyle=
  ShowDefault_Hybrid=
  ForceCustomBootStyle=

  # LOADER

  if [[ $ByPass_VM_Array_Loader ]] && [[ ${VM_Array[0,0]} ]]; then
    # just clear the flag, may be bypassed if array present and nothing new added, or if settings not changed ...
    ByPass_VM_Array_Loader=
    [[ $Loop_Diagnostics ]] && printf "\n\n Bypassing VM loader:" &&  main_loop_diagnostics
  else
    refresh_sources_and_load_VM_arrays
    [[ $Loop_Diagnostics ]] && printf "\n\n VM selector, post refresh_sources_and_load_VM_arrays:" &&  main_loop_diagnostics
  fi

  # Autorun Main Menu on start up, if only one distro present, and not a mouse click start or similar, to help new users ...
  if [[ ! $SingleMenuHasRun ]] && [[ "${VM_Array[0,0]}" ]] && [[ ! "${VM_Array[1,0]}" ]] && [[ ! $Initial_Input ]]; then
    ByPass_VM_Array_Selector=1 ; ByPass_VM_Array_Loader=1 ; SingleMenuHasRun=1
    VM_Conf_Dir="${VM_Array[0,0]}" ; VM_Conf_File="${VM_Array[0,1]}" ; VM_InstanceName="${VM_Conf_File/'.conf'/}"
    if [[ $Trace_InputVars ]]; then
      echo; echo "R: Single Distro QuickStart"  ; echo
      echo "D: $VM_Conf_Dir"  ; echo
      echo "C: $VM_Conf_File"  ; echo
      echo "N: $VM_InstanceName"  ; echo  ; sleep "$Trace_InputVars"
    fi
    if [[ $VM_InstanceName ]]; then
      # set to General VM folder, where the .conf files are ... and flag to run the VM selector
      cd "$VM_Conf_Dir"  || printf "\n\n Internal Error: Single Distro QuickStart  >  VM Folder not found "
      Current_VM_Folder="$VM_Conf_Dir"
    fi
  fi

  # SELECTOR

  if [[ $ByPass_VM_Array_Selector ]] ; then

    VM_check_and_load
    [[ $Loop_Diagnostics ]] && printf "\n\n Bypassing VM array selector :" &&  main_loop_diagnostics

  else

    VM_Selection=
    VM_Conf_Dir=
    VM_Conf_File=
    VM_InstanceName=
    MainDrive=
    IsoImg=
    Mounted_ISO=
    NewFileTuneUp=
    NewFileTuneUp_JustDone=

    cd "$Default_VM_Folder" || DefaultFolderError=1
    Current_VM_Folder="$Default_VM_Folder"

    while true; do

      [[ $Loop_Diagnostics ]] && printf "\n\n VM selector loop:" &&  main_loop_diagnostics

      if [[ $Run_GT ]]; then  Run_GT= ; VM_Selection="gt"

      else
        printf "\033c"
        show_qqX_title_bar

        if ! type -t "print_selector_array_${VM_SelectorStyle}_style" 1>/dev/null ; then VM_SelectorStyle="$Default_VM_SelectorStyle" ; fi

        for Style in {A..Z} ; do
          if type -t "print_selector_array_${Style}_style" 1>/dev/null ; then LastSelectStyleAvailable="$Style" ; else break; fi
        done

        printf "\n  Total Storage:  Drives %s (%s)  ISO's %s (%s)" "${TotalQcow2_Sizes}G" "$TotalQcow2_SizesCount" "${Total_ISO_Sizes}G" "$Total_ISO_SizesCount"
        [[ $BackUpQcowPresent ]] && printf "  Backups (%s)"  "$BackUpQcowPresent"
        printf "  [r] refresh  [sz] show size details"
        printf "\n"

        [[ ! $SelectArrayError ]] && print_selector_array_"$VM_SelectorStyle"_style

        if [[ $New_VM_Conf_File ]] && [[ ! $Current_VM_Folder_Recognised ]] && [[ -f "$(pwd)/$New_VM_Conf_File" ]]; then
          printColor "\n\n  For future display, add the NEW Current Folder to the VM array, [set] general settings ..."
        fi

        main_loop_diagnostics

        [[ $DefaultFolderError ]] && printf "\n\n  ERROR: DEFAULT FOLDER "
        [[ $ExtraFolderError ]] && printf "\n\n  ERROR: VM FOLDER ARRAY '%s' "  "$ExtraFolderError"
        [[ $SelectArrayError ]] && printf "\n\n  ERROR: VM ARRAY / VM .CONF %s " "$SelectArrayError"

        if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError ]]; then

          printf "\n\n  Settings file: %s" "$qqX_SettingsFile"
          printf "\n\n  [enter] to edit settings file   [c] ignore, re-check and continue   [q] to quit "

        else

          printf "\n\n  [number] to select a VM         "
          [[ ! $ShowFindPoint ]] && ShowFindPoint=32
          if [[ $VM_ElementCount -ge "$ShowFindPoint" ]]; then  printf "   [set] edit settings  [fd] find distro"
          else printf "   [set] view or edit settings file"
          fi
          printf "   [A-%s] change menu style %s"  "$LastSelectStyleAvailable"  "$VM_SelectorStyle"

          if [[ $ZsyncDistrosFound || $LiveDistrosFound ]]; then
            printf "   ("
            [[ $LiveDistrosFound ]] && printf "L=LiveISO"
            [[ $LiveDistrosFound && $ZsyncDistrosFound ]] && printf ") & ("
            [[ $ZsyncDistrosFound ]] && printf "Z=Zsync"
            printf ")"
          fi

          VM_Array_NameZero="${VM_Array[0,1]}"
          VM_Array_NameZero="${VM_Array_NameZero/'.conf'/}"

          if [[ $(cat "$qqX_Upd_VarsTmpFile" 2>/dev/null) ]]; then source "$qqX_Upd_VarsTmpFile"; fi

          if [[ $qqX_UpdateAvail ]]; then printf "\n\n  [Enter]  " ; else printColor "\n\n  [Enter]  " ; fi

          printf "%-25s"  "${VM_Array_NameZero^^}"
          printf " [gt] quickget a new distro  [qf] qcow2 file manager  [h] Help  [f] FreeBird  [r] refresh  [q] quit"

          [[ $qqX_UpdateAvail ]] &&  printColor "\n\n  [dl] >> view new qqX update details: %s %s <<" "$qqX_Latest_ReleaseType" "$qqX_Latest_ReleaseNumber"

          if [[ $MenuStylePreviewed ]] && [[ ! $SettingsFileAdjusted ]] && [[ ! $VM_Selection_Overide ]]; then
            printColor "\n\n  Preview only - use [set] for menu permanency, [r] to return to default " ; MenuStylePreviewed=
          elif [[ $SettingsFileAdjusted ]]; then printColor "\n\n  ARRAYS have been RELOADED and settings REFRESHED ...."; SettingsFileAdjusted=
          fi

        fi

        path_diagnostics
        IgnoreConfigErrors=
        FD_Phrase=
        FD_Start=

        if [[ $DiskStorageChanges ]]; then
          DiskStorageChanges=
          VM_Selection_Overide="r"
        fi

        if [[ $VM_Selection_Overide ]];then
          VM_Selection="$VM_Selection_Overide"
          VM_Selection_Overide=
        else
          printf "\n\n"
          read -rp  "   >  "  VM_Selection
        fi
      fi

      #

      if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError || $VM_Selection == "c" ]]; then

        ExtraFolderError=
        VM_InstanceName=
        [[ $VM_Selection != "c" ]] && qqX_edit_settings
        VM_Selection=
        return

      elif [[ $VM_Selection == "fd" ]]; then  FD_help_notes

      elif [[ "$VM_Selection" == fd* ]]; then

        if [[  "$VM_Selection" == 'fd c '*  ]]; then  FD_Phrase="${VM_Selection/'fd c '/}"
        elif [[  "$VM_Selection" == 'fd s '*  ]]; then  FD_Start="${VM_Selection/'fd s '/}"
        else  FD_help_notes
        fi

      elif [[ "$VM_Selection" == [A-Z] ]]; then

        # NB different to VM_selector_menu_refresh
        VM_SelectorStyle="$VM_Selection"
        ByPass_VM_Array_Loader=1
        MenuStylePreviewed=1
        ListTitleFolderOld=
        InvertStyleColors=
        VM_Conf_Dir=
        VM_Conf_File=
        VM_InstanceName=
        VM_Selection=

      # Note, for this script, 'refresh_sources_and_load_VM_arrays' gets run at start of loop on return

      elif [[ $VM_Selection == "r" ]]; then  VM_selector_menu_refresh ; return

      elif [[ ${VM_Selection^^} == "FS" ]] ; then
        CodingHotSwap="FreeSpirit" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection^^} == "FB" ]] ; then
        CodingHotSwap="FreeBird" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection^^} == "HB" ]] ; then
        CodingHotSwap="HomeBird" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ "${VM_Selection,,}" == ech* ]] ; then
        CodingHotSwap="Echo" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ "${VM_Selection,,}" == sys* ]] ; then
        CodingHotSwap="System" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ "${VM_Selection}" == cust* ]] ; then
        CodingHotSwap="Custom" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ "${VM_Selection,,}" == dev* ]] ; then
        CodingHotSwap="Dev" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return

      elif [[ $VM_Selection == "q" ]]; then tput cnorm ; echo ; sleep 0.3 ; exit directly

      elif [[ $VM_Selection == "dl" ]]; then  download_new_release ; return

      elif [[ $VM_Selection == "qf" ]]; then  qcow2_filemanagement_launcher "qqf-setvars" ; qcow2_filemanagement_launcher

      elif [[ $VM_Selection == "set" ]];then

        VM_Selection=
        qqX_edit_settings
        return

      elif [[ $VM_Selection == "sz" ]];then

        VM_Selection=
        show_VM_Array_sizes_text

      elif [[ $VM_Selection == "h" || $VM_Selection == "f" ]];then

        if [[ $VM_Selection == "f"  ]]; then  show_qqX_general_help "f" ; else show_qqX_general_help ; fi
        VM_Selection=

      elif [[ $VM_Selection == "gt" || $VM_Selection == "GT" ]]; then

        VM_Selection=
        function_quick_get_wrap
        ByPass_VM_Array_Loader=
        return

      elif [[ $VM_Selection == [0-9] || $VM_Selection == [0-9][0-9] || $VM_Selection == [0-9][0-9][0-9] ]]; then

        if [[ $VM_Selection -gt $VM_Array_LastIndex ]]; then
          printColor "\n\n  Request '%s' Not Recognised \n\n"  "$VM_Selection"
          sleep 1
          # clear any pressing of the enter key occuring during error message pause
          read -r -t 0.1
          read -r -t 0.1
          read -r -t 0.1
          read -r -t 0.1
          VM_Conf_Dir=
          VM_Conf_File=
          VM_Selection=
        else
          VM_Conf_Dir="${VM_Array[$VM_Selection,0]}"
          VM_Conf_File="${VM_Array[$VM_Selection,1]}"
          VM_Selection=
          VM_check_and_load
          return
        fi

      elif [[ $VM_Selection ]]; then

        printColor "\n\n  Request '%s' Not Recognised \n\n"  "$VM_Selection"
        sleep 1
        # clear any pressing of the enter key occuring during error message pause
        read -r -t 0.1
        read -r -t 0.1
        read -r -t 0.1
        read -r -t 0.1
        VM_Conf_Dir=
        VM_Conf_File=
        VM_Selection=

      else

        sleep 0.1   # gives background scans a little more time, if using the faster [enter] selection
        VM_Conf_Dir="${VM_Array[0,0]}"
        VM_Conf_File="${VM_Array[0,1]}"
        VM_Selection=
        VM_check_and_load
        return

      fi

    done

  fi

}

FD_help_notes () {
  printColor "\n\n  Find Distro - Use multi-part cmd at the standard prompt:"
  printf "\n\n  Contains      fd c search-phrase"
  printf "\n\n  Starts with   fd s [a-z] or phrase"
  printColor "\n\n  [enter] to continue \n\n"
  read -rp "  >  "
}


VM_selector_menu_refresh () {
  ByPass_VM_Array_Loader=
  ByPass_VM_Array_Selector=
  ListTitleFolderOld=
  InvertStyleColors=
  MenuStylePreviewed=
  VM_Conf_Dir=
  VM_Conf_File=
  VM_InstanceName=
  VM_Selection=
}

# https://code.visualstudio.com/  (recommended)

# vim:tabstop=2:shiftwidth=2:expandtab

##
