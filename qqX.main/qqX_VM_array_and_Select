#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards

#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.

# 	Otherwise:  

#   Licence  GPL3   https://www.gnu.org/licenses 

##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:

# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154  

# For notes on custom vm menus > edit > find > "Custom menu styles" in this script

add_unlisted_vm_to_vm_array () {

  ## Adds to VM array & lists, if submitted item has not been already listed 
  #  where $1 is 'VM_Path' and  $2 is 'VM_Conf_File' to be tested against the existing list (non-sparse)

  if [[ $1 ]]; then

    # make sure that a $1 has been sent & that the calling array splitter hasn't sent an empty value
    TestFolderFile="$1/$2"

    [[ ! -e $TestFolderFile ]] && function_conf_error  "VM_array_add_confs: File Not Found" && return 

    if [[ ! ${VM_Array[0,0]} ]]; then 
    
      New_VM_ElementCount=0  

    else 
    
      New_VM_ElementCount="$((${#VM_Array[@]} / 2))" 
      local i=0

      while [[ ${VM_Array[$i,0]} ]]; do

        ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"
        if [[ $ArrFolderFile == "$TestFolderFile" ]]; then return  # already exists, stop searching, quit function:
        else  ((i+=1))  # carry on interating the array
        fi
        
      done

    fi

      # if it's the first entry, or at the end there is no match found in the array, then add it
      VM_Array["$New_VM_ElementCount",0]="$1" 
      VM_Array["$New_VM_ElementCount",1]="$2" 

  fi
  
}


scan_folders_list_and_add_VMs () {

  #  Scans of current & listed VM folders for other potential '.conf' files to add to the VM array
  #  Adds via calls to ** 'add_unlisted_vm_to_vm_array' **

  #  If the general settings file has populated or part-populated the VM array, then ${VM_Array[0,0]} will be present
  #  Starts by checking for the settings file for array entry errors.  
  #  Count will be low at this point, just the manual entries in the settings file.

  VM_SettingsError=
  VM_ElementCount="${#VM_Array[@]}" 

  if [[ $VM_ElementCount ]]; then 

    while true ; do

      # Settings file checking loop. Runs until either settings file reads correctly or the user quits.

      # CHECK 1
      # Use 'modulo' to detect odd/even   See: https://stackoverflow.com/a/15660039  
      [[ "$(( VM_ElementCount % 2 ))" == "1" ]] &&  VM_SettingsError=1 

      # CHECK 2
      if [[ ! $VM_SettingsError ]]; then

        # Check that array is non-sparse & is in pairs & that the elements exist
        # Note that a sparse array will stop listing at the first empty entry

        i=0
        VM_PairsCount=0

        while [[ ${VM_Array[$i,0]} ]]; do

          ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"

          if [[ -d "${VM_Array[$i,0]}" && -f "$ArrFolderFile"  ]]; then  

            [[ $VM_PairsCount -eq  "$VM_ElementCount" ]] &&  break

            # else carry on interating the array 
            ((i+=1))  
            ((VM_PairsCount+=2))  
            
          else  

            VM_SettingsError=1
            printf "\n\n  Array Element(s) Not Found "
            printf "\n\n  Folder:  %s " "${VM_Array[$i,0]}"
            printf "\n\n  .conf :  %s " "${VM_Array[$i,1]}"
            break
            
          fi
          
        done

      fi

      # CHECK 3
      # If empty array elements were present, the pairs counter won't have incremented fully
      # & in associative arrays, unlike indexed ones, are not possible (@2023) to test for directly. 

      if [[ $VM_PairsCount != "$VM_ElementCount" ]]; then  
      
        VM_SettingsError=1
        printf "\n\n  Empty Array Element(s) Found "

      fi

      # All Checks Error dialog

      if [[ $VM_SettingsError ]]; then

        printColor "\n\n  ERROR in VM array general settings"

        printf "\n\n  Check the folder path with the file manager. Check for spellings. Check upper/lower case."
        printf "\n\n  Esp. check for spaces that may have been true-typed into semi-invisibility ... "
        printf "\n\n  [enter] to open settings editor  [q] to quit \n\n"

        read -rp  "  >  "  VM_SettingsError

        printf "\n\n"

        if [[ $VM_SettingsError == "q" ]] ; then  exit directly ; else  qqX_edit_settings ; fi

      else  break

      fi

    done

  fi

  # Scan rest of list & ADD new found .conf files / distros to the VM array, if they are not yet listed:

  i=0

  while [[ ${VM_Folder_List[i]} ]]; do

    FolderPathName="${VM_Folder_List[i]}"
    Folder_Conf_String="$(ls "$FolderPathName/"*.conf 2> /dev/null)"      # list all .confs in the folder  
    Folder_Conf_String=${Folder_Conf_String//"$FolderPathName/"/}         # remove all paths, one from each entry in the string
    mapfile -t  Folder_Conf_Array  <<< "$Folder_Conf_String"              # convert the line separated string to an array   

    if [[ ${Folder_Conf_Array[0]} ]]; then 

      for TestFile in "${Folder_Conf_Array[@]}"; do 
        # calls adding function, one by one, if the .conf file appears to be valid, & builds the ${VM_Array[*,*]} 
        if grep -q -s 'guest_os=' "$FolderPathName/$TestFile"; then
          add_unlisted_vm_to_vm_array  "$FolderPathName" "$TestFile" 
        fi
      done

    fi

    ((i+=1))

  done

  if [[ ! ${VM_Array[0,0]} ]] ; then
    function_conf_error  "VM ARRAY - No VMs - Is it time to get some distros?  Also check"
    SelectArrayError=1
  fi

}


VM_loader_selector_and_menu () {  

  ShowUtilsMenu=
  ShowCustomBootMenu=
  ShowDefault_Hybrid=
  ForceCustomBootMenu=

  # Loader should be run on first start up. 
  # But otherwise may be bypassed if array present and nothing new added, or if settings not changed ... 
     
  if [[ $ByPass_VM_Array_Loader ]] && [[ ${VM_Array[0,0]} ]]; then  ByPass_VM_Array_Loader=
  else   refresh_sources_and_load_VM_arrays
  fi
 
  if [[ ! $ByPass_VM_Array_Selector ]] ; then

    VM_Selection=
    VM_Conf_Dir=
    VM_Conf_File=
    VM_InstanceName=
    MainDrive=
    IsoImg=

    while true; do

      printf "\033c"
      show_qqX_title_bar

      if ! type -t "print_selector_array_${VM_SelectorStyle}_style" 1>/dev/null ; then VM_SelectorStyle="$Default_VM_SelectorStyle" ; fi  

      for Style in {A..Z} ; do
        if type -t "print_selector_array_${Style}_style" 1>/dev/null ; then LastSelectStyleAvailable="$Style" ; else break; fi
      done

      [[ ! $SelectArrayError ]] && print_selector_array_"$VM_SelectorStyle"_style

      if [[ $New_VM_Conf_File ]] && [[ ! $CurrentFolder_Recognised ]] && [[ -f "$(pwd)/$New_VM_Conf_File" ]]; then
        printColor "\n\n  For future display, add the NEW Current Folder to the VM array, [set] general settings ..."
      fi
    
      dev_loop_check

      if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError ]]; then 

        printf "\n\n  Settings file: %s" "$qqX_SettingsFile"
        [[ $DefaultFolderError ]] && printf "\n\n  ERROR: DEFAULT FOLDER   [enter] to edit settings file  [q] to quit " 
        [[ $ExtraFolderError ]] && printf "\n\n  ERROR: VM FOLDER ARRAY %s \n\n  [enter] to edit settings file  [q] to quit "  "$ExtraFolderError"
        [[ $SelectArrayError ]] && printf "\n\n  ERROR: VM ARRAY / VM .CONF %s \n\n  [enter] to edit settings file  [q] to quit " "$SelectArrayError"

      else

        printf "\n\n  [number] to select a VM"        
        printf "   [set] to edit settings file"
        printf "   [A-%s] change menu style %s"  "$LastSelectStyleAvailable"  "$VM_SelectorStyle"

        if [[ $ZsyncDistrosFound || $LiveDistrosFound ]]; then 
          printf "   ("
          [[ $LiveDistrosFound ]] && printf "L=LiveISO"
          [[ $LiveDistrosFound && $ZsyncDistrosFound ]] && printf ") & ("
          [[ $ZsyncDistrosFound ]] && printf "Z=Zsync"
          printf ")"
        fi

        VM_Array_NameZero="${VM_Array[0,1]}"
        VM_Array_NameZero="${VM_Array_NameZero/'.conf'/}"

        printColor "\n\n  [Enter]  "
        printf "%s  "  "${VM_Array_NameZero^^}"
        printf "    [gt] quickget a new distro     [h] help   [f] refresh     [q] quit"

        if [[ $MenuStylePreviewed && ! $SettingsFileAdjusted ]]; then printColor "\n\n  preview only - use [set] for menu permanency"
        elif [[ $SettingsFileAdjusted ]]; then printColor "\n\n  ARRAYS have been RELOADED and settings REFRESHED ...."; SettingsFileAdjusted=
        fi

      fi

      printf "\n\n"
      read -rp  "   >  "  VM_Selection

      #

      if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError ]]; then 
            
        DefaultFolderError= 
        ExtraFolderError=
        VM_Selection=
        VM_InstanceName=
        qqX_edit_settings 
        return

      elif [[ "$VM_Selection" == [A-Z] ]]; then 
      
        VM_SelectorStyle="$VM_Selection" 
        ByPass_VM_Array_Loader=1
        MenuStylePreviewed=1
        ListTitleFolderOld=
        InvertStyleColors=
        VM_Conf_Dir=
        VM_Conf_File=
        VM_InstanceName=
        VM_Selection=
        return

      elif [[ $VM_Selection == "f" ]]; then 
      
        ByPass_VM_Array_Loader=
        ByPass_VM_Array_Selector=
        ListTitleFolderOld=
        InvertStyleColors=
        MenuStylePreviewed=
        VM_Conf_Dir=
        VM_Conf_File=
        VM_InstanceName=
        VM_Selection=
        return

      elif [[ $VM_Selection == "q" ]]; then echo ; exit directly 

      elif [[ $VM_Selection == "set" ]];then

        VM_Selection=
        qqX_edit_settings 
        return

      elif [[ $VM_Selection == "h" ]];then

        VM_Selection=
        show_qqX_general_help 
        return

      elif [[ $VM_Selection == "gt" || $VM_Selection == "GT" ]]; then

        VM_Selection=
        function_quick_get_wrap 
        ByPass_VM_Array_Loader=
        return

      elif [[ $VM_Selection == [0-9] || $VM_Selection == [0-9][0-9] || $VM_Selection == [0-9][0-9][0-9] ]]; then

        if [[ $VM_Selection -gt $VM_Array_LastIndex ]]; then  

          VM_Conf_Dir=
          VM_Conf_File=
          VM_Selection=

        else

          VM_Conf_Dir="${VM_Array[$VM_Selection,0]}"
          VM_Conf_File="${VM_Array[$VM_Selection,1]}"
          VM_Selection=
          break

        fi

      else  
      
        sleep 0.1   # gives background scans a little more time, if using the faster [enter] selection
        VM_Conf_Dir="${VM_Array[0,0]}"
        VM_Conf_File="${VM_Array[0,1]}"
        VM_Selection=
        break

      fi

    done

  fi

  if [[ ! $ByPass_VM_Array_Selector  &&  ! $SelectArrayError ]]; then  

    ## Check file/folder exists and that we are where we need to be
    [[ ! -d "$VM_Conf_Dir" ]] &&  function_conf_error  "folder"  && SelectArrayError=1

    # change directory to where the VM is
    ! cd "$VM_Conf_Dir"  &&  printColor "\n\n  ERROR  .conf  folder switching \n\n" && sleep 5 && exit 1
    [[ ! -e "$VM_Conf_File" ]] &&  function_conf_error  ".conf file" && SelectArrayError=1

    # Set Instance Name, following Quickemu pattern which sets the same name to the .conf file and to the main folder 
    VM_InstanceName="${VM_Conf_File/.conf}"

    # Check that the dir contains the right files  &&  grep .conf for right content
    if [[ $IgnoreFolderCheck ]]; then IgnoreFolderCheck=
    elif [[ ! $(ls "$VM_InstanceName"/*.qcow2 2> /dev/null) ]]; then
      if [[ $(ls "$VM_InstanceName"/*.iso 2> /dev/null) || $(ls "$VM_InstanceName"/*.img 2> /dev/null) ]]; then 
        SelectArrayError=1; function_conf_error  "new" 
      else
        SelectArrayError=1; function_conf_error  "folder"
      fi
    fi

    ! grep -q -s 'guest_os=' "$VM_Conf_File" && function_conf_error  ".conf file"   && SelectArrayError=1

    if [[ ! $SelectArrayError ]]; then

      # Check KVM parameter settings of new selection & advise accordingly
      KVM_MSR_selector=
      find_kvm_msr_default_and_status

      if [[ $Verbose_MSR_dialog ]] || [[ ! $Verbose_MSR_dialog ]] && [[ "$VM_InstanceName" == *windows* || "$VM_InstanceName" == *macos* ]]; then 
        msrs_conflict_check_resolver
      fi

    fi

  fi  

  
  if [[ $SelectArrayError || $SettingsFileAdjusted ]] && [[ ! $NewFileTuneUp_JustDone ]]; then 
  
    VM_Conf_Dir= ; VM_Conf_File= ; VM_InstanceName=  
    # reload if the editor was called, or called due to settings error > zero vars triggers the main qqX loop

  elif [[ ! $SelectArrayError ]]; then

    # All existing .CONF VARS MUST BE CLEARED before sourcing a new conf file 
    # otherwise any items specified in the previous config, but not in the new one, will remain.
    refresh_conf_vars_and_values

    ##  Set or adjust any VM_Conf_Dir related globals  (VM is now selected OR has been re-selected)

    QemuArgsFile="$VM_Conf_Dir/$VM_InstanceName/Qemu_args_List.txt"
    QemuArgsShortFile="$VM_Conf_Dir/$VM_InstanceName/Qemu_ShortArgs_List.txt"
    QemuArgsCustomFile="$VM_Conf_Dir/$VM_InstanceName/Qemu_ShortArgs_Custom.txt"
    QemuVirtHardwareRecord="$VM_Conf_Dir/$VM_InstanceName/QemuVirtHardwareRecord.txt"

    # Qemu_IMG log > eg. for disk repair functions 
    Qemu_IMG_ErrorLog="$VM_InstanceName/${VM_InstanceName}.qemu.IMG.error.log"
    if [[ -s "$Qemu_IMG_ErrorLog" ]]; then printf "\n\n" ; cat "$Qemu_IMG_ErrorLog" ; fi

    # Qemu SYSTEM log
    QemuErrorLog="$VM_Conf_Dir/$VM_InstanceName/${VM_InstanceName}.qemu.error.log"
    [[ ! -e "$QemuErrorLog" ]] && printf "" >  "$QemuErrorLog"

    # test for 'new' - will have have an iso/img but not a main drive, yet (but also double check if 'just done')
    if [[ -e "$IsoImg" &&  ! -e "$MainDrive" ]] && [[ ! $NewFileTuneUp_JustDone ]]; then  
      if [[ $IgnoreSecondCheckNew ]]; then IgnoreSecondCheckNew= ; else  function_conf_error "new" ; fi  
    fi

    # clear any no-longer needed flags
    VM_Selection=
    ByPass_VM_Array_Loader=
    ByPass_VM_Array_Selector=
    MenuStylePreviewed=
    NewFileTuneUp=
    NewFileTuneUp_JustDone=

  fi

}


# If settings need reloading, following a settings edit or a VM deletion:

refresh_sources_and_load_VM_arrays() {

  # clear any previously declared settings-based arrays 
  Extra_VM_Folder=()
  VM_Array=()   
  QemuErrorFilter=()

  # clear possible flags
  VM_SettingsError=
  SelectArrayError=
  IgnoreFolderCheck=
  IgnoreSecondCheckNew=
  KVM_MSR_Error=
  ShowUtilsMenu=
  ForceCustomBootMenu=

  [[ ! -f $qqX_SettingsFile ]] && function_conf_error "qqX_SettingsFile"

  source "$qqX_SettingsFile" 

  refresh_and_load_quickemu_sources
  quickget filepath
  
  find_file_manager_browser

  [[ $XDG_GeneralDesktopStart ]] &&  find_xdg_start_folder 

  function_create_VM_folderList  
  scan_folders_list_and_add_VMs  
  refresh_conf_vars_and_values

}