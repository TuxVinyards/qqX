#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154   

# For notes on custom vm menus > edit > find > "Custom menu styles" in this script

add_unlisted_vm_to_vm_array () {

  ## Adds to VM array & lists, if submitted item has not been already listed 
  #  where $1 is 'VM_Path' and  $2 is 'VM_Conf_File' to be tested against the existing list (non-sparse)

  if [[ $1 ]]; then

    # make sure that a $1 has been sent & that the calling array splitter hasn't sent an empty value
    TestFolderFile="$1/$2"
    [[ ! -e $TestFolderFile && $2 != "empty" ]] && function_conf_error  "VM_array_add_confs: File Not Found" && return 

    if [[ ! ${VM_Array[0,0]} ]]; then 
      New_VM_ElementCount=0  
    else 
      New_VM_ElementCount="$((${#VM_Array[@]} / 2))" 
      local i=0
      while [[ ${VM_Array[$i,0]} ]]; do
        ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"
        if [[ $ArrFolderFile == "$TestFolderFile" ]]; then return  # already exists, stop searching, quit function:
        else  ((i+=1))  # carry on interating the array
        fi
      done
    fi

    # if it's the first entry, or at the end there is no match found in the array, then add it
    VM_Array["$New_VM_ElementCount",0]="$1" 
    VM_Array["$New_VM_ElementCount",1]="$2" 
  fi
  
}

scan_folders_list_and_add_VMs () {

  #  Scans of current & listed VM folders for other potential '.conf' files to add to the VM array
  #  Adds via calls to ** 'add_unlisted_vm_to_vm_array' **

  #  If the general settings file has populated or part-populated the VM array, then ${VM_Array[0,0]} will be present
  #  Starts by checking for the settings file for array entry errors.  
  #  Count will be low at this point, just the manual entries in the settings file.

  VM_SettingsError=
  VM_ElementCount="${#VM_Array[@]}" 

  if [[ $VM_ElementCount ]]; then 

    while true ; do

      # Settings file checking loop. Runs until either settings file reads correctly or the user quits.

      # CHECK 1
      # Use 'modulo' to detect odd/even   See: https://stackoverflow.com/a/15660039  
      [[ "$(( VM_ElementCount % 2 ))" == "1" ]] &&  VM_SettingsError=1 

      # CHECK 2
      if [[ ! $VM_SettingsError ]]; then

        # Check that array is non-sparse & is in pairs & that the elements exist
        # Note that a sparse array will stop listing at the first empty entry

        i=0
        VM_PairsCount=0
        while [[ ${VM_Array[$i,0]} ]]; do
          ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"
          if [[ -d "${VM_Array[$i,0]}" && -f "$ArrFolderFile"  ]]; then  
            [[ $VM_PairsCount -eq  "$VM_ElementCount" ]] &&  break
            # else carry on interating the array 
            ((i+=1))  
            ((VM_PairsCount+=2))  
          else  
            VM_SettingsError=1
            printf "\n\n  Array Element(s) Not Found "
            printf "\n\n  Folder:  %s " "${VM_Array[$i,0]}"
            printf "\n\n  .conf :  %s " "${VM_Array[$i,1]}"
            break
          fi
        done

      fi

      # CHECK 3
      # If empty array elements were present, the pairs counter won't have incremented fully
      # & in associative arrays, unlike indexed ones, are not possible (@2023) to test for directly. 

      if [[ $VM_PairsCount != "$VM_ElementCount" ]]; then  
        VM_SettingsError=1
        printf "\n\n  Empty Array Element(s) Found "
      fi

      # All Checks Error dialog

      if [[ $VM_SettingsError ]]; then
        printColor "\n\n  ERROR in VM array general settings"
        printf "\n\n  Check the folder path with the file manager. Check for spellings. Check upper/lower case."
        printf "\n\n  Esp. check for spaces that may have been true-typed into semi-invisibility ... "
        printf "\n\n  [enter] to open settings editor  [q] to quit \n\n"
        read -rp  "  >  "  VM_SettingsError
        printf "\n\n"
        if [[ $VM_SettingsError == "q" ]] ; then  exit directly ; else  qqX_edit_settings
        fi
      else  break
      fi

    done
    
  fi

  # Scan rest of list & ADD new found .conf files / distros to the VM array, if they are not yet listed:
  i=0
  while [[ ${VM_Folder_List[i]} ]]; do

    FolderPathName="${VM_Folder_List[i]}"
    Folder_Conf_String="$(ls "$FolderPathName/"*.conf 2> /dev/null)"      # list all .confs in the folder  
    Folder_Conf_String=${Folder_Conf_String//"$FolderPathName/"/}         # remove all paths, one from each entry in the string
    [[ ! $Folder_Conf_String ]] && Folder_Conf_String="empty"             # add dummy value for when new extra folders are added
    mapfile -t  Folder_Conf_Array  <<< "$Folder_Conf_String"              # convert the line separated string to an array   

    if [[ ${Folder_Conf_Array[0]} ]]; then 

      if [[ ${Folder_Conf_Array[0]} == "empty" ]]; then
        add_unlisted_vm_to_vm_array  "$FolderPathName" "empty" 
      else
        for TestFile in "${Folder_Conf_Array[@]}"; do 
          # calls adding function, one by one, if the .conf file appears to be valid, & builds the ${VM_Array[*,*]} 
          if grep -q -s 'guest_os=' "$FolderPathName/$TestFile"; then
            add_unlisted_vm_to_vm_array  "$FolderPathName" "$TestFile" 
          fi
        done
      fi

    fi

    ((i+=1))

  done

  if [[ $SelectArrayError ]]; then function_conf_error "$SelectArrayError"; fi

  if [[ ! ${VM_Array[0,0]} || "${VM_Array[0,1]}" == "empty" ]] ; then
    if [[ $CodingHotSwapShow ]]; then SelectArrayError=
    else
      function_conf_error  "No VMs"
      SelectArrayError=1
    fi
  fi

}

scan_VM_Array_for_sizes () {

  # human set for report
  printf "" > "/tmp/qqX.Sizes.qcow.txt"  
  printf "" > "/tmp/qqX.Sizes.qcow.F.txt"  
  printf "" > "/tmp/qqX.Sizes.iso.txt"  
  printf "" > "/tmp/qqX.Sizes.iso.F.txt"  
  local i=0
  ArrFolderPath=
  while [[ ${VM_Array[$i,0]} ]]; do
    ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"
    ArrFolder="${ArrFolderFile/'.conf'/}"
    if [[ $ArrFolderPath && -e "$ArrFolderFile" ]] && [[ $ArrFolderPath != "${VM_Array[$i,0]}" ]]; then 
      printf "\n" >> "/tmp/qqX.Sizes.qcow.F.txt" ; printf "\n" >> "/tmp/qqX.Sizes.iso.F.txt"
    fi
    du -d 4 -t 100M -h -a "$ArrFolder" 2>/dev/null | grep qcow | awk '{ printf "\n%-6s %s", $1, $2 }'\
    | tee -a "/tmp/qqX.Sizes.qcow.txt" -a "/tmp/qqX.Sizes.qcow.F.txt" &> /dev/null
    du -d 4 -t 30M -h -a "$ArrFolder" 2>/dev/null | grep -e 'iso' -e 'img' | awk '{ printf "\n%-6s %s", $1, $2 }'\
    | tee -a "/tmp/qqX.Sizes.iso.txt" -a "/tmp/qqX.Sizes.iso.F.txt" &> /dev/null
    # https://www.gnu.org/software/gawk/manual/html_node/Printf-Examples.html
    ArrFolderPath="${VM_Array[$i,0]}"
    ((i+=1))
  done
  if [[ $SharedDrive ]]; then
    ArrFolder="$(dirname "$SharedDrive")"
    printf "\n" >> "/tmp/qqX.Sizes.iso.txt"
    du -d 4 -t 100M -h -a "$ArrFolder" 2>/dev/null | grep qcow | awk '{ printf "\n%-6s %s", $1, $2 }'\
    | tee -a "/tmp/qqX.Sizes.qcow.txt" -a "/tmp/qqX.Sizes.qcow.F.txt" &> /dev/null
    du -d 4 -t 30M -h -a "$ArrFolder" 2>/dev/null | grep -e 'iso' -e 'img' | awk '{ printf "%-6s %s\n", $1, $2 }'\
    | tee -a "/tmp/qqX.Sizes.iso.txt" -a "/tmp/qqX.Sizes.iso.F.txt" &> /dev/null 
  fi

  BackUpQcowPresent="$(grep -cs '.OLD.qcow2' "/tmp/qqX.Sizes.qcow.txt")"
  [[ $BackUpQcowPresent == "0" ]] && BackUpQcowPresent=

  # machine set for calcs
  # both cases avoid using du with -L otherwise symbolically linked instances will cause double counts when totalling storage
  printf "" > "/tmp/qqX.Sizes.qcow.K.txt"  
  printf "" > "/tmp/qqX.Sizes.iso.K.txt"  
  i=0
  while [[ ${VM_Array[$i,0]} ]]; do
    ArrFolderFile="${VM_Array[$i,0]}/${VM_Array[$i,1]}"
    ArrFolder="${ArrFolderFile/'.conf'/}"
    du -d 4 -t 100M -a "$ArrFolder" 2>/dev/null | sort -nr | grep qcow >> "/tmp/qqX.Sizes.qcow.K.txt" 
    du -d 4 -t 30M -a "$ArrFolder" 2>/dev/null | sort -nr | grep -e 'iso' -e 'img' >> "/tmp/qqX.Sizes.iso.K.txt" 
    ((i+=1))
  done

  if [[ $SharedDrive ]]; then
    ArrFolder="$(dirname "$SharedDrive")"
    du -d 4 -t 100M -a "$ArrFolder" 2>/dev/null | sort -nr | grep qcow >> "/tmp/qqX.Sizes.qcow.K.txt" 
    du -d 4 -t 30M -a "$ArrFolder" 2>/dev/null | sort -nr | grep -e 'iso' -e 'img' >> "/tmp/qqX.Sizes.iso.K.txt" 
  fi

  if [[ $(cat "/tmp/qqX.Sizes.qcow.K.txt" 2>/dev/null ) ]]; then  
    TotalQcow2_SizesCount="$(grep -Ec ^'[1-9]' "/tmp/qqX.Sizes.qcow.K.txt" 2>/dev/null)"
    TotalQcow2_Sizes="$(grep -E ^'[1-9]' < "/tmp/qqX.Sizes.qcow.K.txt" | awk '{print $1}' | paste -sd+ | bc -l  2>/dev/null)"
    TotalQcow2_Sizes="$(bc <<< "scale=2; $TotalQcow2_Sizes/1000000")"
  else
    TotalQcow2_Sizes="0"
    TotalQcow2_SizesCount="0"
  fi

  if [[ $(cat "/tmp/qqX.Sizes.iso.K.txt" 2>/dev/null ) ]]; then  
    Total_ISO_SizesCount="$(grep -Ec ^'[1-9]' "/tmp/qqX.Sizes.iso.K.txt" 2>/dev/null)"
    Total_ISO_Sizes="$(grep -E ^'[1-9]' < "/tmp/qqX.Sizes.iso.K.txt" | awk '{print $1}' | paste -sd+ | bc -l  2>/dev/null)"
    Total_ISO_Sizes="$(bc <<< "scale=2; $Total_ISO_Sizes/1000000")"
  else
    Total_ISO_Sizes="0"
    Total_ISO_SizesCount="0"
  fi
}

show_VM_Array_sizes_text () {

  printf "\nDisk by Size: \n\n" > "/tmp/qqX.SizesTotals.txt"
  { sort -hr "/tmp/qqX.Sizes.qcow.txt" 
    printf "\nISO by Size: \n\n" 
    sort -hr "/tmp/qqX.Sizes.iso.txt"
    if [[ $BackUpQcowPresent ]]; then
      printf "\nBackups: \n\n"
      grep -s '.OLD.qcow2' "/tmp/qqX.Sizes.qcow.txt"
      printf "\n"
    fi
    printf "\nTotal Storage:  Drives %s (%s)  ISO's %s (%s)" "${TotalQcow2_Sizes}G" "$TotalQcow2_SizesCount" "${Total_ISO_Sizes}G" "$Total_ISO_SizesCount"
    printf "\n\n\nDisk by Folder: \n"
    if [[ "$(cat "/tmp/qqX.Sizes.qcow.F.txt" 2>/dev/null)" ]]; then 
      cat -s "/tmp/qqX.Sizes.qcow.F.txt" ; printf "\n\n"
    fi
    printf "\nISO by Folder: \n" 
    cat -s "/tmp/qqX.Sizes.iso.F.txt"
    printf "\n\n" 
    printf "Total Storage:  Drives %s (%s)  ISO's %s (%s)" "${TotalQcow2_Sizes}G" "$TotalQcow2_SizesCount" "${Total_ISO_Sizes}G" "$Total_ISO_SizesCount"
    printf "\n\n" 
  }>> "/tmp/qqX.SizesTotals.txt" 

  sleep 0.5
  (nohup &> /dev/null  "$TextEditor" "/tmp/qqX.SizesTotals.txt" & ) || texteditor_not_found_message
}

VM_selector_menu_refresh () {
  ByPass_VM_Array_Loader=
  ByPass_VM_Array_Selector=
  ListTitleFolderOld=
  InvertStyleColors=
  MenuStylePreviewed=
  VM_Conf_Dir=
  VM_Conf_File=
  VM_InstanceName=
  VM_Selection=
}

VM_loader_selector_and_menu () {  

  ShowUtilsMenu=
  ShowCustomBootStyle=
  ShowDefault_Hybrid=
  ForceCustomBootStyle=

  # LOADER  

  if [[ $ByPass_VM_Array_Loader ]] && [[ ${VM_Array[0,0]} ]]; then
    # just clear the flag, may be bypassed if array present and nothing new added, or if settings not changed ... 
    ByPass_VM_Array_Loader=
  else 
    refresh_sources_and_load_VM_arrays
  fi
 
  # SELECTOR

  if [[ ! $ByPass_VM_Array_Selector ]] ; then

    VM_Selection=
    VM_Conf_Dir=
    VM_Conf_File=
    VM_InstanceName=
    MainDrive=
    IsoImg=
    Mounted_ISO=
    NewFileTuneUp=
    NewFileTuneUp_JustDone=

    cd "$Default_VM_Folder" || DefaultFolderError=1
    Current_VM_Folder="$Default_VM_Folder"

    while true; do

      if [[ $Run_GT ]]; then  Run_GT= ; VM_Selection="gt"
      
      else
        printf "\033c"
        show_qqX_title_bar

        if ! type -t "print_selector_array_${VM_SelectorStyle}_style" 1>/dev/null ; then VM_SelectorStyle="$Default_VM_SelectorStyle" ; fi  

        for Style in {A..Z} ; do
          if type -t "print_selector_array_${Style}_style" 1>/dev/null ; then LastSelectStyleAvailable="$Style" ; else break; fi
        done

        printf "\n  Total Storage:  Drives %s (%s)  ISO's %s (%s)" "${TotalQcow2_Sizes}G" "$TotalQcow2_SizesCount" "${Total_ISO_Sizes}G" "$Total_ISO_SizesCount"
        [[ $BackUpQcowPresent ]] && printf "  Backups (%s)"  "$BackUpQcowPresent"
        printf "  [r] refresh  [sz] show size details"
        printf "\n"

        [[ ! $SelectArrayError ]] && print_selector_array_"$VM_SelectorStyle"_style

        if [[ $New_VM_Conf_File ]] && [[ ! $Current_VM_Folder_Recognised ]] && [[ -f "$(pwd)/$New_VM_Conf_File" ]]; then
          printColor "\n\n  For future display, add the NEW Current Folder to the VM array, [set] general settings ..."
        fi
      
        dev_loop_check

        [[ $DefaultFolderError ]] && printf "\n\n  ERROR: DEFAULT FOLDER " 
        [[ $ExtraFolderError ]] && printf "\n\n  ERROR: VM FOLDER ARRAY '%s' "  "$ExtraFolderError"
        [[ $SelectArrayError ]] && printf "\n\n  ERROR: VM ARRAY / VM .CONF %s " "$SelectArrayError"

        if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError ]]; then 

          printf "\n\n  Settings file: %s" "$qqX_SettingsFile"
          printf "\n\n  [enter] to edit settings file   [c] ignore, re-check and continue   [q] to quit "

        else

          printf "\n\n  [number] to select a VM         "
          [[ ! $ShowFindPoint ]] && ShowFindPoint=32
          if [[ $VM_ElementCount -ge "$ShowFindPoint" ]]; then  printf "   [set] edit settings  [fd] find distro"
          else printf "   [set] view or edit settings file"
          fi
          printf "   [A-%s] change menu style %s"  "$LastSelectStyleAvailable"  "$VM_SelectorStyle"

          if [[ $ZsyncDistrosFound || $LiveDistrosFound ]]; then 
            printf "   ("
            [[ $LiveDistrosFound ]] && printf "L=LiveISO"
            [[ $LiveDistrosFound && $ZsyncDistrosFound ]] && printf ") & ("
            [[ $ZsyncDistrosFound ]] && printf "Z=Zsync"
            printf ")"
          fi

          VM_Array_NameZero="${VM_Array[0,1]}"
          VM_Array_NameZero="${VM_Array_NameZero/'.conf'/}"

          if [[ $(cat "$qqX_Upd_VarsTmpFile" 2>/dev/null) ]]; then source "$qqX_Upd_VarsTmpFile"; fi

          if [[ $qqX_UpdateAvail ]]; then printf "\n\n  [Enter]  " ; else printColor "\n\n  [Enter]  " ; fi

          printf "%-25s"  "${VM_Array_NameZero^^}"
          printf " [gt] quickget a new distro  [qf] qcow2 file manager  [h] Help  [f] FreeBird  [r] refresh  [q] quit"

          [[ $qqX_UpdateAvail ]] &&  printColor "\n\n  [dl] >> view new qqX update details: %s %s <<" "$qqX_LatestReleaseType" "$qqX_LatestRelease"

          if [[ $MenuStylePreviewed ]] && [[ ! $SettingsFileAdjusted ]] && [[ ! $VM_Selection_Overide ]]; then 
            printColor "\n\n  Preview only - use [set] for menu permanency, [r] to return to default "
          elif [[ $SettingsFileAdjusted ]]; then printColor "\n\n  ARRAYS have been RELOADED and settings REFRESHED ...."; SettingsFileAdjusted=
          fi

        fi

        path_diagnostics
        IgnoreConfigErrors=
        FD_Phrase=
        FD_Start=

        if [[ $DiskStorageChanges ]]; then
          DiskStorageChanges=
          VM_Selection_Overide="r"
        fi

        if [[ $VM_Selection_Overide ]];then
          VM_Selection="$VM_Selection_Overide"
          VM_Selection_Overide=
        else
          printf "\n\n"
          read -rp  "   >  "  VM_Selection
        fi
      fi

      #

      if [[ $DefaultFolderError || $ExtraFolderError || $SelectArrayError || $VM_Selection == "c" ]]; then 
            
        ExtraFolderError=
        VM_InstanceName=
        [[ $VM_Selection != "c" ]] && qqX_edit_settings 
        VM_Selection=
        return

      elif [[ $VM_Selection == "fd" ]]; then

        printColor "\n\n  Find Distro - Use multi-part cmd at the standard prompt:"
        printf "\n\n  Contains      fd c search-phrase"
        printf "\n\n  Starts with   fd s a-z or phrase"
        printColor "\n\n  [enter] to continue \n\n"
        read -rp "  >  "
        return

      elif [[ "$VM_Selection" == fd* ]]; then 

        if [[  "$VM_Selection" == 'fd c '*  ]]; then  FD_Phrase="${VM_Selection/'fd c '/}"
        elif [[  "$VM_Selection" == 'fd s '*  ]]; then  FD_Start="${VM_Selection/'fd s '/}"
        else 
          printf "\n\n  Find Distro command not recognised ... \n\n" ; sleep 1 ; return
        fi
        return

      elif [[ "$VM_Selection" == [A-Z] ]]; then 
      
        # NB different to VM_selector_menu_refresh
        VM_SelectorStyle="$VM_Selection" 
        ByPass_VM_Array_Loader=1
        MenuStylePreviewed=1
        ListTitleFolderOld=
        InvertStyleColors=
        VM_Conf_Dir=
        VM_Conf_File=
        VM_InstanceName=
        VM_Selection=
        return

      # Note, for this script, 'refresh_sources_and_load_VM_arrays' gets run at start of loop on return

      elif [[ $VM_Selection == "r" ]]; then  VM_selector_menu_refresh ; return

      elif [[ ${VM_Selection^^} == "FS" ]] ; then  
        CodingHotSwap="FreeSpirit" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection^^} == "FB" ]] ; then  
        CodingHotSwap="FreeBird" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection^^} == "HB" ]] ; then  
        CodingHotSwap="HomeBird" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection,,} == ech* ]] ; then  
        CodingHotSwap="Echo" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection,,} == sys* ]] ; then  
        CodingHotSwap="System" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection} == cust* ]] ; then  
        CodingHotSwap="Custom" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return
      elif [[ ${VM_Selection,,} == dev* ]] ; then  
        CodingHotSwap="Dev" ; SettingsFileAdjusted=1; CodingHotSwapShow=1; VM_selector_menu_refresh ; return

      elif [[ $VM_Selection == "q" ]]; then echo ; exit directly 

      elif [[ $VM_Selection == "dl" ]]; then  download_new_release ; return

      elif [[ $VM_Selection == "qf" ]]; then  qcow2_filemanagement_launcher "qqf-setvars" ; qcow2_filemanagement_launcher  ; return

      elif [[ $VM_Selection == "set" ]];then

        VM_Selection=
        qqX_edit_settings 
        return

      elif [[ $VM_Selection == "sz" ]];then

        VM_Selection=
        show_VM_Array_sizes_text 
        return

      elif [[ $VM_Selection == "h" || $VM_Selection == "f" ]];then

        if [[ $VM_Selection == "f"  ]]; then  show_qqX_general_help "f" ; else show_qqX_general_help ; fi
        VM_Selection=
        return

      elif [[ $VM_Selection == "gt" || $VM_Selection == "GT" ]]; then

        VM_Selection=
        function_quick_get_wrap 
        ByPass_VM_Array_Loader=
        return

      elif [[ $VM_Selection == [0-9] || $VM_Selection == [0-9][0-9] || $VM_Selection == [0-9][0-9][0-9] ]]; then

        if [[ $VM_Selection -gt $VM_Array_LastIndex ]]; then  
          printColor "\n\n  Request '%s' Not Recognised \n\n"  "$VM_Selection"
          sleep 1
          # clear any pressing of the enter key occuring during error message pause
          read -r -t 0.1  
          read -r -t 0.1  
          read -r -t 0.1  
          read -r -t 0.1	
          VM_Conf_Dir=
          VM_Conf_File=
          VM_Selection=
        else
          VM_Conf_Dir="${VM_Array[$VM_Selection,0]}"
          VM_Conf_File="${VM_Array[$VM_Selection,1]}"
          VM_Selection=
          break
        fi

      elif [[ $VM_Selection ]]; then 

        printColor "\n\n  Request '%s' Not Recognised \n\n"  "$VM_Selection"
        sleep 1
        # clear any pressing of the enter key occuring during error message pause
        read -r -t 0.1  
        read -r -t 0.1  
        read -r -t 0.1  
        read -r -t 0.1	
        VM_Conf_Dir=
        VM_Conf_File=
        VM_Selection=

      else  

        sleep 0.1   # gives background scans a little more time, if using the faster [enter] selection
        VM_Conf_Dir="${VM_Array[0,0]}"
        VM_Conf_File="${VM_Array[0,1]}"
        VM_Selection=
        break

      fi

    done

  fi

  if  [[ $VM_Renamed || ! $ByPass_VM_Array_Selector ]] && [[ ! $SelectArrayError ]]; then  

    [[ $GeneralLoopCheck ]] && printf "\n\n VM Array_Selector 2:" &&  dev_loop_check

    ## Check file/folder exists and that we are where we need to be
    [[ ! -d "$VM_Conf_Dir" ]] &&  function_conf_error  "folder" "$VM_Conf_Dir" && SelectArrayError=1

    # change directory to where the VM is
    ! cd "$VM_Conf_Dir"  &&  printColor "\n\n  ERROR  .conf  folder switching \n\n" && sleep 5 && exit 1
    Current_VM_Folder="$VM_Conf_Dir"

    if [[ ! $IgnoreFolderCheck ]] && [[ $VM_Conf_File != "empty" ]] && [[ ! -e "$VM_Conf_File" ]]; then  
      function_conf_error  ".conf file" && SelectArrayError=1
    fi

    # Set Instance Name, following Quickemu pattern which sets the same name to the .conf file and to the main folder 
    VM_InstanceName="${VM_Conf_File/.conf}"

    # Check that the dir contains the right files  &&  grep .conf for right content
    if [[ $IgnoreFolderCheck || $VM_Conf_File == "empty" ]]; then IgnoreFolderCheck=
    elif [[ ! $(ls "$VM_InstanceName"/*.qcow2 2>/dev/null) ]]; then
      if [[ $(ls "$VM_InstanceName"/*.iso 2>/dev/null) || $(ls "$VM_InstanceName"/*.img 2>/dev/null) ]]; then 
        SelectArrayError=1; function_conf_error  "new" 
      else
        SelectArrayError=1; function_conf_error  "folder"
      fi
    fi

    if [[ ! $SelectArrayError ]]; then
      ! grep -q -s 'guest_os=' "$VM_Conf_File" && function_conf_error  ".conf file"   && SelectArrayError=1
    fi
    
    if [[ ! $SelectArrayError ]]; then
      # Check KVM parameter settings of new selection & advise accordingly
      KVM_MSR_selector=
      find_kvm_msr_default_and_status
      if [[ $Verbose_MSR_dialog ]] || [[ ! $Verbose_MSR_dialog ]] && [[ "$VM_InstanceName" == *windows* || "$VM_InstanceName" == *macos* ]]; then 
        msrs_conflict_check_resolver
      fi
    fi

  fi  

  
  if [[ $SelectArrayError || $SettingsFileAdjusted ]] && [[ ! $NewFileTuneUp_JustDone ]]; then 
  
    VM_Conf_Dir= ; VM_Conf_File= ; VM_InstanceName=  
    # reload if the editor was called, or called due to settings error > zero vars triggers the main qqX loop

  elif [[ ! $SelectArrayError ]]; then

    [[ $GeneralLoopCheck ]] && printf "\n\n VM Array_Selector 3:" &&  dev_loop_check

    # All existing .CONF VARS MUST BE CLEARED before sourcing a new conf file 
    # otherwise any items specified in the previous config, but not in the new one, will remain.
    refresh_conf_vars_and_values

    # Set or adjust any VM_Conf_Dir or other related globals  (VM is now selected OR has been re-selected)
    refresh_logfile_locations
    alert_on_new

    # clear any no-longer needed flags
    VM_Selection=
    ByPass_VM_Array_Loader=
    ByPass_VM_Array_Selector=
    MenuStylePreviewed=
    NewFileTuneUp=
    VM_Renamed=

    [[ $GeneralLoopCheck ]] && printf "\n\n VM Array_Selector 4:" &&  dev_loop_check

  fi

}


# If settings need reloading, following a settings edit or a VM deletion:

refresh_sources_and_load_VM_arrays() {

  # VM folder list should be compiled from the perspective of the Default Folder. 
  # If not already there, make sure this is the case.
  local RefreshCallFolder=
  local RefreshCall_VM_Folder=
  RefreshCallFolder="$(pwd)"
  RefreshCall_VM_Folder="$Current_VM_Folder"
  cd "$Default_VM_Folder" || printf "\n\n  ERROR changing to Default_VM_Folder to rebase the refresh"
  Current_VM_Folder="$Default_VM_Folder" 

  # clear any previously declared settings-based arrays 
  Extra_VM_Folder=()
  VM_Array=()   
  QemuErrorFilter=()
  clear_boot_style_vars

  # clear possible flags
  VM_SettingsError=
  SelectArrayError=
  IgnoreFolderCheck=
  IgnoreSecondCheckNew=
  KVM_MSR_Error=
  ShowUtilsMenu=
  ForceCustomBootStyle=

  [[ ! -f $qqX_SettingsFile ]] && function_conf_error "qqX_SettingsFile"
  source "$qqX_SettingsFile" 

  [[ $CodingHotSwap ]] && QE_SourceVersion="$CodingHotSwap" 
  refresh_and_load_quickemu_sources
  store_boot_style_defaults
  find_file_manager_browser
  find_texteditor

  Current_VM_Folder="$Default_VM_Folder"

  function_create_VM_folderList  
  scan_folders_list_and_add_VMs
  scan_VM_Array_for_sizes

  cd "$RefreshCallFolder" || printColor "\n\n  ERROR returning to Original Location following the Array refresh" 
  Current_VM_Folder="$RefreshCall_VM_Folder"


  refresh_conf_vars_and_values

}