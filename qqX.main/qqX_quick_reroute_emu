#!/usr/bin/env bash

##  qqX component to be located in folder 'qqX.main'

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED  
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:  
#   Licence  GPL3   https://www.gnu.org/licenses 
##  qqX - quickemu quickget X terminal project   

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC2024, SC154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242
#  shellcheck disable=SC1090 
#  shellcheck disable=SC2034
#  shellcheck disable=SC2154 


function quickemu {      

  # Any calls to quickemu become re-routed to this function instead.
  # Do a first check for amy qwrap internal commands   REVIEW 

  local FirstParamCount=0
  IFS=' '  read -ra FirstParamsArray <<< "$*"
  # https://unix.stackexchange.com/questions/50654/function-caller-positional-parameters?rq=1

  while [[ "${FirstParamsArray[$FirstParamCount]}" ]]; do
    for FirstParam in "${FirstParamsArray[@]}"; do
      case "$FirstParam" in
        --vm_boot)  
            VM_ExecBoot=1 
            unset "FirstParamsArray[$FirstParamCount]"
            set -- "${FirstParamsArray[@]}"
            # no other cases applicable, move on.
            break
            ;;
        --menu_bypass)
            # used for msr functions below
            unset "FirstParamsArray[$FirstParamCount]"
            set -- "${FirstParamsArray[@]}"          
            shift ;;
        --toggle_msr_defaults)  
            toggle_msr_defaults 
            exit directly ;; 
        --select_msr_config)  
            select_msr_config 
            exit directly ;; 
        --msrs_conflict_check_resolver)  
            msrs_conflict_check_resolver 
            exit directly ;; 
      esac
      ((FirstParamCount+=1))
    done
  done

  ## Run the code, by sourcing the sections  - first read the cased instructions, then do the actions
  #  These bits are basically the remaining sections of the original quickemu code. 
  #  The earlier original code sections are all functions that have now been loaded, as is, or modified

  if [[ ! -e "/tmp/qmod-case-temp" ]] || [[ ! -e "/tmp/qmod-actions-temp" ]] || [[ ! -e "/tmp/qmod-boot-temp" ]]; then

    printColor "\n\n ERROR qqX restart needed \n\n"  ; sleep 5

  else

    # keep running quickemu 'case' checks for matches:
    while [[ $1 ]]; do source "/tmp/qmod-case-temp" ; done  
    shift  $#

    # if no more matches, remove any leftover params not cleared due to trapped exit re-route 
    # & if not yet given, decide on action   
    #  https://unix.stackexchange.com/questions/18981/how-to-unset-the-positional-parameters

    # Quickemu normally 'SOURCES-IN' the .conf file at the start of "/tmp/qmod-actions-temp" 
    # BUT from qqX ver. 1.5 this happens at the end of qqX function 'VM_loader_selector_and_menu'
    # So, some setting confirmations and overides can be placed here, others go into the modded function 'vm_boot'   

    gl="$qqX_GL_Mode"  
    fixed_iso="$Mounted_ISO"
    [[ $guest_os == "macos" && ! $cpu_cores ]] && cpu_cores=8
    source "/tmp/qmod-actions-temp" 

    if [[ $VM_ExecBoot ]]; then

      # Make sure quickemu doesn't run the vm boot sequence after running an 'action' unless flagged to do so
      # load extracted standard quickemu code that gives the okay to run main function 'vm_boot' (in this case, the modded one)

      Mounted_ISO_Return=

      if [[ $HideBootMenu ]]; then
        printColor " 'HideBootMenu' may be session disabled in utils, to access BIOS Boot Manager ..."
        printf "\n\n  Use [iso] utility to select and mount a bootable image file \n\n"

      elif [[ $Mounted_ISO && ! $HideMountedMsg ]]; then
        printColor "  Mounted ISO:  To BOOT from ISO Press 'esc' when 'Start boot Option' appears" 
        printf "\n\n  Select 'Boot manager' and select 'QEMU DVD-ROM' from the list. "
        printf "\n\n  A 'live boot' ISO such as from https://gparted.org/download.php is required."
        printf "\n\n  Use [iso] utility to select and mount a bootable image file"
        printColor "\n\n  [enter] to continue  [b] to go back \n\n"
        read -rp "  >  "  Mounted_ISO_Return

      else
        printColor "  Press 'esc' to access BIOS Boot Manager, when 'Start boot Option' appears"
        printf "\n\n  Use [iso] utility to select and mount a bootable image file \n\n"

      fi

      if [[ $Mounted_ISO_Return ]]; then  return

      else

        # These logs only get cleared just before running, so stay until a boot sequence is run, irrespective of
        # whether the run is made as [v] verbose & terminated
        printf "" > "/tmp/qqX_echo_output.log"
        printf "" > "$QemuErrorLog"

        source "/tmp/qmod-boot-temp" 
        VM_ExecBoot=

        if [[ $BreakAtVerboseArgs ]]; then
          SpicyPID="$(pgrep spicy)"
          [[ $SpicyPID ]] && kill "$SpicyPID" 2>/dev/null &
        fi

      fi

    fi

  fi

}


