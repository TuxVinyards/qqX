"use strict";(self.webpackChunkqq_x=self.webpackChunkqq_x||[]).push([[88],{4578:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Folders-and-Organisation","title":"Folders-and-Organisation","description":"Making a new folder","source":"@site/docs/Folders-and-Organisation.md","sourceDirName":".","slug":"/Folders-and-Organisation","permalink":"/qqX/docs/Folders-and-Organisation","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"sidebar_position":40,"title":"Folders-and-Organisation"},"sidebar":"docsSidebar","previous":{"title":"FreeBird, FreeSpirit and Creative Differences","permalink":"/qqX/docs/FreeBird"},"next":{"title":"Snapshots and Rollbacks","permalink":"/qqX/docs/Snapshots"}}');var i=t(4848),a=t(8453);const s={sidebar_position:40,title:"Folders-and-Organisation"},r=void 0,l={},d=[{value:"Making a new folder",id:"making-a-new-folder",level:2},{value:"Marking Favorites",id:"marking-favorites",level:2},{value:"Making linked VMs",id:"making-linked-vms",level:2},{value:"Tags",id:"tags",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"making-a-new-folder",children:"Making a new folder"}),"\n",(0,i.jsx)(n.p,{children:"If you are using qqX for program development and testing you will soon find that a collection of 20 or 30 distros can quite easily happen ...  As your collection grows, you will want to sort and prioritize so that things a easy to find when you need them."}),"\n",(0,i.jsx)(n.p,{children:"Folders may be totally separate, even on separate drives. Or they may be simple sub-folders to your main one."}),"\n",(0,i.jsx)(n.p,{children:"Open your file manager. Navigate to where you want the folder and create it as normal. Set your address bar to text mode and copy."}),"\n",(0,i.jsx)(n.p,{children:"Simply paste in the whole folder path into the settings file and you are good to go."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"If you want to move a folder from one place to another, it is best to use the [mv] utility as it will update all the file paths in the .conf   file for you and save you a whole load of tedium and aggro."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"To add sym-linked VM's to an empty folder, load up the target VM in qqX, use the [ln] option. The original VM will remain where it is. More details below."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Alternatively, the empty folder can become home to whole new distros.  If you need folders, will you know the routine by now ..."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Extra_VM_Folder+=("/media/xxx/Files/VMQs/ARCH")\n\nExtra_VM_Folder+=("/media/xxx/Files/VMQs/UBUNTU")\n'})}),"\n",(0,i.jsx)(n.h2,{id:"marking-favorites",children:"Marking Favorites"}),"\n",(0,i.jsx)(n.p,{children:"As above, open your file manager, find the VM that you want put at the front of the list. Set your address bar to text mode and copy."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://github.com/user-attachments/assets/f7b871f4-a993-4514-8296-51f0dcad51cf",alt:"vm-folder-path"})}),"\n",(0,i.jsx)(n.p,{children:"In qqX, open the main settings menu and place the coordinates into a 'VM array'."}),"\n",(0,i.jsx)(n.p,{children:"For favorites, you will need to separate the category folder from the VM name, thus:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'VM_Array[0,0]="/media/xxx/Files/VMQs/MISC" ; VM_Array[0,1]="fedora-40-workstation.conf"\n\nVM_Array[1,0]="/media/xxx/Files/VMQs" ; VM_Array[1,1]="windows-11.conf"\n'})}),"\n",(0,i.jsx)(n.p,{children:"More notes are in the settings file."}),"\n",(0,i.jsx)(n.h2,{id:"making-linked-vms",children:"Making linked VMs"}),"\n",(0,i.jsx)(n.p,{children:"Something new to qqX 1.10 is the ability to add 'new' VMs to category folders, but Vms that already exist, and actually exist elsewhere ..."}),"\n",(0,i.jsxs)(n.p,{children:["You will probably have met ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Symbolic_link#POSIX_and_Unix-like_operating_systems",children:"symbolic links"})," by now, especially if you are needing to use this as an idea."]}),"\n",(0,i.jsx)(n.p,{children:"Lets say that you have 30 distros, of which 6 are your favourite test machines. You can now create a favorites folder, same method as above. But this time go to the VM selector and select and open the VM menu of the VM that you want to add."}),"\n",(0,i.jsxs)(n.p,{children:["In the utils menu, you will see the LN item [ln].  Follow the instructions and insta-magically you will have another copy of VM that will take up ",(0,i.jsx)(n.strong,{children:"zero"})," space. Not only that, it will automatically update when you update the original and the original will even update when you use the linked version too."]}),"\n",(0,i.jsxs)(n.p,{children:["In reality, there is in fact still only one version.  The links are like 'spooky connections' or 'worm-holes' between events. What happens in one place will happen in the other. Those of you who are familiar with the concept will of course know this. ","\ud83d\ude09"]}),"\n",(0,i.jsx)(n.h2,{id:"tags",children:"Tags"}),"\n",(0,i.jsx)(n.p,{children:"This is an idea that I have been musing with.  The basic code could be quite easy but the ramifications could be quite complex. Something for a future release probably though ...."})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var o=t(6540);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);