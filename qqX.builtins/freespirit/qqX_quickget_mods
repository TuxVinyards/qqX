#!/usr/bin/env bash

##  qqX - quickemu quickget X terminal project

#  ADDS IN NEW DISTRO LISTINGS and ALLOWS FUNCTION OVERWRITES
#  qqX component to be located in builtins folder

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:
#   Licence  GPL3   https://www.gnu.org/licenses

##  May contain MIT licensed snippets or functions from the Quickemu project that have been modified.

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154

## CODING STYLE

#  A more MODERN BASH style of coding is used for qqX than that used for QuickEmu.

#  However, NOT TO WORRY if you are only familiar the older more POSIX styles, there are still plenty of options
#  for contributions to the quickemu built-ins, particularly with this file ...

#  Use 4 space tabs with this file, as with QuickGet, so that code can be directly pasted into here and tweaked.
#  QuickGet and qqX house styles may be mixed. See notes at end for qqX coding style.
#  This script is sourced when running a Quickget builtin. It remains variable isolated from running instances of qqX.
#  Take care to maintain QuickGet variable name continuity.

#  To test code, run './quickget --check distroname' etc from a terminal opened in the relevant builtin folder.

##########################################

## 1:  LISTS & FILTERS (alphabetical, space separated and space isolated at each end)

# osAddList for new qqX listed distros
osAddList=" anduinos bluestar "
#osAddList+=" another "

# osRemoveList for distros that are problematic or no longer maintained, but still listed by Quickget
osRemoveList=" vxlinux arcolinux "
#osRemoveList+=" another and-one-more "

osSupported="$(os_support)"
osSupported+=" $osAddList "
osSupported="${osSupported//'  '/' '}"
osSupported="$(tr ' ' '\n' <<< "$osSupported" | sort -bd)"
osSupported="$(paste -s -d ' ' <<< "$osSupported")"
osSupported="${osSupported//'  '/' '}"
osSupported_All="$osSupported"

osRemoveList="${osRemoveList//'  '/' '}"
osRemoveList="${osRemoveList//'  '/' '}"
mapfile -t -d ' ' osRemoveArr <<< "$osRemoveList"

## For FILTER CALLS, see/add at start of quick_REROUTE_get
# The call will cause a defined list to be shown by triggering a controlled error state in Quickget ...

osServersList=" alpine centos-stream freedos proxmox-ve "
osServersList+=" truenas-core truenas-scale ubuntu-server windows-server "
osServersList="${osServersList//'  '/' '}"
osServersList="${osServersList//'  '/' '}"

if [[ $1 == "qqlist-desktop"  ]] ; then mapfile -t -O "${#osRemoveArr[@]}" -d ' ' osRemoveArr <<< "$osServersList"
elif [[ $1 == "qqlist-server-cl" ]] ; then osSupported="$osServersList"
else osSupported="$osSupported_All"
fi

for Rem in "${osRemoveArr[@]}"; do
	osSupported="${osSupported//" $Rem "/' '}"
done

osSupported="${osSupported//'   '/' '}"
osSupported="${osSupported//'  '/' '}"
osSupported="${osSupported//'  '/' '}"

# replace old function but only after old one has been read
function os_support { echo " $osSupported " ; }

##########################################

## 2: INFO
# Needed for new qqX listed distros or use for INFO overwrites

function os_info {
    local INFO=
    case "$1" in
        #name)            INFO="PrettyName|Credentials|Homepage|Info";;
        anduinos)         INFO="Anduin OS|-|https://www.anduinos.com/|Ubuntu-based Linux distribution that aims to facilitate developers transitioning from Windows.";;
        bluestar)         INFO="Blue Star|-|https://sourceforge.net/projects/bluestarlinux/|Arch based, MacOS-like take on KDE Plasma that's easy to use.";;
        tinycore)         INFO="Tiny Core Linux|-|http://www.tinycorelinux.net/|Nomadic ultra small graphical desktop operating system capable of booting from cdrom, pendrive, or frugally from a hard drive.";;
    esac
	[[ ! $INFO ]] && INFO="$(os_info_QG "$1")"
    echo "$INFO"
}

##########################################

## 3: RELEASES, EDITIONS and DOWNLOAD URL
# Needed for new qqX listed distros or use for "releases_${OS} ()" and "editions_${OS} ()" overwrites.

# Quickget's behaviour is to continually exit on error until the correct input combination is made.
# This means that Quickget probes normally have to be carried out via repeated and discontiguous command line args requests
# and that the use of global variables is either limited or not possible:

# IF CHECKING editions, the var $RELEASE becomes available in the function editions_$OS
# When running complete distro checks, via './quickget --check distroname', this uses function 'test-all' and
# both vars $RELEASE & $EDITION become available in the 'get' function.

# The first two FUNCTIONS feed STDOUT to the look-up function 'validate_release' followed by
# the last lines of Quickget where distro editions are handled.

# Transfer files may also be implemented: @ 06/2025 see 'anduinos' as an example ...
# Some distros single release with no editions eg. bluestar

# Note that Quickget's 'web_pipe()' is an alias for Curl and will generate STDOUT by itself, without needing 'echo'.
# Also that further echoes can be avoided via Bash's <<< 'herestring' feature.

# THE 'GET' FUNCTION should generate the download target and a checksum.
# Quickget often employs local variables $URL and $HASH but any format may be used.
# The last line should supply the DOWNLOAD TARGET TO STDOUT to $1, to be read by create_vm() or test-all() etc.
# If available, the checksum should be downloaded, cleaned and supplied to $2.

# Where possible, try to keep web greps dynamic. This is made easier with 'floatversion' and may include 'fv' pipes.
# See https://github.com/TuxVinyards/floatversion

# Place standard sized 'get' functions here, next to releases and editions, and any oversized ones in section 7.
# Downloads may occasionally need a special tidy-up and finalization. See sections 4 to 6.

# For testing code, run './quickget --check distroname' from a terminal opened in the relevant builtin folder.

## ADD
function releases_anduinos {
    echo "LTS Standard"
}
function editions_anduinos {
    while true ; do
        if ! { grep -qs "$OS" "/tmp/qGet.rel.data.txt" && grep -s ReleaseName "/tmp/qGet.rel.data.txt" | grep -qs "$RELEASE"; } ; then
            printf "qGetDistro=\"%s\"" "$OS"> "/tmp/qGet.rel.data.txt"
            if [[ $RELEASE == "LTS" ]]; then ReleaseNumber="$(web_pipe "https://docs.anduinos.com/VERSIONS.html" |tr '>' '\n' | grep '</td' | grep LTS | fv -M -Q)"
            else ReleaseNumber="$(web_pipe "https://docs.anduinos.com/VERSIONS.html" |tr '>' '\n' | grep '</td' | grep -v LTS | fv -M -Q)"
            fi
            # Checks work with Anduin if we slow down the 'bot' behaviour, make it seem more human:
            RndNum="$( (tr -cd '2-4' | head -c 1) < /dev/urandom )" ; sleep "$RndNum"
            ReleasePoint="$(web_pipe "https://download.anduinos.com/${ReleaseNumber}/" | grep href | fv -M -Q )"
            RndNum="$( (tr -cd '2-4' | head -c 1) < /dev/urandom )" ; sleep "$RndNum"
            ReleaseEditions="$(web_pipe "https://download.anduinos.com/${ReleaseNumber}/${ReleasePoint}" \
            | grep -v sha256 | grep -v torrent | tr '>' '\n' | grep iso | grep -v '<a' | cut -d'<' -f1 | cut -d'-' -f3 | cut -d'.' -f1 | paste -s -d' ')"
            printf "\nReleaseName=\"%s\"\nReleaseNumber=\"%s\"\nReleasePoint=\"%s\"\nReleaseEditions=\"%s\"" "$RELEASE" "$ReleaseNumber" "$ReleasePoint" "$ReleaseEditions" >> "/tmp/qGet.rel.data.txt"
            RndNum="$( (tr -cd '6-9' | head -c 1) < /dev/urandom )" ; sleep "$RndNum"
        fi
        ReleaseName= ; ReleaseNumber= ; ReleasePoint= ; ReleaseEditions=
        source "/tmp/qGet.rel.data.txt"
        if [[ $ReleaseName && $ReleaseNumber && $ReleasePoint && $ReleaseEditions ]] ; then break
        else printf "" > "/tmp/qGet.rel.data.txt"
        fi
    done
    # @june 2025 "ar_SA de_DE en_GB en_US es_ES fr_FR it_IT ja_JP ko_KR nl_NL pl_PL pt_BR pt_PT ru_RU sv_SE th_TH tr_TR vi_VN zh_CN zh_HK zh_TW"
    printf "%s" "$RELEASE" > "/tmp/qGet.ED.data.txt"
    printf "" > "/tmp/qGet.GET.data.txt"
    [[ ! $ReleaseEditions ]] && source "/tmp/qGet.rel.data.txt"
    echo "$ReleaseEditions"
}
function get_anduinos {
    source "/tmp/qGet.rel.data.txt"
    # This slowdown needed for looping through test-all()
    if [[ $(cat "/tmp/qGet.GET.data.txt" 2>/dev/null) ]]; then
        RndNum="$( (tr -cd '6-9' | head -c 1) < /dev/urandom )" ; sleep "1$RndNum"
    fi
    AnduinIso="https://download.anduinos.com/${ReleaseNumber}/${ReleasePoint}/AnduinOS-${ReleasePoint}-${EDITION}.iso"
    AnduinHash="$(web_pipe "https://download.anduinos.com/${ReleaseNumber}/${ReleasePoint}/AnduinOS-${ReleasePoint}-${EDITION}.sha256" \
    | cut -d':' -f2 | tr -cd '[:graph:]')"
    echo "$AnduinIso $AnduinHash"
    #printf "%s %s" "$RELEASE" "$EDITION" > "/tmp/qGet.GET.data.txt"
    printf "%s" "$EDITION" > "/tmp/qGet.GET.data.txt"
}

## ADD
function releases_bluestar {
    echo "latest"
}
function get_bluestar {
    BlueStarRelease="$(web_pipe https://sourceforge.net/projects/bluestarlinux/ | tr ' ' '\n' | grep -s -e '\.iso')"
    BlueStarIso="https://sourceforge.net/projects/bluestarlinux/files/distro/${BlueStarRelease}"
    BlueStarHash="https://sourceforge.net/projects/bluestarlinux/files/distro/${BlueStarRelease/iso/md5}"
    BlueStarHash="$(web_pipe "$BlueStarHash" | cut -d' ' -f1)"
    echo "$BlueStarIso $BlueStarHash"
}

## FIX Cosmic Atomic
function get_fedora() {
    local HASH="" ; local ISO="" ; local JSON="" ; local URL="" ; local VARIANT=""
    case ${EDITION} in
        KDE) if [[ $RELEASE -ge 42 ]]; then VARIANT="${EDITION}"; else VARIANT="Spins"; fi ;;
        Server|Kinoite|Onyx|Silverblue|Sericea|Workstation|COSMIC-Atomic) VARIANT="${EDITION}";;
        *) VARIANT="Spins";;
    esac
    # The naming of 41 Beta with a space is problematic so we replaced it with an underscore but we need to convert it back to a space
    # for the URL search in the JSON if RELEASE contains an underscore, replace it with a space
    [[ "${RELEASE}" == *"_"* ]] && RELEASE="${RELEASE/_/ }"
    # shellcheck disable=SC2086
    JSON=$(web_pipe "https://getfedora.org/releases.json" | jq '.[] | select(.variant=="'${VARIANT}'" and .subvariant=="'"${EDITION}"'" and .arch=="x86_64" and .version=="'"${RELEASE}"'" and (.link | endswith(".iso")))')
    URL=$(echo "${JSON}" | jq -r '.link' | head -n1)
    HASH=$(echo "${JSON}" | jq -r '.sha256' | head -n1)
    echo "${URL} ${HASH}"
}

##########################################

## 4: GUEST TYPE

# Needed only for special case instructions, such as non-iso
# Use for new qqX listed distros or for case overwrites
# Add in the format of "guest_type_${OS} ()"

##########################################

## 5: CONFIGURATION

# Needed only for special case instructions, such as needs legacy boot etc
# Use for new qqX listed distros or for case overwrites
# Add in the format of "config_${OS} ()"

##########################################

## 6: FINALIZING

# Needed only for special case instructions, such as decompression routines
# Use for new qqX listed distros or for case overwrites
# Add in the format of "finalize_${OS} ()"

##########################################

## 7: DOWNLOAD XL
# For special and oversized 'get' functions or "get_${OS} ()" overwrites eg Windows or Mac
# Normally place 'get' functions next to releases and editions

##########################################

## CODING STYLE  (as listed at the end of the main 'qqX' script)

#  A more MODERN BASH style of coding is used for qqX than that used for QuickEmu.

#  NOT TO WORRY if you are only familiar the older more POSIX styles, there are still plenty of options
#  for contributions to the quickemu built-ins, particularly with QuickGet which needs frequent updating.

#  VARIABLES should normally tend towards 'CamelCase' & FUNCTIONS should tend towards 'snake_case'.
#  Aim for clarity and contextual identity. Emphasis or separation underscoring & caps should be added where needed.

#  Modern editors, such as VS Code or Sublime have auto-suggesting which enables LongerMoreHelpfulVariableNames.

#  Also SHELLCHECK will NOT continuity follow all-caps variables either, even if SC2154 is enabled ...
#  https://en.wikipedia.org/wiki/Camel_case   https://en.wikipedia.org/wiki/Snake_case

#  Variables {don't} need to be braced unless using string manipulations or needing to stop vars from merging with other text.
#  Some of QuickEmu's variables can be very ambiguous eg. '$VERSION' but in some places have to be used.
#  Except for the .conf file, where they are lowercase, they are generally CAPS and very brief ...

#  BRACKETS:  if [[ $Foo ]] && [[ ! $Bar ]] ...   Posix Style is not needed:  if [ -n ${FOO} ] && [ -z ${bar} ] ....

#  The [[ double bracket ]] system is NOW the STANDARD METHOD in the Bash Manual.
#  See  https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-_005b_005b
#  Plus https://ss64.com/bash/test.html  And (older article) http://mywiki.wooledge.org/BashFAQ/031

#  Double bracket one-liners may be new to some people.
#  These statements are all the same:

FooVar=

if [ -n "${FooVar}" ]; then
    echo
    echo "  Hello "
    echo
fi

if [[ $FooVar ]]; then
    printf "\n\n  Hello \n\n"
fi

[[ $FooVar ]] && printf "\n\n  Hello \n\n"

#  COMMENTS: Add clarification or explanation to code, especially if the origin or meaning could be difficult to follow.

#  Add links to any how-to's that you used.  If you needed to check, then others may do also.
#  Let others follow what you are/were thinking at the time & give Bash beginners a chance too.
#  It makes it easier for everyone, especially later on.

#  SPACE:  Give your code some room to breathe. But also keep your code tight enough to view on smaller screens.
#  Place it into clear logic blocks. Make it easy to follow & easy to see what is happening.

#  SED, AWK and REGEX:  Commands can very easily finish up as lines of indecipherable hieroglyphics.
#  If you must use them, keep things very simple & explain the sections.
#  Where possible use Bash's string manipulations instead.   See: http://mywiki.wooledge.org/BashFAQ/100

#  ECHO: Beyond basic one-liners, the use of printf should generally be preferred.  See https://ss64.com/bash/printf.html
#  However & specifically, echo within the vm boot control section of the qqX script *must* be avoided
#  as an echo trap is used to tee quickemu screen output to the qqX boot log.

#  All code should be SHELLCHECK linted & disables avoided where possible.
#  The VS Code shellcheck extension works well if set to 'check-on-save'.


# https://code.visualstudio.com/  (recommended)
# vim:tabstop=4:shiftwidth=4:expandtab