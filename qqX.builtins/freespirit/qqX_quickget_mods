#!/usr/bin/env bash

##  qqX - quickemu quickget X terminal project

#  ADDS IN NEW DISTRO LISTINGS and ALLOWS FUNCTION OVERWRITES
#  qqX component to be located in builtins folder

##  Copyright (c)  Alex Genovese   https://github.com/TuxVinyards
#   SMALL CODE SNIPPETS eg the function printColor MAY BE USED
#   PERMISSIVELY in projects as MIT or similar, providing CLEAR ATTRIBUTIONS are shown.
# 	Otherwise:
#   Licence  GPL3   https://www.gnu.org/licenses

##  May contain MIT licensed snippets or functions from the Quickemu project that have been modified.

## ShellCheck global disables:
# https://www.shellcheck.net/wiki/SC2242 as it clashes with use of exit traps used to keep mouse click scripts open
# And SC1090,SC1091,SC2024, SC2154 for necessity of dynamic file sourcing

#  shellcheck disable=SC2242,SC1090,SC1091,SC2034,SC2154

## CODING STYLE

#  A more MODERN BASH style of coding is used for qqX than that used for QuickEmu.

#  However, NOT TO WORRY if you are only familiar the older more POSIX styles, there are still plenty of options
#  for contributions to the quickemu built-ins, particularly with this file ...

#  Uses 4 space tabs as with QuickGet so that code can be directly pasted into here and tweaked.

##########################################

osAddList=" anduinos bluestar "
#osAddList+=" another "

osRemoveList=" vxlinux "
#osRemoveList+=" another and-one-more "

osServersList=" alpine centos-stream  "
osServersList+=" proxmox-ve rockylinux "

osSupported="$(os_support)"
osSupported+=" $osAddList "
osSupported="${osSupported//'  '/' '}"
osSupported="$(tr ' ' '\n' <<< "$osSupported" | sort -bd)"
osSupported="$(paste -s -d ' ' <<< "$osSupported")"
osSupported="${osSupported//'  '/' '}"
osSupported_All="$osSupported"

osRemoveList="${osRemoveList//'  '/' '}"
osRemoveList="${osRemoveList//'  '/' '}"
mapfile -t -d ' ' osRemoveArr <<< "$osRemoveList"

osServersList="${osServersList//'  '/' '}"
osServersList="${osServersList//'  '/' '}"

if [[ $1 == "qqlist-desktop"  ]] ; then mapfile -t -O "${#osRemoveArr[@]}" -d ' ' osRemoveArr <<< "$osServersList"
elif [[ $1 == "qqlist-server" ]] ; then osSupported="$osServersList"
else osSupported="$osSupported_All"
fi

for Rem in "${osRemoveArr[@]}"; do
	# space isolated
	osSupported="${osSupported//" $Rem "/' '}"
done

osSupported="${osSupported//'   '/' '}"
osSupported="${osSupported//'  '/' '}"
osSupported="${osSupported//'  '/' '}"

# replace old function but only after old one has been read
function os_support { echo "$osSupported" ; }

##########################################

function os_info {
    local INFO=
    InfoStream=
    case "$1" in
        #name)            INFO="PrettyName|Credentials|Homepage|Info";;
        anduinos)         INFO="Anduin OS|-|https://almalinux.org/|Community owned and governed, forever-free enterprise Linux distribution, focused on long-term stability, providing a robust production-grade platform. AlmaLinux OS is binary compatible with RHELÂ®.";;
        bluestar)         INFO="Blue Star|-|https://alpinelinux.org/|Security-oriented, lightweight Linux distribution based on musl libc and busybox.";;
    esac
    InfoStream="$INFO"
	[[ ! $InfoStream ]] && InfoStream="$(os_info_QG "$1")"
    echo "$InfoStream"
}

##########################################

# Anduin OS

# Blue Star

##########################################


## CODING STYLE  (as listed at the end of the main 'qqX' script)

#  A more MODERN BASH style of coding is used for qqX than that used for QuickEmu.

#  NOT TO WORRY if you are only familiar the older more POSIX styles, there are still plenty of options
#  for contributions to the quickemu built-ins, particularly with QuickGet which needs frequent updating.

#  VARIABLES should normally tend towards 'CamelCase' & FUNCTIONS should tend towards 'snake_case'.
#  Aim for clarity and contextual identity. Emphasis or separation underscoring & caps should be added where needed.

#  Modern editors, such as VS Code or Sublime have auto-suggesting which enables LongerMoreHelpfulVariableNames.

#  Also SHELLCHECK will NOT continuity follow all-caps variables either, even if SC2154 is enabled ...
#  https://en.wikipedia.org/wiki/Camel_case   https://en.wikipedia.org/wiki/Snake_case

#  Variables {don't} need to be braced unless using string manipulations or needing to stop vars from merging with other text.
#  Some of QuickEmu's variables can be very ambiguous eg. '$VERSION' but in some places have to be used.
#  Except for the .conf file, where they are lowercase, they are generally CAPS and very brief ...

#  BRACKETS:  if [[ $Foo ]] && [[ ! $Bar ]] ...   Posix Style is not needed:  if [ -n ${FOO} ] && [ -z ${bar} ] ....

#  The [[ double bracket ]] system is NOW the STANDARD METHOD in the Bash Manual.
#  See  https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#index-_005b_005b
#  Plus https://ss64.com/bash/test.html  And (older article) http://mywiki.wooledge.org/BashFAQ/031

#  Double bracket one-liners may be new to some people.
#  These statements are all the same:

FooVar=

if [ -n "${FooVar}" ]; then
    echo
    echo "  Hello "
    echo
fi

if [[ $FooVar ]]; then
    printf "\n\n  Hello \n\n"
fi

[[ $FooVar ]] && printf "\n\n  Hello \n\n"

#  COMMENTS: Add clarification or explanation to code, especially if the origin or meaning could be difficult to follow.

#  Add links to any how-to's that you used.  If you needed to check, then others may do also.
#  Let others follow what you are/were thinking at the time & give Bash beginners a chance too.
#  It makes it easier for everyone, especially later on.

#  SPACE:  Give your code some room to breathe. But also keep your code tight enough to view on smaller screens.
#  Place it into clear logic blocks. Make it easy to follow & easy to see what is happening.

#  SED, AWK and REGEX:  Commands can very easily finish up as lines of indecipherable hieroglyphics.
#  If you must use them, keep things very simple & explain the sections.
#  Where possible use Bash's string manipulations instead.   See: http://mywiki.wooledge.org/BashFAQ/100

#  ECHO: Beyond basic one-liners, the use of printf should generally be preferred.  See https://ss64.com/bash/printf.html
#  However & specifically, echo within the vm boot control section of the qqX script *must* be avoided
#  as an echo trap is used to tee quickemu screen output to the qqX boot log.

#  All code should be SHELLCHECK linted & disables avoided where possible.
#  The VS Code shellcheck extension works well if set to 'check-on-save'.


# https://code.visualstudio.com/  (recommended)
# vim:tabstop=4:shiftwidth=4:expandtab